//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (50939fdd) on 2021-01-14 13:57:39
//--------------------------------------------------------------------------------
module litedram_core(
	output reg serial_tx,
	input wire serial_rx,
	input wire clk,
	input wire rst,
	output wire pll_locked,
	output wire [12:0] ddram_a,
	output wire [2:0] ddram_ba,
	output wire ddram_ras_n,
	output wire ddram_cas_n,
	output wire ddram_we_n,
	output wire ddram_cs_n,
	output wire [1:0] ddram_dm,
	inout wire [15:0] ddram_dq,
	inout wire [1:0] ddram_dqs_p,
	inout wire [1:0] ddram_dqs_n,
	output wire ddram_clk_p,
	output wire ddram_clk_n,
	output wire ddram_cke,
	output wire ddram_odt,
	output wire ddram_reset_n,
	output wire init_done,
	output wire init_error,
	output wire user_clk,
	output wire user_rst,
	input wire user_port_axi_0_awvalid,
	output wire user_port_axi_0_awready,
	input wire [26:0] user_port_axi_0_awaddr,
	input wire [1:0] user_port_axi_0_awburst,
	input wire [7:0] user_port_axi_0_awlen,
	input wire [3:0] user_port_axi_0_awsize,
	input wire [5:0] user_port_axi_0_awid,
	input wire user_port_axi_0_wvalid,
	output wire user_port_axi_0_wready,
	input wire user_port_axi_0_wlast,
	input wire [7:0] user_port_axi_0_wstrb,
	input wire [63:0] user_port_axi_0_wdata,
	output wire user_port_axi_0_bvalid,
	input wire user_port_axi_0_bready,
	output wire [1:0] user_port_axi_0_bresp,
	output wire [5:0] user_port_axi_0_bid,
	input wire user_port_axi_0_arvalid,
	output wire user_port_axi_0_arready,
	input wire [26:0] user_port_axi_0_araddr,
	input wire [1:0] user_port_axi_0_arburst,
	input wire [7:0] user_port_axi_0_arlen,
	input wire [3:0] user_port_axi_0_arsize,
	input wire [5:0] user_port_axi_0_arid,
	output wire user_port_axi_0_rvalid,
	input wire user_port_axi_0_rready,
	output wire user_port_axi_0_rlast,
	output wire [1:0] user_port_axi_0_rresp,
	output wire [63:0] user_port_axi_0_rdata,
	output wire [5:0] user_port_axi_0_rid
);

reg soccontroller_reset_storage = 1'd0;
reg soccontroller_reset_re = 1'd0;
reg [31:0] soccontroller_scratch_storage = 32'd305419896;
reg soccontroller_scratch_re = 1'd0;
wire [31:0] soccontroller_bus_errors_status;
wire soccontroller_bus_errors_we;
reg soccontroller_bus_errors_re = 1'd0;
wire soccontroller_reset;
wire soccontroller_bus_error;
reg [31:0] soccontroller_bus_errors = 32'd0;
wire serv_reset;
wire [29:0] serv_ibus_adr;
reg [31:0] serv_ibus_dat_w = 32'd0;
wire [31:0] serv_ibus_dat_r;
wire [3:0] serv_ibus_sel;
wire serv_ibus_cyc;
wire serv_ibus_stb;
wire serv_ibus_ack;
reg serv_ibus_we = 1'd0;
reg [2:0] serv_ibus_cti = 3'd0;
reg [1:0] serv_ibus_bte = 2'd0;
wire serv_ibus_err;
wire [29:0] serv_dbus_adr;
wire [31:0] serv_dbus_dat_w;
wire [31:0] serv_dbus_dat_r;
wire [3:0] serv_dbus_sel;
wire serv_dbus_cyc;
wire serv_dbus_stb;
wire serv_dbus_ack;
wire serv_dbus_we;
reg [2:0] serv_dbus_cti = 3'd0;
reg [1:0] serv_dbus_bte = 2'd0;
wire serv_dbus_err;
wire [1:0] serv0;
wire [1:0] serv1;
wire [29:0] litedramcore_ram_bus_adr;
wire [31:0] litedramcore_ram_bus_dat_w;
wire [31:0] litedramcore_ram_bus_dat_r;
wire [3:0] litedramcore_ram_bus_sel;
wire litedramcore_ram_bus_cyc;
wire litedramcore_ram_bus_stb;
reg litedramcore_ram_bus_ack = 1'd0;
wire litedramcore_ram_bus_we;
wire [2:0] litedramcore_ram_bus_cti;
wire [1:0] litedramcore_ram_bus_bte;
reg litedramcore_ram_bus_err = 1'd0;
wire [12:0] litedramcore_adr;
wire [31:0] litedramcore_dat_r;
wire [29:0] ram_bus_ram_bus_adr;
wire [31:0] ram_bus_ram_bus_dat_w;
wire [31:0] ram_bus_ram_bus_dat_r;
wire [3:0] ram_bus_ram_bus_sel;
wire ram_bus_ram_bus_cyc;
wire ram_bus_ram_bus_stb;
reg ram_bus_ram_bus_ack = 1'd0;
wire ram_bus_ram_bus_we;
wire [2:0] ram_bus_ram_bus_cti;
wire [1:0] ram_bus_ram_bus_bte;
reg ram_bus_ram_bus_err = 1'd0;
wire [10:0] ram_adr;
wire [31:0] ram_dat_r;
reg [3:0] ram_we = 4'd0;
wire [31:0] ram_dat_w;
reg [31:0] uart_phy_storage = 32'd4947802;
reg uart_phy_re = 1'd0;
wire uart_phy_sink_valid;
reg uart_phy_sink_ready = 1'd0;
wire uart_phy_sink_first;
wire uart_phy_sink_last;
wire [7:0] uart_phy_sink_payload_data;
reg uart_phy_tx_clken = 1'd0;
reg [31:0] uart_phy_tx_clkphase = 32'd0;
reg [7:0] uart_phy_tx_reg = 8'd0;
reg [3:0] uart_phy_tx_bitcount = 4'd0;
reg uart_phy_tx_busy = 1'd0;
reg uart_phy_source_valid = 1'd0;
wire uart_phy_source_ready;
reg uart_phy_source_first = 1'd0;
reg uart_phy_source_last = 1'd0;
reg [7:0] uart_phy_source_payload_data = 8'd0;
reg uart_phy_rx_clken = 1'd0;
reg [31:0] uart_phy_rx_clkphase = 32'd0;
wire uart_phy_rx;
reg uart_phy_rx_r = 1'd0;
reg [7:0] uart_phy_rx_reg = 8'd0;
reg [3:0] uart_phy_rx_bitcount = 4'd0;
reg uart_phy_rx_busy = 1'd0;
wire uart_rxtx_re;
wire [7:0] uart_rxtx_r;
wire uart_rxtx_we;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_old_trigger = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_old_trigger = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg uart_pending_re = 1'd0;
reg [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg [1:0] uart_enable_storage = 2'd0;
reg uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg uart_reset = 1'd0;
reg [31:0] timer_load_storage = 32'd0;
reg timer_load_re = 1'd0;
reg [31:0] timer_reload_storage = 32'd0;
reg timer_reload_re = 1'd0;
reg timer_en_storage = 1'd0;
reg timer_en_re = 1'd0;
reg timer_update_value_storage = 1'd0;
reg timer_update_value_re = 1'd0;
reg [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg timer_zero_clear = 1'd0;
reg timer_zero_old_trigger = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg timer_pending_re = 1'd0;
reg timer_pending_r = 1'd0;
wire timer_zero2;
reg timer_enable_storage = 1'd0;
reg timer_enable_re = 1'd0;
reg [31:0] timer_value = 32'd0;
wire sys_clk;
wire sys_rst;
wire sys2x_clk;
wire sys2x_dqs_clk;
wire iodelay_clk;
wire iodelay_rst;
wire reset;
wire locked;
wire clkin;
wire clkout0;
wire clkout_buf0;
wire clkout1;
wire clkout_buf1;
wire clkout2;
wire clkout_buf2;
wire clkout3;
wire clkout_buf3;
reg [3:0] reset_counter = 4'd15;
reg ic_reset = 1'd1;
reg a7ddrphy_rst_storage = 1'd0;
reg a7ddrphy_rst_re = 1'd0;
reg [4:0] a7ddrphy_half_sys8x_taps_storage = 5'd16;
reg a7ddrphy_half_sys8x_taps_re = 1'd0;
reg a7ddrphy_wlevel_en_storage = 1'd0;
reg a7ddrphy_wlevel_en_re = 1'd0;
wire a7ddrphy_wlevel_strobe_re;
wire a7ddrphy_wlevel_strobe_r;
wire a7ddrphy_wlevel_strobe_we;
reg a7ddrphy_wlevel_strobe_w = 1'd0;
reg [1:0] a7ddrphy_dly_sel_storage = 2'd0;
reg a7ddrphy_dly_sel_re = 1'd0;
wire a7ddrphy_rdly_dq_rst_re;
wire a7ddrphy_rdly_dq_rst_r;
wire a7ddrphy_rdly_dq_rst_we;
reg a7ddrphy_rdly_dq_rst_w = 1'd0;
wire a7ddrphy_rdly_dq_inc_re;
wire a7ddrphy_rdly_dq_inc_r;
wire a7ddrphy_rdly_dq_inc_we;
reg a7ddrphy_rdly_dq_inc_w = 1'd0;
wire a7ddrphy_rdly_dq_bitslip_rst_re;
wire a7ddrphy_rdly_dq_bitslip_rst_r;
wire a7ddrphy_rdly_dq_bitslip_rst_we;
reg a7ddrphy_rdly_dq_bitslip_rst_w = 1'd0;
wire a7ddrphy_rdly_dq_bitslip_re;
wire a7ddrphy_rdly_dq_bitslip_r;
wire a7ddrphy_rdly_dq_bitslip_we;
reg a7ddrphy_rdly_dq_bitslip_w = 1'd0;
wire a7ddrphy_wdly_dq_bitslip_rst_re;
wire a7ddrphy_wdly_dq_bitslip_rst_r;
wire a7ddrphy_wdly_dq_bitslip_rst_we;
reg a7ddrphy_wdly_dq_bitslip_rst_w = 1'd0;
wire a7ddrphy_wdly_dq_bitslip_re;
wire a7ddrphy_wdly_dq_bitslip_r;
wire a7ddrphy_wdly_dq_bitslip_we;
reg a7ddrphy_wdly_dq_bitslip_w = 1'd0;
reg a7ddrphy_rdphase_storage = 1'd1;
reg a7ddrphy_rdphase_re = 1'd0;
reg a7ddrphy_wrphase_storage = 1'd0;
reg a7ddrphy_wrphase_re = 1'd0;
wire [12:0] a7ddrphy_dfi_p0_address;
wire [2:0] a7ddrphy_dfi_p0_bank;
wire a7ddrphy_dfi_p0_cas_n;
wire a7ddrphy_dfi_p0_cs_n;
wire a7ddrphy_dfi_p0_ras_n;
wire a7ddrphy_dfi_p0_we_n;
wire a7ddrphy_dfi_p0_cke;
wire a7ddrphy_dfi_p0_odt;
wire a7ddrphy_dfi_p0_reset_n;
wire a7ddrphy_dfi_p0_act_n;
wire [31:0] a7ddrphy_dfi_p0_wrdata;
wire a7ddrphy_dfi_p0_wrdata_en;
wire [3:0] a7ddrphy_dfi_p0_wrdata_mask;
wire a7ddrphy_dfi_p0_rddata_en;
reg [31:0] a7ddrphy_dfi_p0_rddata = 32'd0;
wire a7ddrphy_dfi_p0_rddata_valid;
wire [12:0] a7ddrphy_dfi_p1_address;
wire [2:0] a7ddrphy_dfi_p1_bank;
wire a7ddrphy_dfi_p1_cas_n;
wire a7ddrphy_dfi_p1_cs_n;
wire a7ddrphy_dfi_p1_ras_n;
wire a7ddrphy_dfi_p1_we_n;
wire a7ddrphy_dfi_p1_cke;
wire a7ddrphy_dfi_p1_odt;
wire a7ddrphy_dfi_p1_reset_n;
wire a7ddrphy_dfi_p1_act_n;
wire [31:0] a7ddrphy_dfi_p1_wrdata;
wire a7ddrphy_dfi_p1_wrdata_en;
wire [3:0] a7ddrphy_dfi_p1_wrdata_mask;
wire a7ddrphy_dfi_p1_rddata_en;
reg [31:0] a7ddrphy_dfi_p1_rddata = 32'd0;
wire a7ddrphy_dfi_p1_rddata_valid;
reg [12:0] a7ddrphy_dfi_p2_address = 13'd0;
reg [2:0] a7ddrphy_dfi_p2_bank = 3'd0;
reg a7ddrphy_dfi_p2_cas_n = 1'd1;
reg a7ddrphy_dfi_p2_cs_n = 1'd1;
reg a7ddrphy_dfi_p2_ras_n = 1'd1;
reg a7ddrphy_dfi_p2_we_n = 1'd1;
reg a7ddrphy_dfi_p2_cke = 1'd0;
reg a7ddrphy_dfi_p2_odt = 1'd0;
reg a7ddrphy_dfi_p2_reset_n = 1'd0;
reg [31:0] a7ddrphy_dfi_p2_wrdata = 32'd0;
reg [3:0] a7ddrphy_dfi_p2_wrdata_mask = 4'd0;
reg [31:0] a7ddrphy_dfi_p2_rddata = 32'd0;
wire a7ddrphy_dfi_p2_rddata_valid;
reg [12:0] a7ddrphy_dfi_p3_address = 13'd0;
reg [2:0] a7ddrphy_dfi_p3_bank = 3'd0;
reg a7ddrphy_dfi_p3_cas_n = 1'd1;
reg a7ddrphy_dfi_p3_cs_n = 1'd1;
reg a7ddrphy_dfi_p3_ras_n = 1'd1;
reg a7ddrphy_dfi_p3_we_n = 1'd1;
reg a7ddrphy_dfi_p3_cke = 1'd0;
reg a7ddrphy_dfi_p3_odt = 1'd0;
reg a7ddrphy_dfi_p3_reset_n = 1'd0;
reg [31:0] a7ddrphy_dfi_p3_wrdata = 32'd0;
reg [3:0] a7ddrphy_dfi_p3_wrdata_mask = 4'd0;
reg [31:0] a7ddrphy_dfi_p3_rddata = 32'd0;
wire a7ddrphy_dfi_p3_rddata_valid;
wire a7ddrphy_sd_clk_se_nodelay;
reg a7ddrphy_dqs_oe = 1'd0;
wire a7ddrphy_dqs_preamble;
wire a7ddrphy_dqs_postamble;
wire a7ddrphy_dqs_oe_delay_tappeddelayline;
reg a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline = 1'd0;
reg a7ddrphy_dqspattern0 = 1'd0;
reg a7ddrphy_dqspattern1 = 1'd0;
reg [7:0] a7ddrphy_dqspattern_o0 = 8'd0;
reg [7:0] a7ddrphy_dqspattern_o1 = 8'd0;
wire a7ddrphy_dqs_o_no_delay0;
wire a7ddrphy_dqs_t0;
reg [7:0] a7ddrphy_bitslip00 = 8'd0;
reg [2:0] a7ddrphy_bitslip0_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip0_r0 = 16'd0;
wire a7ddrphy0;
wire a7ddrphy_dqs_o_no_delay1;
wire a7ddrphy_dqs_t1;
reg [7:0] a7ddrphy_bitslip10 = 8'd0;
reg [2:0] a7ddrphy_bitslip1_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip1_r0 = 16'd0;
wire a7ddrphy1;
reg [7:0] a7ddrphy_bitslip01 = 8'd0;
reg [2:0] a7ddrphy_bitslip0_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip0_r1 = 16'd0;
reg [7:0] a7ddrphy_bitslip11 = 8'd0;
reg [2:0] a7ddrphy_bitslip1_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip1_r1 = 16'd0;
wire a7ddrphy_dq_oe;
wire a7ddrphy_dq_oe_delay_tappeddelayline;
reg a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline = 1'd0;
wire a7ddrphy_dq_o_nodelay0;
wire a7ddrphy_dq_i_nodelay0;
wire a7ddrphy_dq_i_delayed0;
wire a7ddrphy_dq_t0;
reg [7:0] a7ddrphy_bitslip02 = 8'd0;
reg [2:0] a7ddrphy_bitslip0_value2 = 3'd7;
reg [15:0] a7ddrphy_bitslip0_r2 = 16'd0;
wire [7:0] a7ddrphy_bitslip03;
reg [7:0] a7ddrphy_bitslip04 = 8'd0;
reg [2:0] a7ddrphy_bitslip0_value3 = 3'd7;
reg [15:0] a7ddrphy_bitslip0_r3 = 16'd0;
wire a7ddrphy_dq_o_nodelay1;
wire a7ddrphy_dq_i_nodelay1;
wire a7ddrphy_dq_i_delayed1;
wire a7ddrphy_dq_t1;
reg [7:0] a7ddrphy_bitslip12 = 8'd0;
reg [2:0] a7ddrphy_bitslip1_value2 = 3'd7;
reg [15:0] a7ddrphy_bitslip1_r2 = 16'd0;
wire [7:0] a7ddrphy_bitslip13;
reg [7:0] a7ddrphy_bitslip14 = 8'd0;
reg [2:0] a7ddrphy_bitslip1_value3 = 3'd7;
reg [15:0] a7ddrphy_bitslip1_r3 = 16'd0;
wire a7ddrphy_dq_o_nodelay2;
wire a7ddrphy_dq_i_nodelay2;
wire a7ddrphy_dq_i_delayed2;
wire a7ddrphy_dq_t2;
reg [7:0] a7ddrphy_bitslip20 = 8'd0;
reg [2:0] a7ddrphy_bitslip2_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip2_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip21;
reg [7:0] a7ddrphy_bitslip22 = 8'd0;
reg [2:0] a7ddrphy_bitslip2_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip2_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay3;
wire a7ddrphy_dq_i_nodelay3;
wire a7ddrphy_dq_i_delayed3;
wire a7ddrphy_dq_t3;
reg [7:0] a7ddrphy_bitslip30 = 8'd0;
reg [2:0] a7ddrphy_bitslip3_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip3_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip31;
reg [7:0] a7ddrphy_bitslip32 = 8'd0;
reg [2:0] a7ddrphy_bitslip3_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip3_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay4;
wire a7ddrphy_dq_i_nodelay4;
wire a7ddrphy_dq_i_delayed4;
wire a7ddrphy_dq_t4;
reg [7:0] a7ddrphy_bitslip40 = 8'd0;
reg [2:0] a7ddrphy_bitslip4_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip4_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip41;
reg [7:0] a7ddrphy_bitslip42 = 8'd0;
reg [2:0] a7ddrphy_bitslip4_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip4_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay5;
wire a7ddrphy_dq_i_nodelay5;
wire a7ddrphy_dq_i_delayed5;
wire a7ddrphy_dq_t5;
reg [7:0] a7ddrphy_bitslip50 = 8'd0;
reg [2:0] a7ddrphy_bitslip5_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip5_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip51;
reg [7:0] a7ddrphy_bitslip52 = 8'd0;
reg [2:0] a7ddrphy_bitslip5_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip5_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay6;
wire a7ddrphy_dq_i_nodelay6;
wire a7ddrphy_dq_i_delayed6;
wire a7ddrphy_dq_t6;
reg [7:0] a7ddrphy_bitslip60 = 8'd0;
reg [2:0] a7ddrphy_bitslip6_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip6_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip61;
reg [7:0] a7ddrphy_bitslip62 = 8'd0;
reg [2:0] a7ddrphy_bitslip6_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip6_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay7;
wire a7ddrphy_dq_i_nodelay7;
wire a7ddrphy_dq_i_delayed7;
wire a7ddrphy_dq_t7;
reg [7:0] a7ddrphy_bitslip70 = 8'd0;
reg [2:0] a7ddrphy_bitslip7_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip7_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip71;
reg [7:0] a7ddrphy_bitslip72 = 8'd0;
reg [2:0] a7ddrphy_bitslip7_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip7_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay8;
wire a7ddrphy_dq_i_nodelay8;
wire a7ddrphy_dq_i_delayed8;
wire a7ddrphy_dq_t8;
reg [7:0] a7ddrphy_bitslip80 = 8'd0;
reg [2:0] a7ddrphy_bitslip8_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip8_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip81;
reg [7:0] a7ddrphy_bitslip82 = 8'd0;
reg [2:0] a7ddrphy_bitslip8_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip8_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay9;
wire a7ddrphy_dq_i_nodelay9;
wire a7ddrphy_dq_i_delayed9;
wire a7ddrphy_dq_t9;
reg [7:0] a7ddrphy_bitslip90 = 8'd0;
reg [2:0] a7ddrphy_bitslip9_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip9_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip91;
reg [7:0] a7ddrphy_bitslip92 = 8'd0;
reg [2:0] a7ddrphy_bitslip9_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip9_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay10;
wire a7ddrphy_dq_i_nodelay10;
wire a7ddrphy_dq_i_delayed10;
wire a7ddrphy_dq_t10;
reg [7:0] a7ddrphy_bitslip100 = 8'd0;
reg [2:0] a7ddrphy_bitslip10_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip10_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip101;
reg [7:0] a7ddrphy_bitslip102 = 8'd0;
reg [2:0] a7ddrphy_bitslip10_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip10_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay11;
wire a7ddrphy_dq_i_nodelay11;
wire a7ddrphy_dq_i_delayed11;
wire a7ddrphy_dq_t11;
reg [7:0] a7ddrphy_bitslip110 = 8'd0;
reg [2:0] a7ddrphy_bitslip11_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip11_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip111;
reg [7:0] a7ddrphy_bitslip112 = 8'd0;
reg [2:0] a7ddrphy_bitslip11_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip11_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay12;
wire a7ddrphy_dq_i_nodelay12;
wire a7ddrphy_dq_i_delayed12;
wire a7ddrphy_dq_t12;
reg [7:0] a7ddrphy_bitslip120 = 8'd0;
reg [2:0] a7ddrphy_bitslip12_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip12_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip121;
reg [7:0] a7ddrphy_bitslip122 = 8'd0;
reg [2:0] a7ddrphy_bitslip12_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip12_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay13;
wire a7ddrphy_dq_i_nodelay13;
wire a7ddrphy_dq_i_delayed13;
wire a7ddrphy_dq_t13;
reg [7:0] a7ddrphy_bitslip130 = 8'd0;
reg [2:0] a7ddrphy_bitslip13_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip13_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip131;
reg [7:0] a7ddrphy_bitslip132 = 8'd0;
reg [2:0] a7ddrphy_bitslip13_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip13_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay14;
wire a7ddrphy_dq_i_nodelay14;
wire a7ddrphy_dq_i_delayed14;
wire a7ddrphy_dq_t14;
reg [7:0] a7ddrphy_bitslip140 = 8'd0;
reg [2:0] a7ddrphy_bitslip14_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip14_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip141;
reg [7:0] a7ddrphy_bitslip142 = 8'd0;
reg [2:0] a7ddrphy_bitslip14_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip14_r1 = 16'd0;
wire a7ddrphy_dq_o_nodelay15;
wire a7ddrphy_dq_i_nodelay15;
wire a7ddrphy_dq_i_delayed15;
wire a7ddrphy_dq_t15;
reg [7:0] a7ddrphy_bitslip150 = 8'd0;
reg [2:0] a7ddrphy_bitslip15_value0 = 3'd7;
reg [15:0] a7ddrphy_bitslip15_r0 = 16'd0;
wire [7:0] a7ddrphy_bitslip151;
reg [7:0] a7ddrphy_bitslip152 = 8'd0;
reg [2:0] a7ddrphy_bitslip15_value1 = 3'd7;
reg [15:0] a7ddrphy_bitslip15_r1 = 16'd0;
reg a7ddrphy_rddata_en_tappeddelayline0 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline1 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline2 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline3 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline4 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline5 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline6 = 1'd0;
reg a7ddrphy_rddata_en_tappeddelayline7 = 1'd0;
reg a7ddrphy_wrdata_en_tappeddelayline0 = 1'd0;
reg a7ddrphy_wrdata_en_tappeddelayline1 = 1'd0;
wire [12:0] sdram_inti_p0_address;
wire [2:0] sdram_inti_p0_bank;
reg sdram_inti_p0_cas_n = 1'd1;
reg sdram_inti_p0_cs_n = 1'd1;
reg sdram_inti_p0_ras_n = 1'd1;
reg sdram_inti_p0_we_n = 1'd1;
wire sdram_inti_p0_cke;
wire sdram_inti_p0_odt;
wire sdram_inti_p0_reset_n;
reg sdram_inti_p0_act_n = 1'd1;
wire [31:0] sdram_inti_p0_wrdata;
wire sdram_inti_p0_wrdata_en;
wire [3:0] sdram_inti_p0_wrdata_mask;
wire sdram_inti_p0_rddata_en;
reg [31:0] sdram_inti_p0_rddata = 32'd0;
reg sdram_inti_p0_rddata_valid = 1'd0;
wire [12:0] sdram_inti_p1_address;
wire [2:0] sdram_inti_p1_bank;
reg sdram_inti_p1_cas_n = 1'd1;
reg sdram_inti_p1_cs_n = 1'd1;
reg sdram_inti_p1_ras_n = 1'd1;
reg sdram_inti_p1_we_n = 1'd1;
wire sdram_inti_p1_cke;
wire sdram_inti_p1_odt;
wire sdram_inti_p1_reset_n;
reg sdram_inti_p1_act_n = 1'd1;
wire [31:0] sdram_inti_p1_wrdata;
wire sdram_inti_p1_wrdata_en;
wire [3:0] sdram_inti_p1_wrdata_mask;
wire sdram_inti_p1_rddata_en;
reg [31:0] sdram_inti_p1_rddata = 32'd0;
reg sdram_inti_p1_rddata_valid = 1'd0;
wire [12:0] sdram_slave_p0_address;
wire [2:0] sdram_slave_p0_bank;
wire sdram_slave_p0_cas_n;
wire sdram_slave_p0_cs_n;
wire sdram_slave_p0_ras_n;
wire sdram_slave_p0_we_n;
wire sdram_slave_p0_cke;
wire sdram_slave_p0_odt;
wire sdram_slave_p0_reset_n;
wire sdram_slave_p0_act_n;
wire [31:0] sdram_slave_p0_wrdata;
wire sdram_slave_p0_wrdata_en;
wire [3:0] sdram_slave_p0_wrdata_mask;
wire sdram_slave_p0_rddata_en;
reg [31:0] sdram_slave_p0_rddata = 32'd0;
reg sdram_slave_p0_rddata_valid = 1'd0;
wire [12:0] sdram_slave_p1_address;
wire [2:0] sdram_slave_p1_bank;
wire sdram_slave_p1_cas_n;
wire sdram_slave_p1_cs_n;
wire sdram_slave_p1_ras_n;
wire sdram_slave_p1_we_n;
wire sdram_slave_p1_cke;
wire sdram_slave_p1_odt;
wire sdram_slave_p1_reset_n;
wire sdram_slave_p1_act_n;
wire [31:0] sdram_slave_p1_wrdata;
wire sdram_slave_p1_wrdata_en;
wire [3:0] sdram_slave_p1_wrdata_mask;
wire sdram_slave_p1_rddata_en;
reg [31:0] sdram_slave_p1_rddata = 32'd0;
reg sdram_slave_p1_rddata_valid = 1'd0;
reg [12:0] sdram_master_p0_address = 13'd0;
reg [2:0] sdram_master_p0_bank = 3'd0;
reg sdram_master_p0_cas_n = 1'd1;
reg sdram_master_p0_cs_n = 1'd1;
reg sdram_master_p0_ras_n = 1'd1;
reg sdram_master_p0_we_n = 1'd1;
reg sdram_master_p0_cke = 1'd0;
reg sdram_master_p0_odt = 1'd0;
reg sdram_master_p0_reset_n = 1'd0;
reg sdram_master_p0_act_n = 1'd1;
reg [31:0] sdram_master_p0_wrdata = 32'd0;
reg sdram_master_p0_wrdata_en = 1'd0;
reg [3:0] sdram_master_p0_wrdata_mask = 4'd0;
reg sdram_master_p0_rddata_en = 1'd0;
wire [31:0] sdram_master_p0_rddata;
wire sdram_master_p0_rddata_valid;
reg [12:0] sdram_master_p1_address = 13'd0;
reg [2:0] sdram_master_p1_bank = 3'd0;
reg sdram_master_p1_cas_n = 1'd1;
reg sdram_master_p1_cs_n = 1'd1;
reg sdram_master_p1_ras_n = 1'd1;
reg sdram_master_p1_we_n = 1'd1;
reg sdram_master_p1_cke = 1'd0;
reg sdram_master_p1_odt = 1'd0;
reg sdram_master_p1_reset_n = 1'd0;
reg sdram_master_p1_act_n = 1'd1;
reg [31:0] sdram_master_p1_wrdata = 32'd0;
reg sdram_master_p1_wrdata_en = 1'd0;
reg [3:0] sdram_master_p1_wrdata_mask = 4'd0;
reg sdram_master_p1_rddata_en = 1'd0;
wire [31:0] sdram_master_p1_rddata;
wire sdram_master_p1_rddata_valid;
wire sdram_sel;
wire sdram_cke;
wire sdram_odt;
wire sdram_reset_n;
reg [3:0] sdram_storage = 4'd1;
reg sdram_re = 1'd0;
reg [5:0] sdram_phaseinjector0_command_storage = 6'd0;
reg sdram_phaseinjector0_command_re = 1'd0;
wire sdram_phaseinjector0_command_issue_re;
wire sdram_phaseinjector0_command_issue_r;
wire sdram_phaseinjector0_command_issue_we;
reg sdram_phaseinjector0_command_issue_w = 1'd0;
reg [12:0] sdram_phaseinjector0_address_storage = 13'd0;
reg sdram_phaseinjector0_address_re = 1'd0;
reg [2:0] sdram_phaseinjector0_baddress_storage = 3'd0;
reg sdram_phaseinjector0_baddress_re = 1'd0;
reg [31:0] sdram_phaseinjector0_wrdata_storage = 32'd0;
reg sdram_phaseinjector0_wrdata_re = 1'd0;
reg [31:0] sdram_phaseinjector0_rddata_status = 32'd0;
wire sdram_phaseinjector0_rddata_we;
reg sdram_phaseinjector0_rddata_re = 1'd0;
reg [5:0] sdram_phaseinjector1_command_storage = 6'd0;
reg sdram_phaseinjector1_command_re = 1'd0;
wire sdram_phaseinjector1_command_issue_re;
wire sdram_phaseinjector1_command_issue_r;
wire sdram_phaseinjector1_command_issue_we;
reg sdram_phaseinjector1_command_issue_w = 1'd0;
reg [12:0] sdram_phaseinjector1_address_storage = 13'd0;
reg sdram_phaseinjector1_address_re = 1'd0;
reg [2:0] sdram_phaseinjector1_baddress_storage = 3'd0;
reg sdram_phaseinjector1_baddress_re = 1'd0;
reg [31:0] sdram_phaseinjector1_wrdata_storage = 32'd0;
reg sdram_phaseinjector1_wrdata_re = 1'd0;
reg [31:0] sdram_phaseinjector1_rddata_status = 32'd0;
wire sdram_phaseinjector1_rddata_we;
reg sdram_phaseinjector1_rddata_re = 1'd0;
wire sdram_interface_bank0_valid;
wire sdram_interface_bank0_ready;
wire sdram_interface_bank0_we;
wire [20:0] sdram_interface_bank0_addr;
wire sdram_interface_bank0_lock;
wire sdram_interface_bank0_wdata_ready;
wire sdram_interface_bank0_rdata_valid;
wire sdram_interface_bank1_valid;
wire sdram_interface_bank1_ready;
wire sdram_interface_bank1_we;
wire [20:0] sdram_interface_bank1_addr;
wire sdram_interface_bank1_lock;
wire sdram_interface_bank1_wdata_ready;
wire sdram_interface_bank1_rdata_valid;
wire sdram_interface_bank2_valid;
wire sdram_interface_bank2_ready;
wire sdram_interface_bank2_we;
wire [20:0] sdram_interface_bank2_addr;
wire sdram_interface_bank2_lock;
wire sdram_interface_bank2_wdata_ready;
wire sdram_interface_bank2_rdata_valid;
wire sdram_interface_bank3_valid;
wire sdram_interface_bank3_ready;
wire sdram_interface_bank3_we;
wire [20:0] sdram_interface_bank3_addr;
wire sdram_interface_bank3_lock;
wire sdram_interface_bank3_wdata_ready;
wire sdram_interface_bank3_rdata_valid;
wire sdram_interface_bank4_valid;
wire sdram_interface_bank4_ready;
wire sdram_interface_bank4_we;
wire [20:0] sdram_interface_bank4_addr;
wire sdram_interface_bank4_lock;
wire sdram_interface_bank4_wdata_ready;
wire sdram_interface_bank4_rdata_valid;
wire sdram_interface_bank5_valid;
wire sdram_interface_bank5_ready;
wire sdram_interface_bank5_we;
wire [20:0] sdram_interface_bank5_addr;
wire sdram_interface_bank5_lock;
wire sdram_interface_bank5_wdata_ready;
wire sdram_interface_bank5_rdata_valid;
wire sdram_interface_bank6_valid;
wire sdram_interface_bank6_ready;
wire sdram_interface_bank6_we;
wire [20:0] sdram_interface_bank6_addr;
wire sdram_interface_bank6_lock;
wire sdram_interface_bank6_wdata_ready;
wire sdram_interface_bank6_rdata_valid;
wire sdram_interface_bank7_valid;
wire sdram_interface_bank7_ready;
wire sdram_interface_bank7_we;
wire [20:0] sdram_interface_bank7_addr;
wire sdram_interface_bank7_lock;
wire sdram_interface_bank7_wdata_ready;
wire sdram_interface_bank7_rdata_valid;
reg [63:0] sdram_interface_wdata = 64'd0;
reg [7:0] sdram_interface_wdata_we = 8'd0;
wire [63:0] sdram_interface_rdata;
reg [12:0] sdram_dfi_p0_address = 13'd0;
reg [2:0] sdram_dfi_p0_bank = 3'd0;
reg sdram_dfi_p0_cas_n = 1'd1;
reg sdram_dfi_p0_cs_n = 1'd1;
reg sdram_dfi_p0_ras_n = 1'd1;
reg sdram_dfi_p0_we_n = 1'd1;
wire sdram_dfi_p0_cke;
wire sdram_dfi_p0_odt;
wire sdram_dfi_p0_reset_n;
reg sdram_dfi_p0_act_n = 1'd1;
wire [31:0] sdram_dfi_p0_wrdata;
reg sdram_dfi_p0_wrdata_en = 1'd0;
wire [3:0] sdram_dfi_p0_wrdata_mask;
reg sdram_dfi_p0_rddata_en = 1'd0;
wire [31:0] sdram_dfi_p0_rddata;
wire sdram_dfi_p0_rddata_valid;
reg [12:0] sdram_dfi_p1_address = 13'd0;
reg [2:0] sdram_dfi_p1_bank = 3'd0;
reg sdram_dfi_p1_cas_n = 1'd1;
reg sdram_dfi_p1_cs_n = 1'd1;
reg sdram_dfi_p1_ras_n = 1'd1;
reg sdram_dfi_p1_we_n = 1'd1;
wire sdram_dfi_p1_cke;
wire sdram_dfi_p1_odt;
wire sdram_dfi_p1_reset_n;
reg sdram_dfi_p1_act_n = 1'd1;
wire [31:0] sdram_dfi_p1_wrdata;
reg sdram_dfi_p1_wrdata_en = 1'd0;
wire [3:0] sdram_dfi_p1_wrdata_mask;
reg sdram_dfi_p1_rddata_en = 1'd0;
wire [31:0] sdram_dfi_p1_rddata;
wire sdram_dfi_p1_rddata_valid;
reg sdram_cmd_valid = 1'd0;
reg sdram_cmd_ready = 1'd0;
reg sdram_cmd_last = 1'd0;
reg [12:0] sdram_cmd_payload_a = 13'd0;
reg [2:0] sdram_cmd_payload_ba = 3'd0;
reg sdram_cmd_payload_cas = 1'd0;
reg sdram_cmd_payload_ras = 1'd0;
reg sdram_cmd_payload_we = 1'd0;
reg sdram_cmd_payload_is_read = 1'd0;
reg sdram_cmd_payload_is_write = 1'd0;
wire sdram_wants_refresh;
wire sdram_timer_wait;
wire sdram_timer_done0;
wire [9:0] sdram_timer_count0;
wire sdram_timer_done1;
reg [9:0] sdram_timer_count1 = 10'd781;
wire sdram_postponer_req_i;
reg sdram_postponer_req_o = 1'd0;
reg sdram_postponer_count = 1'd0;
reg sdram_sequencer_start0 = 1'd0;
wire sdram_sequencer_done0;
wire sdram_sequencer_start1;
reg sdram_sequencer_done1 = 1'd0;
reg [4:0] sdram_sequencer_counter = 5'd0;
reg sdram_sequencer_count = 1'd0;
wire sdram_bankmachine0_req_valid;
wire sdram_bankmachine0_req_ready;
wire sdram_bankmachine0_req_we;
wire [20:0] sdram_bankmachine0_req_addr;
wire sdram_bankmachine0_req_lock;
reg sdram_bankmachine0_req_wdata_ready = 1'd0;
reg sdram_bankmachine0_req_rdata_valid = 1'd0;
wire sdram_bankmachine0_refresh_req;
reg sdram_bankmachine0_refresh_gnt = 1'd0;
reg sdram_bankmachine0_cmd_valid = 1'd0;
reg sdram_bankmachine0_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine0_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine0_cmd_payload_ba;
reg sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg sdram_bankmachine0_cmd_payload_we = 1'd0;
reg sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine0_auto_precharge = 1'd0;
wire sdram_bankmachine0_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine0_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine0_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine0_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine0_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine0_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine0_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine0_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine0_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we;
wire sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable;
wire sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_re;
wire sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable;
wire [23:0] sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_din;
wire [23:0] sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
reg [4:0] sdram_bankmachine0_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine0_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine0_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine0_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine0_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine0_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine0_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine0_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine0_cmd_buffer_sink_valid;
wire sdram_bankmachine0_cmd_buffer_sink_ready;
wire sdram_bankmachine0_cmd_buffer_sink_first;
wire sdram_bankmachine0_cmd_buffer_sink_last;
wire sdram_bankmachine0_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine0_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine0_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine0_cmd_buffer_source_ready;
reg sdram_bankmachine0_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine0_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine0_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine0_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine0_row = 13'd0;
reg sdram_bankmachine0_row_opened = 1'd0;
wire sdram_bankmachine0_row_hit;
reg sdram_bankmachine0_row_open = 1'd0;
reg sdram_bankmachine0_row_close = 1'd0;
reg sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine0_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine0_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine0_twtpcon_count = 2'd0;
wire sdram_bankmachine0_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine0_trccon_ready = 1'd1;
wire sdram_bankmachine0_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine0_trascon_ready = 1'd1;
wire sdram_bankmachine1_req_valid;
wire sdram_bankmachine1_req_ready;
wire sdram_bankmachine1_req_we;
wire [20:0] sdram_bankmachine1_req_addr;
wire sdram_bankmachine1_req_lock;
reg sdram_bankmachine1_req_wdata_ready = 1'd0;
reg sdram_bankmachine1_req_rdata_valid = 1'd0;
wire sdram_bankmachine1_refresh_req;
reg sdram_bankmachine1_refresh_gnt = 1'd0;
reg sdram_bankmachine1_cmd_valid = 1'd0;
reg sdram_bankmachine1_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine1_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine1_cmd_payload_ba;
reg sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg sdram_bankmachine1_cmd_payload_we = 1'd0;
reg sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine1_auto_precharge = 1'd0;
wire sdram_bankmachine1_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine1_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine1_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine1_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine1_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine1_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine1_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine1_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine1_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we;
wire sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable;
wire sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_re;
wire sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable;
wire [23:0] sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_din;
wire [23:0] sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
reg [4:0] sdram_bankmachine1_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine1_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine1_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine1_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine1_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine1_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine1_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine1_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine1_cmd_buffer_sink_valid;
wire sdram_bankmachine1_cmd_buffer_sink_ready;
wire sdram_bankmachine1_cmd_buffer_sink_first;
wire sdram_bankmachine1_cmd_buffer_sink_last;
wire sdram_bankmachine1_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine1_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine1_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine1_cmd_buffer_source_ready;
reg sdram_bankmachine1_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine1_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine1_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine1_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine1_row = 13'd0;
reg sdram_bankmachine1_row_opened = 1'd0;
wire sdram_bankmachine1_row_hit;
reg sdram_bankmachine1_row_open = 1'd0;
reg sdram_bankmachine1_row_close = 1'd0;
reg sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine1_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine1_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine1_twtpcon_count = 2'd0;
wire sdram_bankmachine1_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine1_trccon_ready = 1'd1;
wire sdram_bankmachine1_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine1_trascon_ready = 1'd1;
wire sdram_bankmachine2_req_valid;
wire sdram_bankmachine2_req_ready;
wire sdram_bankmachine2_req_we;
wire [20:0] sdram_bankmachine2_req_addr;
wire sdram_bankmachine2_req_lock;
reg sdram_bankmachine2_req_wdata_ready = 1'd0;
reg sdram_bankmachine2_req_rdata_valid = 1'd0;
wire sdram_bankmachine2_refresh_req;
reg sdram_bankmachine2_refresh_gnt = 1'd0;
reg sdram_bankmachine2_cmd_valid = 1'd0;
reg sdram_bankmachine2_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine2_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine2_cmd_payload_ba;
reg sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg sdram_bankmachine2_cmd_payload_we = 1'd0;
reg sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine2_auto_precharge = 1'd0;
wire sdram_bankmachine2_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine2_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine2_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine2_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine2_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine2_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine2_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine2_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine2_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we;
wire sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable;
wire sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_re;
wire sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable;
wire [23:0] sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_din;
wire [23:0] sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
reg [4:0] sdram_bankmachine2_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine2_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine2_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine2_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine2_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine2_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine2_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine2_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine2_cmd_buffer_sink_valid;
wire sdram_bankmachine2_cmd_buffer_sink_ready;
wire sdram_bankmachine2_cmd_buffer_sink_first;
wire sdram_bankmachine2_cmd_buffer_sink_last;
wire sdram_bankmachine2_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine2_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine2_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine2_cmd_buffer_source_ready;
reg sdram_bankmachine2_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine2_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine2_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine2_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine2_row = 13'd0;
reg sdram_bankmachine2_row_opened = 1'd0;
wire sdram_bankmachine2_row_hit;
reg sdram_bankmachine2_row_open = 1'd0;
reg sdram_bankmachine2_row_close = 1'd0;
reg sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine2_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine2_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine2_twtpcon_count = 2'd0;
wire sdram_bankmachine2_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine2_trccon_ready = 1'd1;
wire sdram_bankmachine2_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine2_trascon_ready = 1'd1;
wire sdram_bankmachine3_req_valid;
wire sdram_bankmachine3_req_ready;
wire sdram_bankmachine3_req_we;
wire [20:0] sdram_bankmachine3_req_addr;
wire sdram_bankmachine3_req_lock;
reg sdram_bankmachine3_req_wdata_ready = 1'd0;
reg sdram_bankmachine3_req_rdata_valid = 1'd0;
wire sdram_bankmachine3_refresh_req;
reg sdram_bankmachine3_refresh_gnt = 1'd0;
reg sdram_bankmachine3_cmd_valid = 1'd0;
reg sdram_bankmachine3_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine3_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine3_cmd_payload_ba;
reg sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg sdram_bankmachine3_cmd_payload_we = 1'd0;
reg sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine3_auto_precharge = 1'd0;
wire sdram_bankmachine3_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine3_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine3_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine3_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine3_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine3_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine3_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine3_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine3_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we;
wire sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable;
wire sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_re;
wire sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable;
wire [23:0] sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_din;
wire [23:0] sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
reg [4:0] sdram_bankmachine3_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine3_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine3_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine3_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine3_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine3_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine3_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine3_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine3_cmd_buffer_sink_valid;
wire sdram_bankmachine3_cmd_buffer_sink_ready;
wire sdram_bankmachine3_cmd_buffer_sink_first;
wire sdram_bankmachine3_cmd_buffer_sink_last;
wire sdram_bankmachine3_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine3_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine3_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine3_cmd_buffer_source_ready;
reg sdram_bankmachine3_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine3_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine3_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine3_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine3_row = 13'd0;
reg sdram_bankmachine3_row_opened = 1'd0;
wire sdram_bankmachine3_row_hit;
reg sdram_bankmachine3_row_open = 1'd0;
reg sdram_bankmachine3_row_close = 1'd0;
reg sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine3_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine3_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine3_twtpcon_count = 2'd0;
wire sdram_bankmachine3_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine3_trccon_ready = 1'd1;
wire sdram_bankmachine3_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine3_trascon_ready = 1'd1;
wire sdram_bankmachine4_req_valid;
wire sdram_bankmachine4_req_ready;
wire sdram_bankmachine4_req_we;
wire [20:0] sdram_bankmachine4_req_addr;
wire sdram_bankmachine4_req_lock;
reg sdram_bankmachine4_req_wdata_ready = 1'd0;
reg sdram_bankmachine4_req_rdata_valid = 1'd0;
wire sdram_bankmachine4_refresh_req;
reg sdram_bankmachine4_refresh_gnt = 1'd0;
reg sdram_bankmachine4_cmd_valid = 1'd0;
reg sdram_bankmachine4_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine4_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine4_cmd_payload_ba;
reg sdram_bankmachine4_cmd_payload_cas = 1'd0;
reg sdram_bankmachine4_cmd_payload_ras = 1'd0;
reg sdram_bankmachine4_cmd_payload_we = 1'd0;
reg sdram_bankmachine4_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine4_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine4_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine4_auto_precharge = 1'd0;
wire sdram_bankmachine4_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine4_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine4_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine4_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine4_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine4_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine4_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine4_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine4_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine4_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine4_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine4_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_we;
wire sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_writable;
wire sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_re;
wire sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_readable;
wire [23:0] sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_din;
wire [23:0] sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_dout;
reg [4:0] sdram_bankmachine4_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine4_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine4_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine4_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine4_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine4_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine4_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine4_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine4_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine4_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine4_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine4_cmd_buffer_sink_valid;
wire sdram_bankmachine4_cmd_buffer_sink_ready;
wire sdram_bankmachine4_cmd_buffer_sink_first;
wire sdram_bankmachine4_cmd_buffer_sink_last;
wire sdram_bankmachine4_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine4_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine4_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine4_cmd_buffer_source_ready;
reg sdram_bankmachine4_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine4_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine4_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine4_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine4_row = 13'd0;
reg sdram_bankmachine4_row_opened = 1'd0;
wire sdram_bankmachine4_row_hit;
reg sdram_bankmachine4_row_open = 1'd0;
reg sdram_bankmachine4_row_close = 1'd0;
reg sdram_bankmachine4_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine4_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine4_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine4_twtpcon_count = 2'd0;
wire sdram_bankmachine4_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine4_trccon_ready = 1'd1;
wire sdram_bankmachine4_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine4_trascon_ready = 1'd1;
wire sdram_bankmachine5_req_valid;
wire sdram_bankmachine5_req_ready;
wire sdram_bankmachine5_req_we;
wire [20:0] sdram_bankmachine5_req_addr;
wire sdram_bankmachine5_req_lock;
reg sdram_bankmachine5_req_wdata_ready = 1'd0;
reg sdram_bankmachine5_req_rdata_valid = 1'd0;
wire sdram_bankmachine5_refresh_req;
reg sdram_bankmachine5_refresh_gnt = 1'd0;
reg sdram_bankmachine5_cmd_valid = 1'd0;
reg sdram_bankmachine5_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine5_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine5_cmd_payload_ba;
reg sdram_bankmachine5_cmd_payload_cas = 1'd0;
reg sdram_bankmachine5_cmd_payload_ras = 1'd0;
reg sdram_bankmachine5_cmd_payload_we = 1'd0;
reg sdram_bankmachine5_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine5_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine5_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine5_auto_precharge = 1'd0;
wire sdram_bankmachine5_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine5_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine5_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine5_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine5_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine5_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine5_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine5_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine5_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine5_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine5_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine5_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_we;
wire sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_writable;
wire sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_re;
wire sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_readable;
wire [23:0] sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_din;
wire [23:0] sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_dout;
reg [4:0] sdram_bankmachine5_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine5_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine5_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine5_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine5_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine5_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine5_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine5_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine5_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine5_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine5_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine5_cmd_buffer_sink_valid;
wire sdram_bankmachine5_cmd_buffer_sink_ready;
wire sdram_bankmachine5_cmd_buffer_sink_first;
wire sdram_bankmachine5_cmd_buffer_sink_last;
wire sdram_bankmachine5_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine5_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine5_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine5_cmd_buffer_source_ready;
reg sdram_bankmachine5_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine5_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine5_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine5_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine5_row = 13'd0;
reg sdram_bankmachine5_row_opened = 1'd0;
wire sdram_bankmachine5_row_hit;
reg sdram_bankmachine5_row_open = 1'd0;
reg sdram_bankmachine5_row_close = 1'd0;
reg sdram_bankmachine5_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine5_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine5_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine5_twtpcon_count = 2'd0;
wire sdram_bankmachine5_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine5_trccon_ready = 1'd1;
wire sdram_bankmachine5_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine5_trascon_ready = 1'd1;
wire sdram_bankmachine6_req_valid;
wire sdram_bankmachine6_req_ready;
wire sdram_bankmachine6_req_we;
wire [20:0] sdram_bankmachine6_req_addr;
wire sdram_bankmachine6_req_lock;
reg sdram_bankmachine6_req_wdata_ready = 1'd0;
reg sdram_bankmachine6_req_rdata_valid = 1'd0;
wire sdram_bankmachine6_refresh_req;
reg sdram_bankmachine6_refresh_gnt = 1'd0;
reg sdram_bankmachine6_cmd_valid = 1'd0;
reg sdram_bankmachine6_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine6_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine6_cmd_payload_ba;
reg sdram_bankmachine6_cmd_payload_cas = 1'd0;
reg sdram_bankmachine6_cmd_payload_ras = 1'd0;
reg sdram_bankmachine6_cmd_payload_we = 1'd0;
reg sdram_bankmachine6_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine6_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine6_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine6_auto_precharge = 1'd0;
wire sdram_bankmachine6_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine6_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine6_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine6_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine6_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine6_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine6_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine6_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine6_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine6_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine6_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine6_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_we;
wire sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_writable;
wire sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_re;
wire sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_readable;
wire [23:0] sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_din;
wire [23:0] sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_dout;
reg [4:0] sdram_bankmachine6_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine6_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine6_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine6_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine6_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine6_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine6_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine6_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine6_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine6_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine6_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine6_cmd_buffer_sink_valid;
wire sdram_bankmachine6_cmd_buffer_sink_ready;
wire sdram_bankmachine6_cmd_buffer_sink_first;
wire sdram_bankmachine6_cmd_buffer_sink_last;
wire sdram_bankmachine6_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine6_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine6_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine6_cmd_buffer_source_ready;
reg sdram_bankmachine6_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine6_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine6_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine6_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine6_row = 13'd0;
reg sdram_bankmachine6_row_opened = 1'd0;
wire sdram_bankmachine6_row_hit;
reg sdram_bankmachine6_row_open = 1'd0;
reg sdram_bankmachine6_row_close = 1'd0;
reg sdram_bankmachine6_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine6_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine6_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine6_twtpcon_count = 2'd0;
wire sdram_bankmachine6_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine6_trccon_ready = 1'd1;
wire sdram_bankmachine6_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine6_trascon_ready = 1'd1;
wire sdram_bankmachine7_req_valid;
wire sdram_bankmachine7_req_ready;
wire sdram_bankmachine7_req_we;
wire [20:0] sdram_bankmachine7_req_addr;
wire sdram_bankmachine7_req_lock;
reg sdram_bankmachine7_req_wdata_ready = 1'd0;
reg sdram_bankmachine7_req_rdata_valid = 1'd0;
wire sdram_bankmachine7_refresh_req;
reg sdram_bankmachine7_refresh_gnt = 1'd0;
reg sdram_bankmachine7_cmd_valid = 1'd0;
reg sdram_bankmachine7_cmd_ready = 1'd0;
reg [12:0] sdram_bankmachine7_cmd_payload_a = 13'd0;
wire [2:0] sdram_bankmachine7_cmd_payload_ba;
reg sdram_bankmachine7_cmd_payload_cas = 1'd0;
reg sdram_bankmachine7_cmd_payload_ras = 1'd0;
reg sdram_bankmachine7_cmd_payload_we = 1'd0;
reg sdram_bankmachine7_cmd_payload_is_cmd = 1'd0;
reg sdram_bankmachine7_cmd_payload_is_read = 1'd0;
reg sdram_bankmachine7_cmd_payload_is_write = 1'd0;
reg sdram_bankmachine7_auto_precharge = 1'd0;
wire sdram_bankmachine7_cmd_buffer_lookahead_sink_valid;
wire sdram_bankmachine7_cmd_buffer_lookahead_sink_ready;
reg sdram_bankmachine7_cmd_buffer_lookahead_sink_first = 1'd0;
reg sdram_bankmachine7_cmd_buffer_lookahead_sink_last = 1'd0;
wire sdram_bankmachine7_cmd_buffer_lookahead_sink_payload_we;
wire [20:0] sdram_bankmachine7_cmd_buffer_lookahead_sink_payload_addr;
wire sdram_bankmachine7_cmd_buffer_lookahead_source_valid;
wire sdram_bankmachine7_cmd_buffer_lookahead_source_ready;
wire sdram_bankmachine7_cmd_buffer_lookahead_source_first;
wire sdram_bankmachine7_cmd_buffer_lookahead_source_last;
wire sdram_bankmachine7_cmd_buffer_lookahead_source_payload_we;
wire [20:0] sdram_bankmachine7_cmd_buffer_lookahead_source_payload_addr;
wire sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_we;
wire sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_writable;
wire sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_re;
wire sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_readable;
wire [23:0] sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_din;
wire [23:0] sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_dout;
reg [4:0] sdram_bankmachine7_cmd_buffer_lookahead_level = 5'd0;
reg sdram_bankmachine7_cmd_buffer_lookahead_replace = 1'd0;
reg [3:0] sdram_bankmachine7_cmd_buffer_lookahead_produce = 4'd0;
reg [3:0] sdram_bankmachine7_cmd_buffer_lookahead_consume = 4'd0;
reg [3:0] sdram_bankmachine7_cmd_buffer_lookahead_wrport_adr = 4'd0;
wire [23:0] sdram_bankmachine7_cmd_buffer_lookahead_wrport_dat_r;
wire sdram_bankmachine7_cmd_buffer_lookahead_wrport_we;
wire [23:0] sdram_bankmachine7_cmd_buffer_lookahead_wrport_dat_w;
wire sdram_bankmachine7_cmd_buffer_lookahead_do_read;
wire [3:0] sdram_bankmachine7_cmd_buffer_lookahead_rdport_adr;
wire [23:0] sdram_bankmachine7_cmd_buffer_lookahead_rdport_dat_r;
wire sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_payload_we;
wire [20:0] sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_payload_addr;
wire sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_first;
wire sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_last;
wire sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_we;
wire [20:0] sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_addr;
wire sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_first;
wire sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_last;
wire sdram_bankmachine7_cmd_buffer_sink_valid;
wire sdram_bankmachine7_cmd_buffer_sink_ready;
wire sdram_bankmachine7_cmd_buffer_sink_first;
wire sdram_bankmachine7_cmd_buffer_sink_last;
wire sdram_bankmachine7_cmd_buffer_sink_payload_we;
wire [20:0] sdram_bankmachine7_cmd_buffer_sink_payload_addr;
reg sdram_bankmachine7_cmd_buffer_source_valid = 1'd0;
wire sdram_bankmachine7_cmd_buffer_source_ready;
reg sdram_bankmachine7_cmd_buffer_source_first = 1'd0;
reg sdram_bankmachine7_cmd_buffer_source_last = 1'd0;
reg sdram_bankmachine7_cmd_buffer_source_payload_we = 1'd0;
reg [20:0] sdram_bankmachine7_cmd_buffer_source_payload_addr = 21'd0;
reg [12:0] sdram_bankmachine7_row = 13'd0;
reg sdram_bankmachine7_row_opened = 1'd0;
wire sdram_bankmachine7_row_hit;
reg sdram_bankmachine7_row_open = 1'd0;
reg sdram_bankmachine7_row_close = 1'd0;
reg sdram_bankmachine7_row_col_n_addr_sel = 1'd0;
wire sdram_bankmachine7_twtpcon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine7_twtpcon_ready = 1'd0;
reg [1:0] sdram_bankmachine7_twtpcon_count = 2'd0;
wire sdram_bankmachine7_trccon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine7_trccon_ready = 1'd1;
wire sdram_bankmachine7_trascon_valid;
(* dont_touch = "true" *) reg sdram_bankmachine7_trascon_ready = 1'd1;
wire sdram_ras_allowed;
wire sdram_cas_allowed;
wire sdram_rdcmdphase;
wire sdram_wrcmdphase;
reg sdram_choose_cmd_want_reads = 1'd0;
reg sdram_choose_cmd_want_writes = 1'd0;
reg sdram_choose_cmd_want_cmds = 1'd0;
reg sdram_choose_cmd_want_activates = 1'd0;
wire sdram_choose_cmd_cmd_valid;
reg sdram_choose_cmd_cmd_ready = 1'd0;
wire [12:0] sdram_choose_cmd_cmd_payload_a;
wire [2:0] sdram_choose_cmd_cmd_payload_ba;
reg sdram_choose_cmd_cmd_payload_cas = 1'd0;
reg sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg sdram_choose_cmd_cmd_payload_we = 1'd0;
wire sdram_choose_cmd_cmd_payload_is_cmd;
wire sdram_choose_cmd_cmd_payload_is_read;
wire sdram_choose_cmd_cmd_payload_is_write;
reg [7:0] sdram_choose_cmd_valids = 8'd0;
wire [7:0] sdram_choose_cmd_request;
reg [2:0] sdram_choose_cmd_grant = 3'd0;
wire sdram_choose_cmd_ce;
reg sdram_choose_req_want_reads = 1'd0;
reg sdram_choose_req_want_writes = 1'd0;
reg sdram_choose_req_want_cmds = 1'd0;
reg sdram_choose_req_want_activates = 1'd0;
wire sdram_choose_req_cmd_valid;
reg sdram_choose_req_cmd_ready = 1'd0;
wire [12:0] sdram_choose_req_cmd_payload_a;
wire [2:0] sdram_choose_req_cmd_payload_ba;
reg sdram_choose_req_cmd_payload_cas = 1'd0;
reg sdram_choose_req_cmd_payload_ras = 1'd0;
reg sdram_choose_req_cmd_payload_we = 1'd0;
wire sdram_choose_req_cmd_payload_is_cmd;
wire sdram_choose_req_cmd_payload_is_read;
wire sdram_choose_req_cmd_payload_is_write;
reg [7:0] sdram_choose_req_valids = 8'd0;
wire [7:0] sdram_choose_req_request;
reg [2:0] sdram_choose_req_grant = 3'd0;
wire sdram_choose_req_ce;
reg [12:0] sdram_nop_a = 13'd0;
reg [2:0] sdram_nop_ba = 3'd0;
reg [1:0] sdram_steerer_sel0 = 2'd0;
reg [1:0] sdram_steerer_sel1 = 2'd0;
reg sdram_steerer0 = 1'd1;
reg sdram_steerer1 = 1'd1;
reg sdram_steerer2 = 1'd1;
reg sdram_steerer3 = 1'd1;
wire sdram_trrdcon_valid;
(* dont_touch = "true" *) reg sdram_trrdcon_ready = 1'd1;
wire sdram_tfawcon_valid;
(* dont_touch = "true" *) reg sdram_tfawcon_ready = 1'd1;
wire sdram_tccdcon_valid;
(* dont_touch = "true" *) reg sdram_tccdcon_ready = 1'd0;
reg sdram_tccdcon_count = 1'd0;
wire sdram_twtrcon_valid;
(* dont_touch = "true" *) reg sdram_twtrcon_ready = 1'd0;
reg [1:0] sdram_twtrcon_count = 2'd0;
wire sdram_read_available;
wire sdram_write_available;
reg sdram_en0 = 1'd0;
wire sdram_max_time0;
reg [4:0] sdram_time0 = 5'd0;
reg sdram_en1 = 1'd0;
wire sdram_max_time1;
reg [3:0] sdram_time1 = 4'd0;
wire sdram_go_to_refresh;
wire port_flush;
wire port_cmd_valid;
wire port_cmd_ready;
wire port_cmd_last;
wire port_cmd_payload_we;
wire [23:0] port_cmd_payload_addr;
wire port_wdata_valid;
wire port_wdata_ready;
wire [63:0] port_wdata_payload_data;
wire [7:0] port_wdata_payload_we;
wire port_rdata_valid;
wire port_rdata_ready;
wire [63:0] port_rdata_payload_data;
wire [29:0] wb_sdram_adr;
wire [31:0] wb_sdram_dat_w;
reg [31:0] wb_sdram_dat_r = 32'd0;
wire [3:0] wb_sdram_sel;
wire wb_sdram_cyc;
wire wb_sdram_stb;
reg wb_sdram_ack = 1'd0;
wire wb_sdram_we;
wire [2:0] wb_sdram_cti;
wire [1:0] wb_sdram_bte;
reg wb_sdram_err = 1'd0;
wire [29:0] interface_adr;
wire [63:0] interface_dat_w;
wire [63:0] interface_dat_r;
wire [7:0] interface_sel;
reg interface_cyc = 1'd0;
reg interface_stb = 1'd0;
wire interface_ack;
reg interface_we = 1'd0;
wire data_port_adr;
wire [63:0] data_port_dat_r;
reg [7:0] data_port_we = 8'd0;
reg [63:0] data_port_dat_w = 64'd0;
reg write_from_slave = 1'd0;
reg adr_offset_r = 1'd0;
wire tag_port_adr;
wire [30:0] tag_port_dat_r;
reg tag_port_we = 1'd0;
wire [30:0] tag_port_dat_w;
wire [29:0] tag_do_tag;
wire tag_do_dirty;
wire [29:0] tag_di_tag;
reg tag_di_dirty = 1'd0;
reg word_clr = 1'd0;
reg word_inc = 1'd0;
reg cmd_consumed = 1'd0;
reg wdata_consumed = 1'd0;
wire ack_cmd;
wire ack_wdata;
wire ack_rdata;
reg init_done_storage = 1'd0;
reg init_done_re = 1'd0;
reg init_error_storage = 1'd0;
reg init_error_re = 1'd0;
reg cmd_valid = 1'd0;
wire cmd_ready;
reg cmd_payload_we = 1'd0;
reg [23:0] cmd_payload_addr = 24'd0;
wire wdata_valid;
wire wdata_ready;
wire wdata_first;
wire wdata_last;
wire [63:0] wdata_payload_data;
wire [7:0] wdata_payload_we;
wire rdata_valid;
wire rdata_ready;
reg rdata_first = 1'd0;
reg rdata_last = 1'd0;
wire [63:0] rdata_payload_data;
wire aw_valid;
wire aw_ready;
reg aw_first = 1'd0;
reg aw_last = 1'd0;
wire [26:0] aw_payload_addr;
wire [1:0] aw_payload_burst;
wire [7:0] aw_payload_len;
wire [3:0] aw_payload_size;
reg [1:0] aw_payload_lock = 2'd0;
reg [2:0] aw_payload_prot = 3'd0;
reg [3:0] aw_payload_cache = 4'd0;
reg [3:0] aw_payload_qos = 4'd0;
wire [5:0] aw_payload_id;
wire w_valid;
reg w_ready = 1'd0;
reg w_first = 1'd0;
wire w_last;
wire [63:0] w_payload_data;
wire [7:0] w_payload_strb;
reg [5:0] w_payload_id = 6'd0;
wire b_valid;
wire b_ready;
wire b_first;
wire b_last;
wire [1:0] b_payload_resp;
wire [5:0] b_payload_id;
wire ar_valid;
wire ar_ready;
reg ar_first = 1'd0;
reg ar_last = 1'd0;
wire [26:0] ar_payload_addr;
wire [1:0] ar_payload_burst;
wire [7:0] ar_payload_len;
wire [3:0] ar_payload_size;
reg [1:0] ar_payload_lock = 2'd0;
reg [2:0] ar_payload_prot = 3'd0;
reg [3:0] ar_payload_cache = 4'd0;
reg [3:0] ar_payload_qos = 4'd0;
wire [5:0] ar_payload_id;
wire r_valid;
wire r_ready;
wire r_first;
wire r_last;
reg [1:0] r_payload_resp = 2'd0;
wire [63:0] r_payload_data;
wire [5:0] r_payload_id;
wire write_cmd_request;
wire write_cmd_grant;
wire write_aw_buffer_sink_valid;
wire write_aw_buffer_sink_ready;
wire write_aw_buffer_sink_first;
wire write_aw_buffer_sink_last;
wire [26:0] write_aw_buffer_sink_payload_addr;
wire [1:0] write_aw_buffer_sink_payload_burst;
wire [7:0] write_aw_buffer_sink_payload_len;
wire [3:0] write_aw_buffer_sink_payload_size;
wire [1:0] write_aw_buffer_sink_payload_lock;
wire [2:0] write_aw_buffer_sink_payload_prot;
wire [3:0] write_aw_buffer_sink_payload_cache;
wire [3:0] write_aw_buffer_sink_payload_qos;
wire [5:0] write_aw_buffer_sink_payload_id;
reg write_aw_buffer_source_valid = 1'd0;
reg write_aw_buffer_source_ready = 1'd0;
reg write_aw_buffer_source_first = 1'd0;
reg write_aw_buffer_source_last = 1'd0;
reg [26:0] write_aw_buffer_source_payload_addr = 27'd0;
reg [1:0] write_aw_buffer_source_payload_burst = 2'd0;
reg [7:0] write_aw_buffer_source_payload_len = 8'd0;
reg [3:0] write_aw_buffer_source_payload_size = 4'd0;
reg [1:0] write_aw_buffer_source_payload_lock = 2'd0;
reg [2:0] write_aw_buffer_source_payload_prot = 3'd0;
reg [3:0] write_aw_buffer_source_payload_cache = 4'd0;
reg [3:0] write_aw_buffer_source_payload_qos = 4'd0;
reg [5:0] write_aw_buffer_source_payload_id = 6'd0;
wire write_aw_valid;
reg write_aw_ready = 1'd0;
wire write_aw_first;
wire write_aw_last;
wire [26:0] write_aw_payload_addr;
wire [5:0] write_aw_payload_id;
reg [7:0] write_beat_count = 8'd0;
wire [11:0] write_beat_size;
reg [11:0] write_beat_offset = 12'd0;
wire [11:0] write_beat_wrap;
reg write_w_buffer_sink_valid = 1'd0;
wire write_w_buffer_sink_ready;
reg write_w_buffer_sink_first = 1'd0;
reg write_w_buffer_sink_last = 1'd0;
reg [63:0] write_w_buffer_sink_payload_data = 64'd0;
reg [7:0] write_w_buffer_sink_payload_strb = 8'd0;
reg [5:0] write_w_buffer_sink_payload_id = 6'd0;
wire write_w_buffer_source_valid;
wire write_w_buffer_source_ready;
wire write_w_buffer_source_first;
wire write_w_buffer_source_last;
wire [63:0] write_w_buffer_source_payload_data;
wire [7:0] write_w_buffer_source_payload_strb;
wire [5:0] write_w_buffer_source_payload_id;
wire write_w_buffer_re;
reg write_w_buffer_readable = 1'd0;
wire write_w_buffer_syncfifo_we;
wire write_w_buffer_syncfifo_writable;
wire write_w_buffer_syncfifo_re;
wire write_w_buffer_syncfifo_readable;
wire [79:0] write_w_buffer_syncfifo_din;
wire [79:0] write_w_buffer_syncfifo_dout;
reg [4:0] write_w_buffer_level0 = 5'd0;
reg write_w_buffer_replace = 1'd0;
reg [3:0] write_w_buffer_produce = 4'd0;
reg [3:0] write_w_buffer_consume = 4'd0;
reg [3:0] write_w_buffer_wrport_adr = 4'd0;
wire [79:0] write_w_buffer_wrport_dat_r;
wire write_w_buffer_wrport_we;
wire [79:0] write_w_buffer_wrport_dat_w;
wire write_w_buffer_do_read;
wire [3:0] write_w_buffer_rdport_adr;
wire [79:0] write_w_buffer_rdport_dat_r;
wire write_w_buffer_rdport_re;
wire [4:0] write_w_buffer_level1;
wire [63:0] write_w_buffer_fifo_in_payload_data;
wire [7:0] write_w_buffer_fifo_in_payload_strb;
wire [5:0] write_w_buffer_fifo_in_payload_id;
wire write_w_buffer_fifo_in_first;
wire write_w_buffer_fifo_in_last;
wire [63:0] write_w_buffer_fifo_out_payload_data;
wire [7:0] write_w_buffer_fifo_out_payload_strb;
wire [5:0] write_w_buffer_fifo_out_payload_id;
wire write_w_buffer_fifo_out_first;
wire write_w_buffer_fifo_out_last;
wire write_id_buffer_sink_valid;
wire write_id_buffer_sink_ready;
reg write_id_buffer_sink_first = 1'd0;
reg write_id_buffer_sink_last = 1'd0;
wire [5:0] write_id_buffer_sink_payload_id;
wire write_id_buffer_source_valid;
reg write_id_buffer_source_ready = 1'd0;
wire write_id_buffer_source_first;
wire write_id_buffer_source_last;
wire [5:0] write_id_buffer_source_payload_id;
wire write_id_buffer_syncfifo_we;
wire write_id_buffer_syncfifo_writable;
wire write_id_buffer_syncfifo_re;
wire write_id_buffer_syncfifo_readable;
wire [7:0] write_id_buffer_syncfifo_din;
wire [7:0] write_id_buffer_syncfifo_dout;
reg [4:0] write_id_buffer_level = 5'd0;
reg write_id_buffer_replace = 1'd0;
reg [3:0] write_id_buffer_produce = 4'd0;
reg [3:0] write_id_buffer_consume = 4'd0;
reg [3:0] write_id_buffer_wrport_adr = 4'd0;
wire [7:0] write_id_buffer_wrport_dat_r;
wire write_id_buffer_wrport_we;
wire [7:0] write_id_buffer_wrport_dat_w;
wire write_id_buffer_do_read;
wire [3:0] write_id_buffer_rdport_adr;
wire [7:0] write_id_buffer_rdport_dat_r;
wire [5:0] write_id_buffer_fifo_in_payload_id;
wire write_id_buffer_fifo_in_first;
wire write_id_buffer_fifo_in_last;
wire [5:0] write_id_buffer_fifo_out_payload_id;
wire write_id_buffer_fifo_out_first;
wire write_id_buffer_fifo_out_last;
reg write_resp_buffer_sink_valid = 1'd0;
wire write_resp_buffer_sink_ready;
reg write_resp_buffer_sink_first = 1'd0;
reg write_resp_buffer_sink_last = 1'd0;
reg [5:0] write_resp_buffer_sink_payload_id = 6'd0;
reg [1:0] write_resp_buffer_sink_payload_resp = 2'd0;
wire write_resp_buffer_source_valid;
wire write_resp_buffer_source_ready;
wire write_resp_buffer_source_first;
wire write_resp_buffer_source_last;
wire [5:0] write_resp_buffer_source_payload_id;
wire [1:0] write_resp_buffer_source_payload_resp;
wire write_resp_buffer_syncfifo_we;
wire write_resp_buffer_syncfifo_writable;
wire write_resp_buffer_syncfifo_re;
wire write_resp_buffer_syncfifo_readable;
wire [9:0] write_resp_buffer_syncfifo_din;
wire [9:0] write_resp_buffer_syncfifo_dout;
reg [4:0] write_resp_buffer_level = 5'd0;
reg write_resp_buffer_replace = 1'd0;
reg [3:0] write_resp_buffer_produce = 4'd0;
reg [3:0] write_resp_buffer_consume = 4'd0;
reg [3:0] write_resp_buffer_wrport_adr = 4'd0;
wire [9:0] write_resp_buffer_wrport_dat_r;
wire write_resp_buffer_wrport_we;
wire [9:0] write_resp_buffer_wrport_dat_w;
wire write_resp_buffer_do_read;
wire [3:0] write_resp_buffer_rdport_adr;
wire [9:0] write_resp_buffer_rdport_dat_r;
wire [5:0] write_resp_buffer_fifo_in_payload_id;
wire [1:0] write_resp_buffer_fifo_in_payload_resp;
wire write_resp_buffer_fifo_in_first;
wire write_resp_buffer_fifo_in_last;
wire [5:0] write_resp_buffer_fifo_out_payload_id;
wire [1:0] write_resp_buffer_fifo_out_payload_resp;
wire write_resp_buffer_fifo_out_first;
wire write_resp_buffer_fifo_out_last;
wire read_cmd_request;
wire read_cmd_grant;
wire read_can_read;
wire read_ar_buffer_sink_valid;
wire read_ar_buffer_sink_ready;
wire read_ar_buffer_sink_first;
wire read_ar_buffer_sink_last;
wire [26:0] read_ar_buffer_sink_payload_addr;
wire [1:0] read_ar_buffer_sink_payload_burst;
wire [7:0] read_ar_buffer_sink_payload_len;
wire [3:0] read_ar_buffer_sink_payload_size;
wire [1:0] read_ar_buffer_sink_payload_lock;
wire [2:0] read_ar_buffer_sink_payload_prot;
wire [3:0] read_ar_buffer_sink_payload_cache;
wire [3:0] read_ar_buffer_sink_payload_qos;
wire [5:0] read_ar_buffer_sink_payload_id;
reg read_ar_buffer_source_valid = 1'd0;
reg read_ar_buffer_source_ready = 1'd0;
reg read_ar_buffer_source_first = 1'd0;
reg read_ar_buffer_source_last = 1'd0;
reg [26:0] read_ar_buffer_source_payload_addr = 27'd0;
reg [1:0] read_ar_buffer_source_payload_burst = 2'd0;
reg [7:0] read_ar_buffer_source_payload_len = 8'd0;
reg [3:0] read_ar_buffer_source_payload_size = 4'd0;
reg [1:0] read_ar_buffer_source_payload_lock = 2'd0;
reg [2:0] read_ar_buffer_source_payload_prot = 3'd0;
reg [3:0] read_ar_buffer_source_payload_cache = 4'd0;
reg [3:0] read_ar_buffer_source_payload_qos = 4'd0;
reg [5:0] read_ar_buffer_source_payload_id = 6'd0;
wire read_ar_valid;
reg read_ar_ready = 1'd0;
wire read_ar_first;
wire read_ar_last;
wire [26:0] read_ar_payload_addr;
wire [5:0] read_ar_payload_id;
reg [7:0] read_beat_count = 8'd0;
wire [11:0] read_beat_size;
reg [11:0] read_beat_offset = 12'd0;
wire [11:0] read_beat_wrap;
wire read_r_buffer_sink_valid;
wire read_r_buffer_sink_ready;
wire read_r_buffer_sink_first;
wire read_r_buffer_sink_last;
reg [1:0] read_r_buffer_sink_payload_resp = 2'd0;
wire [63:0] read_r_buffer_sink_payload_data;
reg [5:0] read_r_buffer_sink_payload_id = 6'd0;
wire read_r_buffer_source_valid;
wire read_r_buffer_source_ready;
wire read_r_buffer_source_first;
wire read_r_buffer_source_last;
wire [1:0] read_r_buffer_source_payload_resp;
wire [63:0] read_r_buffer_source_payload_data;
wire [5:0] read_r_buffer_source_payload_id;
wire read_r_buffer_re;
reg read_r_buffer_readable = 1'd0;
wire read_r_buffer_syncfifo_we;
wire read_r_buffer_syncfifo_writable;
wire read_r_buffer_syncfifo_re;
wire read_r_buffer_syncfifo_readable;
wire [73:0] read_r_buffer_syncfifo_din;
wire [73:0] read_r_buffer_syncfifo_dout;
reg [4:0] read_r_buffer_level0 = 5'd0;
reg read_r_buffer_replace = 1'd0;
reg [3:0] read_r_buffer_produce = 4'd0;
reg [3:0] read_r_buffer_consume = 4'd0;
reg [3:0] read_r_buffer_wrport_adr = 4'd0;
wire [73:0] read_r_buffer_wrport_dat_r;
wire read_r_buffer_wrport_we;
wire [73:0] read_r_buffer_wrport_dat_w;
wire read_r_buffer_do_read;
wire [3:0] read_r_buffer_rdport_adr;
wire [73:0] read_r_buffer_rdport_dat_r;
wire read_r_buffer_rdport_re;
wire [4:0] read_r_buffer_level1;
wire [1:0] read_r_buffer_fifo_in_payload_resp;
wire [63:0] read_r_buffer_fifo_in_payload_data;
wire [5:0] read_r_buffer_fifo_in_payload_id;
wire read_r_buffer_fifo_in_first;
wire read_r_buffer_fifo_in_last;
wire [1:0] read_r_buffer_fifo_out_payload_resp;
wire [63:0] read_r_buffer_fifo_out_payload_data;
wire [5:0] read_r_buffer_fifo_out_payload_id;
wire read_r_buffer_fifo_out_first;
wire read_r_buffer_fifo_out_last;
wire read_r_buffer_queue;
wire read_r_buffer_dequeue;
reg [4:0] read_r_buffer_level2 = 5'd0;
wire read_id_buffer_sink_valid;
wire read_id_buffer_sink_ready;
reg read_id_buffer_sink_first = 1'd0;
wire read_id_buffer_sink_last;
wire [5:0] read_id_buffer_sink_payload_id;
wire read_id_buffer_source_valid;
wire read_id_buffer_source_ready;
wire read_id_buffer_source_first;
wire read_id_buffer_source_last;
wire [5:0] read_id_buffer_source_payload_id;
wire read_id_buffer_syncfifo_we;
wire read_id_buffer_syncfifo_writable;
wire read_id_buffer_syncfifo_re;
wire read_id_buffer_syncfifo_readable;
wire [7:0] read_id_buffer_syncfifo_din;
wire [7:0] read_id_buffer_syncfifo_dout;
reg [4:0] read_id_buffer_level = 5'd0;
reg read_id_buffer_replace = 1'd0;
reg [3:0] read_id_buffer_produce = 4'd0;
reg [3:0] read_id_buffer_consume = 4'd0;
reg [3:0] read_id_buffer_wrport_adr = 4'd0;
wire [7:0] read_id_buffer_wrport_dat_r;
wire read_id_buffer_wrport_we;
wire [7:0] read_id_buffer_wrport_dat_w;
wire read_id_buffer_do_read;
wire [3:0] read_id_buffer_rdport_adr;
wire [7:0] read_id_buffer_rdport_dat_r;
wire [5:0] read_id_buffer_fifo_in_payload_id;
wire read_id_buffer_fifo_in_first;
wire read_id_buffer_fifo_in_last;
wire [5:0] read_id_buffer_fifo_out_payload_id;
wire read_id_buffer_fifo_out_first;
wire read_id_buffer_fifo_out_last;
reg [1:0] request = 2'd0;
reg grant = 1'd0;
wire ce;
wire subfragments_reset0;
wire subfragments_reset1;
wire subfragments_reset2;
wire subfragments_reset3;
wire subfragments_reset4;
wire subfragments_reset5;
wire subfragments_reset6;
wire subfragments_reset7;
wire subfragments_pll_fb;
reg [1:0] subfragments_refresher_state = 2'd0;
reg [1:0] subfragments_refresher_next_state = 2'd0;
reg [2:0] subfragments_bankmachine0_state = 3'd0;
reg [2:0] subfragments_bankmachine0_next_state = 3'd0;
reg [2:0] subfragments_bankmachine1_state = 3'd0;
reg [2:0] subfragments_bankmachine1_next_state = 3'd0;
reg [2:0] subfragments_bankmachine2_state = 3'd0;
reg [2:0] subfragments_bankmachine2_next_state = 3'd0;
reg [2:0] subfragments_bankmachine3_state = 3'd0;
reg [2:0] subfragments_bankmachine3_next_state = 3'd0;
reg [2:0] subfragments_bankmachine4_state = 3'd0;
reg [2:0] subfragments_bankmachine4_next_state = 3'd0;
reg [2:0] subfragments_bankmachine5_state = 3'd0;
reg [2:0] subfragments_bankmachine5_next_state = 3'd0;
reg [2:0] subfragments_bankmachine6_state = 3'd0;
reg [2:0] subfragments_bankmachine6_next_state = 3'd0;
reg [2:0] subfragments_bankmachine7_state = 3'd0;
reg [2:0] subfragments_bankmachine7_next_state = 3'd0;
reg [3:0] subfragments_multiplexer_state = 4'd0;
reg [3:0] subfragments_multiplexer_next_state = 4'd0;
wire [1:0] subfragments_roundrobin0_request;
reg subfragments_roundrobin0_grant = 1'd0;
wire subfragments_roundrobin0_ce;
wire [1:0] subfragments_roundrobin1_request;
reg subfragments_roundrobin1_grant = 1'd0;
wire subfragments_roundrobin1_ce;
wire [1:0] subfragments_roundrobin2_request;
reg subfragments_roundrobin2_grant = 1'd0;
wire subfragments_roundrobin2_ce;
wire [1:0] subfragments_roundrobin3_request;
reg subfragments_roundrobin3_grant = 1'd0;
wire subfragments_roundrobin3_ce;
wire [1:0] subfragments_roundrobin4_request;
reg subfragments_roundrobin4_grant = 1'd0;
wire subfragments_roundrobin4_ce;
wire [1:0] subfragments_roundrobin5_request;
reg subfragments_roundrobin5_grant = 1'd0;
wire subfragments_roundrobin5_ce;
wire [1:0] subfragments_roundrobin6_request;
reg subfragments_roundrobin6_grant = 1'd0;
wire subfragments_roundrobin6_ce;
wire [1:0] subfragments_roundrobin7_request;
reg subfragments_roundrobin7_grant = 1'd0;
wire subfragments_roundrobin7_ce;
reg subfragments_locked0 = 1'd0;
reg subfragments_locked1 = 1'd0;
reg subfragments_locked2 = 1'd0;
reg subfragments_locked3 = 1'd0;
reg subfragments_locked4 = 1'd0;
reg subfragments_locked5 = 1'd0;
reg subfragments_locked6 = 1'd0;
reg subfragments_locked7 = 1'd0;
reg subfragments_locked8 = 1'd0;
reg subfragments_locked9 = 1'd0;
reg subfragments_locked10 = 1'd0;
reg subfragments_locked11 = 1'd0;
reg subfragments_locked12 = 1'd0;
reg subfragments_locked13 = 1'd0;
reg subfragments_locked14 = 1'd0;
reg subfragments_locked15 = 1'd0;
reg subfragments_new_master_wdata_ready0 = 1'd0;
reg subfragments_new_master_wdata_ready1 = 1'd0;
reg subfragments_new_master_rdata_valid0 = 1'd0;
reg subfragments_new_master_rdata_valid1 = 1'd0;
reg subfragments_new_master_rdata_valid2 = 1'd0;
reg subfragments_new_master_rdata_valid3 = 1'd0;
reg subfragments_new_master_rdata_valid4 = 1'd0;
reg subfragments_new_master_rdata_valid5 = 1'd0;
reg subfragments_new_master_rdata_valid6 = 1'd0;
reg subfragments_new_master_rdata_valid7 = 1'd0;
reg subfragments_new_master_rdata_valid8 = 1'd0;
reg subfragments_new_master_rdata_valid9 = 1'd0;
reg subfragments_new_master_rdata_valid10 = 1'd0;
reg subfragments_new_master_rdata_valid11 = 1'd0;
reg subfragments_new_master_rdata_valid12 = 1'd0;
reg subfragments_new_master_rdata_valid13 = 1'd0;
reg subfragments_new_master_rdata_valid14 = 1'd0;
reg subfragments_new_master_rdata_valid15 = 1'd0;
reg subfragments_new_master_rdata_valid16 = 1'd0;
reg subfragments_new_master_rdata_valid17 = 1'd0;
reg [1:0] subfragments_state = 2'd0;
reg [1:0] subfragments_next_state = 2'd0;
reg [13:0] litedramcore_litedramcore_adr = 14'd0;
reg litedramcore_litedramcore_we = 1'd0;
reg [7:0] litedramcore_litedramcore_dat_w = 8'd0;
wire [7:0] litedramcore_litedramcore_dat_r;
wire [29:0] litedramcore_litedramcore_wishbone_adr;
wire [31:0] litedramcore_litedramcore_wishbone_dat_w;
reg [31:0] litedramcore_litedramcore_wishbone_dat_r = 32'd0;
wire [3:0] litedramcore_litedramcore_wishbone_sel;
wire litedramcore_litedramcore_wishbone_cyc;
wire litedramcore_litedramcore_wishbone_stb;
reg litedramcore_litedramcore_wishbone_ack = 1'd0;
wire litedramcore_litedramcore_wishbone_we;
wire [2:0] litedramcore_litedramcore_wishbone_cti;
wire [1:0] litedramcore_litedramcore_wishbone_bte;
reg litedramcore_litedramcore_wishbone_err = 1'd0;
wire [29:0] litedramcore_shared_adr;
wire [31:0] litedramcore_shared_dat_w;
reg [31:0] litedramcore_shared_dat_r = 32'd0;
wire [3:0] litedramcore_shared_sel;
wire litedramcore_shared_cyc;
wire litedramcore_shared_stb;
reg litedramcore_shared_ack = 1'd0;
wire litedramcore_shared_we;
wire [2:0] litedramcore_shared_cti;
wire [1:0] litedramcore_shared_bte;
wire litedramcore_shared_err;
wire [1:0] litedramcore_request;
reg litedramcore_grant = 1'd0;
reg [3:0] litedramcore_slave_sel = 4'd0;
reg [3:0] litedramcore_slave_sel_r = 4'd0;
reg litedramcore_error = 1'd0;
wire litedramcore_wait;
wire litedramcore_done;
reg [19:0] litedramcore_count = 20'd1000000;
wire [13:0] litedramcore_interface0_bank_bus_adr;
wire litedramcore_interface0_bank_bus_we;
wire [7:0] litedramcore_interface0_bank_bus_dat_w;
reg [7:0] litedramcore_interface0_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank0_reset0_re;
wire litedramcore_csrbank0_reset0_r;
wire litedramcore_csrbank0_reset0_we;
wire litedramcore_csrbank0_reset0_w;
wire litedramcore_csrbank0_scratch3_re;
wire [7:0] litedramcore_csrbank0_scratch3_r;
wire litedramcore_csrbank0_scratch3_we;
wire [7:0] litedramcore_csrbank0_scratch3_w;
wire litedramcore_csrbank0_scratch2_re;
wire [7:0] litedramcore_csrbank0_scratch2_r;
wire litedramcore_csrbank0_scratch2_we;
wire [7:0] litedramcore_csrbank0_scratch2_w;
wire litedramcore_csrbank0_scratch1_re;
wire [7:0] litedramcore_csrbank0_scratch1_r;
wire litedramcore_csrbank0_scratch1_we;
wire [7:0] litedramcore_csrbank0_scratch1_w;
wire litedramcore_csrbank0_scratch0_re;
wire [7:0] litedramcore_csrbank0_scratch0_r;
wire litedramcore_csrbank0_scratch0_we;
wire [7:0] litedramcore_csrbank0_scratch0_w;
wire litedramcore_csrbank0_bus_errors3_re;
wire [7:0] litedramcore_csrbank0_bus_errors3_r;
wire litedramcore_csrbank0_bus_errors3_we;
wire [7:0] litedramcore_csrbank0_bus_errors3_w;
wire litedramcore_csrbank0_bus_errors2_re;
wire [7:0] litedramcore_csrbank0_bus_errors2_r;
wire litedramcore_csrbank0_bus_errors2_we;
wire [7:0] litedramcore_csrbank0_bus_errors2_w;
wire litedramcore_csrbank0_bus_errors1_re;
wire [7:0] litedramcore_csrbank0_bus_errors1_r;
wire litedramcore_csrbank0_bus_errors1_we;
wire [7:0] litedramcore_csrbank0_bus_errors1_w;
wire litedramcore_csrbank0_bus_errors0_re;
wire [7:0] litedramcore_csrbank0_bus_errors0_r;
wire litedramcore_csrbank0_bus_errors0_we;
wire [7:0] litedramcore_csrbank0_bus_errors0_w;
wire litedramcore_csrbank0_sel;
wire [13:0] litedramcore_interface1_bank_bus_adr;
wire litedramcore_interface1_bank_bus_we;
wire [7:0] litedramcore_interface1_bank_bus_dat_w;
reg [7:0] litedramcore_interface1_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank1_init_done0_re;
wire litedramcore_csrbank1_init_done0_r;
wire litedramcore_csrbank1_init_done0_we;
wire litedramcore_csrbank1_init_done0_w;
wire litedramcore_csrbank1_init_error0_re;
wire litedramcore_csrbank1_init_error0_r;
wire litedramcore_csrbank1_init_error0_we;
wire litedramcore_csrbank1_init_error0_w;
wire litedramcore_csrbank1_sel;
wire [13:0] litedramcore_interface2_bank_bus_adr;
wire litedramcore_interface2_bank_bus_we;
wire [7:0] litedramcore_interface2_bank_bus_dat_w;
reg [7:0] litedramcore_interface2_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank2_rst0_re;
wire litedramcore_csrbank2_rst0_r;
wire litedramcore_csrbank2_rst0_we;
wire litedramcore_csrbank2_rst0_w;
wire litedramcore_csrbank2_half_sys8x_taps0_re;
wire [4:0] litedramcore_csrbank2_half_sys8x_taps0_r;
wire litedramcore_csrbank2_half_sys8x_taps0_we;
wire [4:0] litedramcore_csrbank2_half_sys8x_taps0_w;
wire litedramcore_csrbank2_wlevel_en0_re;
wire litedramcore_csrbank2_wlevel_en0_r;
wire litedramcore_csrbank2_wlevel_en0_we;
wire litedramcore_csrbank2_wlevel_en0_w;
wire litedramcore_csrbank2_dly_sel0_re;
wire [1:0] litedramcore_csrbank2_dly_sel0_r;
wire litedramcore_csrbank2_dly_sel0_we;
wire [1:0] litedramcore_csrbank2_dly_sel0_w;
wire litedramcore_csrbank2_rdphase0_re;
wire litedramcore_csrbank2_rdphase0_r;
wire litedramcore_csrbank2_rdphase0_we;
wire litedramcore_csrbank2_rdphase0_w;
wire litedramcore_csrbank2_wrphase0_re;
wire litedramcore_csrbank2_wrphase0_r;
wire litedramcore_csrbank2_wrphase0_we;
wire litedramcore_csrbank2_wrphase0_w;
wire litedramcore_csrbank2_sel;
wire [13:0] litedramcore_interface3_bank_bus_adr;
wire litedramcore_interface3_bank_bus_we;
wire [7:0] litedramcore_interface3_bank_bus_dat_w;
reg [7:0] litedramcore_interface3_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank3_dfii_control0_re;
wire [3:0] litedramcore_csrbank3_dfii_control0_r;
wire litedramcore_csrbank3_dfii_control0_we;
wire [3:0] litedramcore_csrbank3_dfii_control0_w;
wire litedramcore_csrbank3_dfii_pi0_command0_re;
wire [5:0] litedramcore_csrbank3_dfii_pi0_command0_r;
wire litedramcore_csrbank3_dfii_pi0_command0_we;
wire [5:0] litedramcore_csrbank3_dfii_pi0_command0_w;
wire litedramcore_csrbank3_dfii_pi0_address1_re;
wire [4:0] litedramcore_csrbank3_dfii_pi0_address1_r;
wire litedramcore_csrbank3_dfii_pi0_address1_we;
wire [4:0] litedramcore_csrbank3_dfii_pi0_address1_w;
wire litedramcore_csrbank3_dfii_pi0_address0_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_address0_r;
wire litedramcore_csrbank3_dfii_pi0_address0_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_address0_w;
wire litedramcore_csrbank3_dfii_pi0_baddress0_re;
wire [2:0] litedramcore_csrbank3_dfii_pi0_baddress0_r;
wire litedramcore_csrbank3_dfii_pi0_baddress0_we;
wire [2:0] litedramcore_csrbank3_dfii_pi0_baddress0_w;
wire litedramcore_csrbank3_dfii_pi0_wrdata3_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata3_r;
wire litedramcore_csrbank3_dfii_pi0_wrdata3_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata3_w;
wire litedramcore_csrbank3_dfii_pi0_wrdata2_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata2_r;
wire litedramcore_csrbank3_dfii_pi0_wrdata2_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata2_w;
wire litedramcore_csrbank3_dfii_pi0_wrdata1_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata1_r;
wire litedramcore_csrbank3_dfii_pi0_wrdata1_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata1_w;
wire litedramcore_csrbank3_dfii_pi0_wrdata0_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata0_r;
wire litedramcore_csrbank3_dfii_pi0_wrdata0_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_wrdata0_w;
wire litedramcore_csrbank3_dfii_pi0_rddata3_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata3_r;
wire litedramcore_csrbank3_dfii_pi0_rddata3_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata3_w;
wire litedramcore_csrbank3_dfii_pi0_rddata2_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata2_r;
wire litedramcore_csrbank3_dfii_pi0_rddata2_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata2_w;
wire litedramcore_csrbank3_dfii_pi0_rddata1_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata1_r;
wire litedramcore_csrbank3_dfii_pi0_rddata1_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata1_w;
wire litedramcore_csrbank3_dfii_pi0_rddata0_re;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata0_r;
wire litedramcore_csrbank3_dfii_pi0_rddata0_we;
wire [7:0] litedramcore_csrbank3_dfii_pi0_rddata0_w;
wire litedramcore_csrbank3_dfii_pi1_command0_re;
wire [5:0] litedramcore_csrbank3_dfii_pi1_command0_r;
wire litedramcore_csrbank3_dfii_pi1_command0_we;
wire [5:0] litedramcore_csrbank3_dfii_pi1_command0_w;
wire litedramcore_csrbank3_dfii_pi1_address1_re;
wire [4:0] litedramcore_csrbank3_dfii_pi1_address1_r;
wire litedramcore_csrbank3_dfii_pi1_address1_we;
wire [4:0] litedramcore_csrbank3_dfii_pi1_address1_w;
wire litedramcore_csrbank3_dfii_pi1_address0_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_address0_r;
wire litedramcore_csrbank3_dfii_pi1_address0_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_address0_w;
wire litedramcore_csrbank3_dfii_pi1_baddress0_re;
wire [2:0] litedramcore_csrbank3_dfii_pi1_baddress0_r;
wire litedramcore_csrbank3_dfii_pi1_baddress0_we;
wire [2:0] litedramcore_csrbank3_dfii_pi1_baddress0_w;
wire litedramcore_csrbank3_dfii_pi1_wrdata3_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata3_r;
wire litedramcore_csrbank3_dfii_pi1_wrdata3_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata3_w;
wire litedramcore_csrbank3_dfii_pi1_wrdata2_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata2_r;
wire litedramcore_csrbank3_dfii_pi1_wrdata2_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata2_w;
wire litedramcore_csrbank3_dfii_pi1_wrdata1_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata1_r;
wire litedramcore_csrbank3_dfii_pi1_wrdata1_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata1_w;
wire litedramcore_csrbank3_dfii_pi1_wrdata0_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata0_r;
wire litedramcore_csrbank3_dfii_pi1_wrdata0_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_wrdata0_w;
wire litedramcore_csrbank3_dfii_pi1_rddata3_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata3_r;
wire litedramcore_csrbank3_dfii_pi1_rddata3_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata3_w;
wire litedramcore_csrbank3_dfii_pi1_rddata2_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata2_r;
wire litedramcore_csrbank3_dfii_pi1_rddata2_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata2_w;
wire litedramcore_csrbank3_dfii_pi1_rddata1_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata1_r;
wire litedramcore_csrbank3_dfii_pi1_rddata1_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata1_w;
wire litedramcore_csrbank3_dfii_pi1_rddata0_re;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata0_r;
wire litedramcore_csrbank3_dfii_pi1_rddata0_we;
wire [7:0] litedramcore_csrbank3_dfii_pi1_rddata0_w;
wire litedramcore_csrbank3_sel;
wire [13:0] litedramcore_interface4_bank_bus_adr;
wire litedramcore_interface4_bank_bus_we;
wire [7:0] litedramcore_interface4_bank_bus_dat_w;
reg [7:0] litedramcore_interface4_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank4_load3_re;
wire [7:0] litedramcore_csrbank4_load3_r;
wire litedramcore_csrbank4_load3_we;
wire [7:0] litedramcore_csrbank4_load3_w;
wire litedramcore_csrbank4_load2_re;
wire [7:0] litedramcore_csrbank4_load2_r;
wire litedramcore_csrbank4_load2_we;
wire [7:0] litedramcore_csrbank4_load2_w;
wire litedramcore_csrbank4_load1_re;
wire [7:0] litedramcore_csrbank4_load1_r;
wire litedramcore_csrbank4_load1_we;
wire [7:0] litedramcore_csrbank4_load1_w;
wire litedramcore_csrbank4_load0_re;
wire [7:0] litedramcore_csrbank4_load0_r;
wire litedramcore_csrbank4_load0_we;
wire [7:0] litedramcore_csrbank4_load0_w;
wire litedramcore_csrbank4_reload3_re;
wire [7:0] litedramcore_csrbank4_reload3_r;
wire litedramcore_csrbank4_reload3_we;
wire [7:0] litedramcore_csrbank4_reload3_w;
wire litedramcore_csrbank4_reload2_re;
wire [7:0] litedramcore_csrbank4_reload2_r;
wire litedramcore_csrbank4_reload2_we;
wire [7:0] litedramcore_csrbank4_reload2_w;
wire litedramcore_csrbank4_reload1_re;
wire [7:0] litedramcore_csrbank4_reload1_r;
wire litedramcore_csrbank4_reload1_we;
wire [7:0] litedramcore_csrbank4_reload1_w;
wire litedramcore_csrbank4_reload0_re;
wire [7:0] litedramcore_csrbank4_reload0_r;
wire litedramcore_csrbank4_reload0_we;
wire [7:0] litedramcore_csrbank4_reload0_w;
wire litedramcore_csrbank4_en0_re;
wire litedramcore_csrbank4_en0_r;
wire litedramcore_csrbank4_en0_we;
wire litedramcore_csrbank4_en0_w;
wire litedramcore_csrbank4_update_value0_re;
wire litedramcore_csrbank4_update_value0_r;
wire litedramcore_csrbank4_update_value0_we;
wire litedramcore_csrbank4_update_value0_w;
wire litedramcore_csrbank4_value3_re;
wire [7:0] litedramcore_csrbank4_value3_r;
wire litedramcore_csrbank4_value3_we;
wire [7:0] litedramcore_csrbank4_value3_w;
wire litedramcore_csrbank4_value2_re;
wire [7:0] litedramcore_csrbank4_value2_r;
wire litedramcore_csrbank4_value2_we;
wire [7:0] litedramcore_csrbank4_value2_w;
wire litedramcore_csrbank4_value1_re;
wire [7:0] litedramcore_csrbank4_value1_r;
wire litedramcore_csrbank4_value1_we;
wire [7:0] litedramcore_csrbank4_value1_w;
wire litedramcore_csrbank4_value0_re;
wire [7:0] litedramcore_csrbank4_value0_r;
wire litedramcore_csrbank4_value0_we;
wire [7:0] litedramcore_csrbank4_value0_w;
wire litedramcore_csrbank4_ev_status_re;
wire litedramcore_csrbank4_ev_status_r;
wire litedramcore_csrbank4_ev_status_we;
wire litedramcore_csrbank4_ev_status_w;
wire litedramcore_csrbank4_ev_pending_re;
wire litedramcore_csrbank4_ev_pending_r;
wire litedramcore_csrbank4_ev_pending_we;
wire litedramcore_csrbank4_ev_pending_w;
wire litedramcore_csrbank4_ev_enable0_re;
wire litedramcore_csrbank4_ev_enable0_r;
wire litedramcore_csrbank4_ev_enable0_we;
wire litedramcore_csrbank4_ev_enable0_w;
wire litedramcore_csrbank4_sel;
wire [13:0] litedramcore_interface5_bank_bus_adr;
wire litedramcore_interface5_bank_bus_we;
wire [7:0] litedramcore_interface5_bank_bus_dat_w;
reg [7:0] litedramcore_interface5_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank5_txfull_re;
wire litedramcore_csrbank5_txfull_r;
wire litedramcore_csrbank5_txfull_we;
wire litedramcore_csrbank5_txfull_w;
wire litedramcore_csrbank5_rxempty_re;
wire litedramcore_csrbank5_rxempty_r;
wire litedramcore_csrbank5_rxempty_we;
wire litedramcore_csrbank5_rxempty_w;
wire litedramcore_csrbank5_ev_status_re;
wire [1:0] litedramcore_csrbank5_ev_status_r;
wire litedramcore_csrbank5_ev_status_we;
wire [1:0] litedramcore_csrbank5_ev_status_w;
wire litedramcore_csrbank5_ev_pending_re;
wire [1:0] litedramcore_csrbank5_ev_pending_r;
wire litedramcore_csrbank5_ev_pending_we;
wire [1:0] litedramcore_csrbank5_ev_pending_w;
wire litedramcore_csrbank5_ev_enable0_re;
wire [1:0] litedramcore_csrbank5_ev_enable0_r;
wire litedramcore_csrbank5_ev_enable0_we;
wire [1:0] litedramcore_csrbank5_ev_enable0_w;
wire litedramcore_csrbank5_txempty_re;
wire litedramcore_csrbank5_txempty_r;
wire litedramcore_csrbank5_txempty_we;
wire litedramcore_csrbank5_txempty_w;
wire litedramcore_csrbank5_rxfull_re;
wire litedramcore_csrbank5_rxfull_r;
wire litedramcore_csrbank5_rxfull_we;
wire litedramcore_csrbank5_rxfull_w;
wire litedramcore_csrbank5_sel;
wire [13:0] litedramcore_interface6_bank_bus_adr;
wire litedramcore_interface6_bank_bus_we;
wire [7:0] litedramcore_interface6_bank_bus_dat_w;
reg [7:0] litedramcore_interface6_bank_bus_dat_r = 8'd0;
wire litedramcore_csrbank6_tuning_word3_re;
wire [7:0] litedramcore_csrbank6_tuning_word3_r;
wire litedramcore_csrbank6_tuning_word3_we;
wire [7:0] litedramcore_csrbank6_tuning_word3_w;
wire litedramcore_csrbank6_tuning_word2_re;
wire [7:0] litedramcore_csrbank6_tuning_word2_r;
wire litedramcore_csrbank6_tuning_word2_we;
wire [7:0] litedramcore_csrbank6_tuning_word2_w;
wire litedramcore_csrbank6_tuning_word1_re;
wire [7:0] litedramcore_csrbank6_tuning_word1_r;
wire litedramcore_csrbank6_tuning_word1_we;
wire [7:0] litedramcore_csrbank6_tuning_word1_w;
wire litedramcore_csrbank6_tuning_word0_re;
wire [7:0] litedramcore_csrbank6_tuning_word0_r;
wire litedramcore_csrbank6_tuning_word0_we;
wire [7:0] litedramcore_csrbank6_tuning_word0_w;
wire litedramcore_csrbank6_sel;
wire [13:0] litedramcore_csr_interconnect_adr;
wire litedramcore_csr_interconnect_we;
wire [7:0] litedramcore_csr_interconnect_dat_w;
wire [7:0] litedramcore_csr_interconnect_dat_r;
reg [1:0] litedramcore_state = 2'd0;
reg [1:0] litedramcore_next_state = 2'd0;
reg [7:0] litedramcore_litedramcore_dat_w_next_value0 = 8'd0;
reg litedramcore_litedramcore_dat_w_next_value_ce0 = 1'd0;
reg [13:0] litedramcore_litedramcore_adr_next_value1 = 14'd0;
reg litedramcore_litedramcore_adr_next_value_ce1 = 1'd0;
reg litedramcore_litedramcore_we_next_value2 = 1'd0;
reg litedramcore_litedramcore_we_next_value_ce2 = 1'd0;
reg rhs_array_muxed0 = 1'd0;
reg [12:0] rhs_array_muxed1 = 13'd0;
reg [2:0] rhs_array_muxed2 = 3'd0;
reg rhs_array_muxed3 = 1'd0;
reg rhs_array_muxed4 = 1'd0;
reg rhs_array_muxed5 = 1'd0;
reg t_array_muxed0 = 1'd0;
reg t_array_muxed1 = 1'd0;
reg t_array_muxed2 = 1'd0;
reg rhs_array_muxed6 = 1'd0;
reg [12:0] rhs_array_muxed7 = 13'd0;
reg [2:0] rhs_array_muxed8 = 3'd0;
reg rhs_array_muxed9 = 1'd0;
reg rhs_array_muxed10 = 1'd0;
reg rhs_array_muxed11 = 1'd0;
reg t_array_muxed3 = 1'd0;
reg t_array_muxed4 = 1'd0;
reg t_array_muxed5 = 1'd0;
reg [20:0] rhs_array_muxed12 = 21'd0;
reg rhs_array_muxed13 = 1'd0;
reg rhs_array_muxed14 = 1'd0;
reg [20:0] rhs_array_muxed15 = 21'd0;
reg rhs_array_muxed16 = 1'd0;
reg rhs_array_muxed17 = 1'd0;
reg [20:0] rhs_array_muxed18 = 21'd0;
reg rhs_array_muxed19 = 1'd0;
reg rhs_array_muxed20 = 1'd0;
reg [20:0] rhs_array_muxed21 = 21'd0;
reg rhs_array_muxed22 = 1'd0;
reg rhs_array_muxed23 = 1'd0;
reg [20:0] rhs_array_muxed24 = 21'd0;
reg rhs_array_muxed25 = 1'd0;
reg rhs_array_muxed26 = 1'd0;
reg [20:0] rhs_array_muxed27 = 21'd0;
reg rhs_array_muxed28 = 1'd0;
reg rhs_array_muxed29 = 1'd0;
reg [20:0] rhs_array_muxed30 = 21'd0;
reg rhs_array_muxed31 = 1'd0;
reg rhs_array_muxed32 = 1'd0;
reg [20:0] rhs_array_muxed33 = 21'd0;
reg rhs_array_muxed34 = 1'd0;
reg rhs_array_muxed35 = 1'd0;
reg [29:0] rhs_array_muxed36 = 30'd0;
reg [31:0] rhs_array_muxed37 = 32'd0;
reg [3:0] rhs_array_muxed38 = 4'd0;
reg rhs_array_muxed39 = 1'd0;
reg rhs_array_muxed40 = 1'd0;
reg rhs_array_muxed41 = 1'd0;
reg [2:0] rhs_array_muxed42 = 3'd0;
reg [1:0] rhs_array_muxed43 = 2'd0;
reg [2:0] array_muxed0 = 3'd0;
reg [12:0] array_muxed1 = 13'd0;
reg array_muxed2 = 1'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg array_muxed6 = 1'd0;
reg [2:0] array_muxed7 = 3'd0;
reg [12:0] array_muxed8 = 13'd0;
reg array_muxed9 = 1'd0;
reg array_muxed10 = 1'd0;
reg array_muxed11 = 1'd0;
reg array_muxed12 = 1'd0;
reg array_muxed13 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg regs1 = 1'd0;
wire xilinxasyncresetsynchronizerimpl0;
wire xilinxasyncresetsynchronizerimpl0_rst_meta;
wire xilinxasyncresetsynchronizerimpl1;
wire xilinxasyncresetsynchronizerimpl1_rst_meta;
wire xilinxasyncresetsynchronizerimpl2;
wire xilinxasyncresetsynchronizerimpl2_rst_meta;
wire xilinxasyncresetsynchronizerimpl2_expr;
wire xilinxasyncresetsynchronizerimpl3;
wire xilinxasyncresetsynchronizerimpl3_rst_meta;
wire xilinxasyncresetsynchronizerimpl3_expr;

// synthesis translate_off
reg dummy_s;
initial dummy_s <= 1'd0;
// synthesis translate_on
assign serv_reset = soccontroller_reset;
assign init_done = init_done_storage;
assign init_error = init_error_storage;
assign user_clk = sys_clk;
assign user_rst = sys_rst;
assign aw_valid = user_port_axi_0_awvalid;
assign user_port_axi_0_awready = aw_ready;
assign aw_payload_addr = user_port_axi_0_awaddr;
assign aw_payload_burst = user_port_axi_0_awburst;
assign aw_payload_len = user_port_axi_0_awlen;
assign aw_payload_size = user_port_axi_0_awsize;
assign aw_payload_id = user_port_axi_0_awid;
assign w_valid = user_port_axi_0_wvalid;
assign user_port_axi_0_wready = w_ready;
assign w_last = user_port_axi_0_wlast;
assign w_payload_strb = user_port_axi_0_wstrb;
assign w_payload_data = user_port_axi_0_wdata;
assign user_port_axi_0_bvalid = b_valid;
assign b_ready = user_port_axi_0_bready;
assign user_port_axi_0_bresp = b_payload_resp;
assign user_port_axi_0_bid = b_payload_id;
assign ar_valid = user_port_axi_0_arvalid;
assign user_port_axi_0_arready = ar_ready;
assign ar_payload_addr = user_port_axi_0_araddr;
assign ar_payload_burst = user_port_axi_0_arburst;
assign ar_payload_len = user_port_axi_0_arlen;
assign ar_payload_size = user_port_axi_0_arsize;
assign ar_payload_id = user_port_axi_0_arid;
assign user_port_axi_0_rvalid = r_valid;
assign r_ready = user_port_axi_0_rready;
assign user_port_axi_0_rlast = r_last;
assign user_port_axi_0_rresp = r_payload_resp;
assign user_port_axi_0_rdata = r_payload_data;
assign user_port_axi_0_rid = r_payload_id;
assign soccontroller_bus_error = litedramcore_error;
assign soccontroller_reset = soccontroller_reset_re;
assign soccontroller_bus_errors_status = soccontroller_bus_errors;
assign serv_ibus_stb = serv_ibus_cyc;
assign serv_ibus_sel = 4'd15;
assign serv_dbus_stb = serv_dbus_cyc;
assign litedramcore_adr = litedramcore_ram_bus_adr[12:0];
assign litedramcore_ram_bus_dat_r = litedramcore_dat_r;

// synthesis translate_off
reg dummy_d;
// synthesis translate_on
always @(*) begin
	ram_we <= 4'd0;
	ram_we[0] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[0]);
	ram_we[1] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[1]);
	ram_we[2] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[2]);
	ram_we[3] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[3]);
// synthesis translate_off
	dummy_d = dummy_s;
// synthesis translate_on
end
assign ram_adr = ram_bus_ram_bus_adr[10:0];
assign ram_bus_ram_bus_dat_r = ram_dat_r;
assign ram_dat_w = ram_bus_ram_bus_dat_w;
assign uart_uart_sink_valid = uart_phy_source_valid;
assign uart_phy_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = uart_phy_source_first;
assign uart_uart_sink_last = uart_phy_source_last;
assign uart_uart_sink_payload_data = uart_phy_source_payload_data;
assign uart_phy_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = uart_phy_sink_ready;
assign uart_phy_sink_first = uart_uart_source_first;
assign uart_phy_sink_last = uart_uart_source_last;
assign uart_phy_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_tx_trigger = (~uart_tx_fifo_sink_ready);
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rx_trigger = (~uart_rx_fifo_source_valid);
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;

// synthesis translate_off
reg dummy_d_1;
// synthesis translate_on
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
// synthesis translate_off
	dummy_d_1 = dummy_s;
// synthesis translate_on
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;

// synthesis translate_off
reg dummy_d_2;
// synthesis translate_on
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
// synthesis translate_off
	dummy_d_2 = dummy_s;
// synthesis translate_on
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);

// synthesis translate_off
reg dummy_d_3;
// synthesis translate_on
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
// synthesis translate_off
	dummy_d_3 = dummy_s;
// synthesis translate_on
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);

// synthesis translate_off
reg dummy_d_4;
// synthesis translate_on
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
// synthesis translate_off
	dummy_d_4 = dummy_s;
// synthesis translate_on
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value != 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;

// synthesis translate_off
reg dummy_d_5;
// synthesis translate_on
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
// synthesis translate_off
	dummy_d_5 = dummy_s;
// synthesis translate_on
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign reset = rst;
assign pll_locked = locked;
assign clkin = clk;
assign iodelay_clk = clkout_buf0;
assign sys_clk = clkout_buf1;
assign sys2x_clk = clkout_buf2;
assign sys2x_dqs_clk = clkout_buf3;
assign a7ddrphy_dqs_oe_delay_tappeddelayline = ((a7ddrphy_dqs_preamble | a7ddrphy_dqs_oe) | a7ddrphy_dqs_postamble);
assign a7ddrphy_dq_oe_delay_tappeddelayline = ((a7ddrphy_dqs_preamble | a7ddrphy_dq_oe) | a7ddrphy_dqs_postamble);

// synthesis translate_off
reg dummy_d_6;
// synthesis translate_on
always @(*) begin
	a7ddrphy_dfi_p0_rddata <= 32'd0;
	a7ddrphy_dfi_p0_rddata[0] <= a7ddrphy_bitslip04[0];
	a7ddrphy_dfi_p0_rddata[16] <= a7ddrphy_bitslip04[1];
	a7ddrphy_dfi_p0_rddata[1] <= a7ddrphy_bitslip14[0];
	a7ddrphy_dfi_p0_rddata[17] <= a7ddrphy_bitslip14[1];
	a7ddrphy_dfi_p0_rddata[2] <= a7ddrphy_bitslip22[0];
	a7ddrphy_dfi_p0_rddata[18] <= a7ddrphy_bitslip22[1];
	a7ddrphy_dfi_p0_rddata[3] <= a7ddrphy_bitslip32[0];
	a7ddrphy_dfi_p0_rddata[19] <= a7ddrphy_bitslip32[1];
	a7ddrphy_dfi_p0_rddata[4] <= a7ddrphy_bitslip42[0];
	a7ddrphy_dfi_p0_rddata[20] <= a7ddrphy_bitslip42[1];
	a7ddrphy_dfi_p0_rddata[5] <= a7ddrphy_bitslip52[0];
	a7ddrphy_dfi_p0_rddata[21] <= a7ddrphy_bitslip52[1];
	a7ddrphy_dfi_p0_rddata[6] <= a7ddrphy_bitslip62[0];
	a7ddrphy_dfi_p0_rddata[22] <= a7ddrphy_bitslip62[1];
	a7ddrphy_dfi_p0_rddata[7] <= a7ddrphy_bitslip72[0];
	a7ddrphy_dfi_p0_rddata[23] <= a7ddrphy_bitslip72[1];
	a7ddrphy_dfi_p0_rddata[8] <= a7ddrphy_bitslip82[0];
	a7ddrphy_dfi_p0_rddata[24] <= a7ddrphy_bitslip82[1];
	a7ddrphy_dfi_p0_rddata[9] <= a7ddrphy_bitslip92[0];
	a7ddrphy_dfi_p0_rddata[25] <= a7ddrphy_bitslip92[1];
	a7ddrphy_dfi_p0_rddata[10] <= a7ddrphy_bitslip102[0];
	a7ddrphy_dfi_p0_rddata[26] <= a7ddrphy_bitslip102[1];
	a7ddrphy_dfi_p0_rddata[11] <= a7ddrphy_bitslip112[0];
	a7ddrphy_dfi_p0_rddata[27] <= a7ddrphy_bitslip112[1];
	a7ddrphy_dfi_p0_rddata[12] <= a7ddrphy_bitslip122[0];
	a7ddrphy_dfi_p0_rddata[28] <= a7ddrphy_bitslip122[1];
	a7ddrphy_dfi_p0_rddata[13] <= a7ddrphy_bitslip132[0];
	a7ddrphy_dfi_p0_rddata[29] <= a7ddrphy_bitslip132[1];
	a7ddrphy_dfi_p0_rddata[14] <= a7ddrphy_bitslip142[0];
	a7ddrphy_dfi_p0_rddata[30] <= a7ddrphy_bitslip142[1];
	a7ddrphy_dfi_p0_rddata[15] <= a7ddrphy_bitslip152[0];
	a7ddrphy_dfi_p0_rddata[31] <= a7ddrphy_bitslip152[1];
// synthesis translate_off
	dummy_d_6 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_7;
// synthesis translate_on
always @(*) begin
	a7ddrphy_dfi_p1_rddata <= 32'd0;
	a7ddrphy_dfi_p1_rddata[0] <= a7ddrphy_bitslip04[2];
	a7ddrphy_dfi_p1_rddata[16] <= a7ddrphy_bitslip04[3];
	a7ddrphy_dfi_p1_rddata[1] <= a7ddrphy_bitslip14[2];
	a7ddrphy_dfi_p1_rddata[17] <= a7ddrphy_bitslip14[3];
	a7ddrphy_dfi_p1_rddata[2] <= a7ddrphy_bitslip22[2];
	a7ddrphy_dfi_p1_rddata[18] <= a7ddrphy_bitslip22[3];
	a7ddrphy_dfi_p1_rddata[3] <= a7ddrphy_bitslip32[2];
	a7ddrphy_dfi_p1_rddata[19] <= a7ddrphy_bitslip32[3];
	a7ddrphy_dfi_p1_rddata[4] <= a7ddrphy_bitslip42[2];
	a7ddrphy_dfi_p1_rddata[20] <= a7ddrphy_bitslip42[3];
	a7ddrphy_dfi_p1_rddata[5] <= a7ddrphy_bitslip52[2];
	a7ddrphy_dfi_p1_rddata[21] <= a7ddrphy_bitslip52[3];
	a7ddrphy_dfi_p1_rddata[6] <= a7ddrphy_bitslip62[2];
	a7ddrphy_dfi_p1_rddata[22] <= a7ddrphy_bitslip62[3];
	a7ddrphy_dfi_p1_rddata[7] <= a7ddrphy_bitslip72[2];
	a7ddrphy_dfi_p1_rddata[23] <= a7ddrphy_bitslip72[3];
	a7ddrphy_dfi_p1_rddata[8] <= a7ddrphy_bitslip82[2];
	a7ddrphy_dfi_p1_rddata[24] <= a7ddrphy_bitslip82[3];
	a7ddrphy_dfi_p1_rddata[9] <= a7ddrphy_bitslip92[2];
	a7ddrphy_dfi_p1_rddata[25] <= a7ddrphy_bitslip92[3];
	a7ddrphy_dfi_p1_rddata[10] <= a7ddrphy_bitslip102[2];
	a7ddrphy_dfi_p1_rddata[26] <= a7ddrphy_bitslip102[3];
	a7ddrphy_dfi_p1_rddata[11] <= a7ddrphy_bitslip112[2];
	a7ddrphy_dfi_p1_rddata[27] <= a7ddrphy_bitslip112[3];
	a7ddrphy_dfi_p1_rddata[12] <= a7ddrphy_bitslip122[2];
	a7ddrphy_dfi_p1_rddata[28] <= a7ddrphy_bitslip122[3];
	a7ddrphy_dfi_p1_rddata[13] <= a7ddrphy_bitslip132[2];
	a7ddrphy_dfi_p1_rddata[29] <= a7ddrphy_bitslip132[3];
	a7ddrphy_dfi_p1_rddata[14] <= a7ddrphy_bitslip142[2];
	a7ddrphy_dfi_p1_rddata[30] <= a7ddrphy_bitslip142[3];
	a7ddrphy_dfi_p1_rddata[15] <= a7ddrphy_bitslip152[2];
	a7ddrphy_dfi_p1_rddata[31] <= a7ddrphy_bitslip152[3];
// synthesis translate_off
	dummy_d_7 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_8;
// synthesis translate_on
always @(*) begin
	a7ddrphy_dfi_p2_rddata <= 32'd0;
	a7ddrphy_dfi_p2_rddata[0] <= a7ddrphy_bitslip04[4];
	a7ddrphy_dfi_p2_rddata[16] <= a7ddrphy_bitslip04[5];
	a7ddrphy_dfi_p2_rddata[1] <= a7ddrphy_bitslip14[4];
	a7ddrphy_dfi_p2_rddata[17] <= a7ddrphy_bitslip14[5];
	a7ddrphy_dfi_p2_rddata[2] <= a7ddrphy_bitslip22[4];
	a7ddrphy_dfi_p2_rddata[18] <= a7ddrphy_bitslip22[5];
	a7ddrphy_dfi_p2_rddata[3] <= a7ddrphy_bitslip32[4];
	a7ddrphy_dfi_p2_rddata[19] <= a7ddrphy_bitslip32[5];
	a7ddrphy_dfi_p2_rddata[4] <= a7ddrphy_bitslip42[4];
	a7ddrphy_dfi_p2_rddata[20] <= a7ddrphy_bitslip42[5];
	a7ddrphy_dfi_p2_rddata[5] <= a7ddrphy_bitslip52[4];
	a7ddrphy_dfi_p2_rddata[21] <= a7ddrphy_bitslip52[5];
	a7ddrphy_dfi_p2_rddata[6] <= a7ddrphy_bitslip62[4];
	a7ddrphy_dfi_p2_rddata[22] <= a7ddrphy_bitslip62[5];
	a7ddrphy_dfi_p2_rddata[7] <= a7ddrphy_bitslip72[4];
	a7ddrphy_dfi_p2_rddata[23] <= a7ddrphy_bitslip72[5];
	a7ddrphy_dfi_p2_rddata[8] <= a7ddrphy_bitslip82[4];
	a7ddrphy_dfi_p2_rddata[24] <= a7ddrphy_bitslip82[5];
	a7ddrphy_dfi_p2_rddata[9] <= a7ddrphy_bitslip92[4];
	a7ddrphy_dfi_p2_rddata[25] <= a7ddrphy_bitslip92[5];
	a7ddrphy_dfi_p2_rddata[10] <= a7ddrphy_bitslip102[4];
	a7ddrphy_dfi_p2_rddata[26] <= a7ddrphy_bitslip102[5];
	a7ddrphy_dfi_p2_rddata[11] <= a7ddrphy_bitslip112[4];
	a7ddrphy_dfi_p2_rddata[27] <= a7ddrphy_bitslip112[5];
	a7ddrphy_dfi_p2_rddata[12] <= a7ddrphy_bitslip122[4];
	a7ddrphy_dfi_p2_rddata[28] <= a7ddrphy_bitslip122[5];
	a7ddrphy_dfi_p2_rddata[13] <= a7ddrphy_bitslip132[4];
	a7ddrphy_dfi_p2_rddata[29] <= a7ddrphy_bitslip132[5];
	a7ddrphy_dfi_p2_rddata[14] <= a7ddrphy_bitslip142[4];
	a7ddrphy_dfi_p2_rddata[30] <= a7ddrphy_bitslip142[5];
	a7ddrphy_dfi_p2_rddata[15] <= a7ddrphy_bitslip152[4];
	a7ddrphy_dfi_p2_rddata[31] <= a7ddrphy_bitslip152[5];
// synthesis translate_off
	dummy_d_8 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_9;
// synthesis translate_on
always @(*) begin
	a7ddrphy_dfi_p3_rddata <= 32'd0;
	a7ddrphy_dfi_p3_rddata[0] <= a7ddrphy_bitslip04[6];
	a7ddrphy_dfi_p3_rddata[16] <= a7ddrphy_bitslip04[7];
	a7ddrphy_dfi_p3_rddata[1] <= a7ddrphy_bitslip14[6];
	a7ddrphy_dfi_p3_rddata[17] <= a7ddrphy_bitslip14[7];
	a7ddrphy_dfi_p3_rddata[2] <= a7ddrphy_bitslip22[6];
	a7ddrphy_dfi_p3_rddata[18] <= a7ddrphy_bitslip22[7];
	a7ddrphy_dfi_p3_rddata[3] <= a7ddrphy_bitslip32[6];
	a7ddrphy_dfi_p3_rddata[19] <= a7ddrphy_bitslip32[7];
	a7ddrphy_dfi_p3_rddata[4] <= a7ddrphy_bitslip42[6];
	a7ddrphy_dfi_p3_rddata[20] <= a7ddrphy_bitslip42[7];
	a7ddrphy_dfi_p3_rddata[5] <= a7ddrphy_bitslip52[6];
	a7ddrphy_dfi_p3_rddata[21] <= a7ddrphy_bitslip52[7];
	a7ddrphy_dfi_p3_rddata[6] <= a7ddrphy_bitslip62[6];
	a7ddrphy_dfi_p3_rddata[22] <= a7ddrphy_bitslip62[7];
	a7ddrphy_dfi_p3_rddata[7] <= a7ddrphy_bitslip72[6];
	a7ddrphy_dfi_p3_rddata[23] <= a7ddrphy_bitslip72[7];
	a7ddrphy_dfi_p3_rddata[8] <= a7ddrphy_bitslip82[6];
	a7ddrphy_dfi_p3_rddata[24] <= a7ddrphy_bitslip82[7];
	a7ddrphy_dfi_p3_rddata[9] <= a7ddrphy_bitslip92[6];
	a7ddrphy_dfi_p3_rddata[25] <= a7ddrphy_bitslip92[7];
	a7ddrphy_dfi_p3_rddata[10] <= a7ddrphy_bitslip102[6];
	a7ddrphy_dfi_p3_rddata[26] <= a7ddrphy_bitslip102[7];
	a7ddrphy_dfi_p3_rddata[11] <= a7ddrphy_bitslip112[6];
	a7ddrphy_dfi_p3_rddata[27] <= a7ddrphy_bitslip112[7];
	a7ddrphy_dfi_p3_rddata[12] <= a7ddrphy_bitslip122[6];
	a7ddrphy_dfi_p3_rddata[28] <= a7ddrphy_bitslip122[7];
	a7ddrphy_dfi_p3_rddata[13] <= a7ddrphy_bitslip132[6];
	a7ddrphy_dfi_p3_rddata[29] <= a7ddrphy_bitslip132[7];
	a7ddrphy_dfi_p3_rddata[14] <= a7ddrphy_bitslip142[6];
	a7ddrphy_dfi_p3_rddata[30] <= a7ddrphy_bitslip142[7];
	a7ddrphy_dfi_p3_rddata[15] <= a7ddrphy_bitslip152[6];
	a7ddrphy_dfi_p3_rddata[31] <= a7ddrphy_bitslip152[7];
// synthesis translate_off
	dummy_d_9 = dummy_s;
// synthesis translate_on
end
assign a7ddrphy_dfi_p0_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dfi_p1_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dfi_p2_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dfi_p3_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dq_oe = a7ddrphy_wrdata_en_tappeddelayline0;

// synthesis translate_off
reg dummy_d_10;
// synthesis translate_on
always @(*) begin
	a7ddrphy_dqs_oe <= 1'd0;
	if (a7ddrphy_wlevel_en_storage) begin
		a7ddrphy_dqs_oe <= 1'd1;
	end else begin
		a7ddrphy_dqs_oe <= a7ddrphy_dq_oe;
	end
// synthesis translate_off
	dummy_d_10 = dummy_s;
// synthesis translate_on
end
assign a7ddrphy_dqs_preamble = (a7ddrphy_wrdata_en_tappeddelayline1 & (~a7ddrphy_wrdata_en_tappeddelayline0));
assign a7ddrphy_dqs_postamble = (a7ddrphy_wrdata_en_tappeddelayline1 & (~a7ddrphy_wrdata_en_tappeddelayline0));

// synthesis translate_off
reg dummy_d_11;
// synthesis translate_on
always @(*) begin
	a7ddrphy_dqspattern_o0 <= 8'd0;
	a7ddrphy_dqspattern_o0 <= 7'd85;
	if (a7ddrphy_dqspattern0) begin
		a7ddrphy_dqspattern_o0 <= 5'd21;
	end
	if (a7ddrphy_dqspattern1) begin
		a7ddrphy_dqspattern_o0 <= 7'd84;
	end
	if (a7ddrphy_wlevel_en_storage) begin
		a7ddrphy_dqspattern_o0 <= 1'd0;
		if (a7ddrphy_wlevel_strobe_re) begin
			a7ddrphy_dqspattern_o0 <= 1'd1;
		end
	end
// synthesis translate_off
	dummy_d_11 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_12;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip00 <= 8'd0;
	case (a7ddrphy_bitslip0_value0)
		1'd0: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_12 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_13;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip10 <= 8'd0;
	case (a7ddrphy_bitslip1_value0)
		1'd0: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_13 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_14;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip01 <= 8'd0;
	case (a7ddrphy_bitslip0_value1)
		1'd0: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_14 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_15;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip11 <= 8'd0;
	case (a7ddrphy_bitslip1_value1)
		1'd0: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_15 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_16;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip02 <= 8'd0;
	case (a7ddrphy_bitslip0_value2)
		1'd0: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_16 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_17;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip04 <= 8'd0;
	case (a7ddrphy_bitslip0_value3)
		1'd0: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_17 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_18;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip12 <= 8'd0;
	case (a7ddrphy_bitslip1_value2)
		1'd0: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_18 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_19;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip14 <= 8'd0;
	case (a7ddrphy_bitslip1_value3)
		1'd0: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_19 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_20;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip20 <= 8'd0;
	case (a7ddrphy_bitslip2_value0)
		1'd0: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_20 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_21;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip22 <= 8'd0;
	case (a7ddrphy_bitslip2_value1)
		1'd0: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_21 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_22;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip30 <= 8'd0;
	case (a7ddrphy_bitslip3_value0)
		1'd0: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_22 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_23;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip32 <= 8'd0;
	case (a7ddrphy_bitslip3_value1)
		1'd0: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_23 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_24;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip40 <= 8'd0;
	case (a7ddrphy_bitslip4_value0)
		1'd0: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_24 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_25;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip42 <= 8'd0;
	case (a7ddrphy_bitslip4_value1)
		1'd0: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_25 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_26;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip50 <= 8'd0;
	case (a7ddrphy_bitslip5_value0)
		1'd0: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_26 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_27;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip52 <= 8'd0;
	case (a7ddrphy_bitslip5_value1)
		1'd0: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_27 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_28;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip60 <= 8'd0;
	case (a7ddrphy_bitslip6_value0)
		1'd0: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_28 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_29;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip62 <= 8'd0;
	case (a7ddrphy_bitslip6_value1)
		1'd0: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_29 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_30;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip70 <= 8'd0;
	case (a7ddrphy_bitslip7_value0)
		1'd0: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_30 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_31;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip72 <= 8'd0;
	case (a7ddrphy_bitslip7_value1)
		1'd0: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_31 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_32;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip80 <= 8'd0;
	case (a7ddrphy_bitslip8_value0)
		1'd0: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_32 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_33;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip82 <= 8'd0;
	case (a7ddrphy_bitslip8_value1)
		1'd0: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_33 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_34;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip90 <= 8'd0;
	case (a7ddrphy_bitslip9_value0)
		1'd0: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_34 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_35;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip92 <= 8'd0;
	case (a7ddrphy_bitslip9_value1)
		1'd0: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_35 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_36;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip100 <= 8'd0;
	case (a7ddrphy_bitslip10_value0)
		1'd0: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_36 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_37;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip102 <= 8'd0;
	case (a7ddrphy_bitslip10_value1)
		1'd0: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_37 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_38;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip110 <= 8'd0;
	case (a7ddrphy_bitslip11_value0)
		1'd0: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_38 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_39;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip112 <= 8'd0;
	case (a7ddrphy_bitslip11_value1)
		1'd0: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_39 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_40;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip120 <= 8'd0;
	case (a7ddrphy_bitslip12_value0)
		1'd0: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_40 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_41;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip122 <= 8'd0;
	case (a7ddrphy_bitslip12_value1)
		1'd0: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_41 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_42;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip130 <= 8'd0;
	case (a7ddrphy_bitslip13_value0)
		1'd0: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_42 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_43;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip132 <= 8'd0;
	case (a7ddrphy_bitslip13_value1)
		1'd0: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_43 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_44;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip140 <= 8'd0;
	case (a7ddrphy_bitslip14_value0)
		1'd0: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_44 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_45;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip142 <= 8'd0;
	case (a7ddrphy_bitslip14_value1)
		1'd0: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_45 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_46;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip150 <= 8'd0;
	case (a7ddrphy_bitslip15_value0)
		1'd0: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_46 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_47;
// synthesis translate_on
always @(*) begin
	a7ddrphy_bitslip152 <= 8'd0;
	case (a7ddrphy_bitslip15_value1)
		1'd0: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[8:1];
		end
		1'd1: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[9:2];
		end
		2'd2: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[10:3];
		end
		2'd3: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[11:4];
		end
		3'd4: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[12:5];
		end
		3'd5: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[13:6];
		end
		3'd6: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[14:7];
		end
		3'd7: begin
			a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[15:8];
		end
	endcase
// synthesis translate_off
	dummy_d_47 = dummy_s;
// synthesis translate_on
end
assign a7ddrphy_dfi_p0_address = sdram_master_p0_address;
assign a7ddrphy_dfi_p0_bank = sdram_master_p0_bank;
assign a7ddrphy_dfi_p0_cas_n = sdram_master_p0_cas_n;
assign a7ddrphy_dfi_p0_cs_n = sdram_master_p0_cs_n;
assign a7ddrphy_dfi_p0_ras_n = sdram_master_p0_ras_n;
assign a7ddrphy_dfi_p0_we_n = sdram_master_p0_we_n;
assign a7ddrphy_dfi_p0_cke = sdram_master_p0_cke;
assign a7ddrphy_dfi_p0_odt = sdram_master_p0_odt;
assign a7ddrphy_dfi_p0_reset_n = sdram_master_p0_reset_n;
assign a7ddrphy_dfi_p0_act_n = sdram_master_p0_act_n;
assign a7ddrphy_dfi_p0_wrdata = sdram_master_p0_wrdata;
assign a7ddrphy_dfi_p0_wrdata_en = sdram_master_p0_wrdata_en;
assign a7ddrphy_dfi_p0_wrdata_mask = sdram_master_p0_wrdata_mask;
assign a7ddrphy_dfi_p0_rddata_en = sdram_master_p0_rddata_en;
assign sdram_master_p0_rddata = a7ddrphy_dfi_p0_rddata;
assign sdram_master_p0_rddata_valid = a7ddrphy_dfi_p0_rddata_valid;
assign a7ddrphy_dfi_p1_address = sdram_master_p1_address;
assign a7ddrphy_dfi_p1_bank = sdram_master_p1_bank;
assign a7ddrphy_dfi_p1_cas_n = sdram_master_p1_cas_n;
assign a7ddrphy_dfi_p1_cs_n = sdram_master_p1_cs_n;
assign a7ddrphy_dfi_p1_ras_n = sdram_master_p1_ras_n;
assign a7ddrphy_dfi_p1_we_n = sdram_master_p1_we_n;
assign a7ddrphy_dfi_p1_cke = sdram_master_p1_cke;
assign a7ddrphy_dfi_p1_odt = sdram_master_p1_odt;
assign a7ddrphy_dfi_p1_reset_n = sdram_master_p1_reset_n;
assign a7ddrphy_dfi_p1_act_n = sdram_master_p1_act_n;
assign a7ddrphy_dfi_p1_wrdata = sdram_master_p1_wrdata;
assign a7ddrphy_dfi_p1_wrdata_en = sdram_master_p1_wrdata_en;
assign a7ddrphy_dfi_p1_wrdata_mask = sdram_master_p1_wrdata_mask;
assign a7ddrphy_dfi_p1_rddata_en = sdram_master_p1_rddata_en;
assign sdram_master_p1_rddata = a7ddrphy_dfi_p1_rddata;
assign sdram_master_p1_rddata_valid = a7ddrphy_dfi_p1_rddata_valid;
assign sdram_slave_p0_address = sdram_dfi_p0_address;
assign sdram_slave_p0_bank = sdram_dfi_p0_bank;
assign sdram_slave_p0_cas_n = sdram_dfi_p0_cas_n;
assign sdram_slave_p0_cs_n = sdram_dfi_p0_cs_n;
assign sdram_slave_p0_ras_n = sdram_dfi_p0_ras_n;
assign sdram_slave_p0_we_n = sdram_dfi_p0_we_n;
assign sdram_slave_p0_cke = sdram_dfi_p0_cke;
assign sdram_slave_p0_odt = sdram_dfi_p0_odt;
assign sdram_slave_p0_reset_n = sdram_dfi_p0_reset_n;
assign sdram_slave_p0_act_n = sdram_dfi_p0_act_n;
assign sdram_slave_p0_wrdata = sdram_dfi_p0_wrdata;
assign sdram_slave_p0_wrdata_en = sdram_dfi_p0_wrdata_en;
assign sdram_slave_p0_wrdata_mask = sdram_dfi_p0_wrdata_mask;
assign sdram_slave_p0_rddata_en = sdram_dfi_p0_rddata_en;
assign sdram_dfi_p0_rddata = sdram_slave_p0_rddata;
assign sdram_dfi_p0_rddata_valid = sdram_slave_p0_rddata_valid;
assign sdram_slave_p1_address = sdram_dfi_p1_address;
assign sdram_slave_p1_bank = sdram_dfi_p1_bank;
assign sdram_slave_p1_cas_n = sdram_dfi_p1_cas_n;
assign sdram_slave_p1_cs_n = sdram_dfi_p1_cs_n;
assign sdram_slave_p1_ras_n = sdram_dfi_p1_ras_n;
assign sdram_slave_p1_we_n = sdram_dfi_p1_we_n;
assign sdram_slave_p1_cke = sdram_dfi_p1_cke;
assign sdram_slave_p1_odt = sdram_dfi_p1_odt;
assign sdram_slave_p1_reset_n = sdram_dfi_p1_reset_n;
assign sdram_slave_p1_act_n = sdram_dfi_p1_act_n;
assign sdram_slave_p1_wrdata = sdram_dfi_p1_wrdata;
assign sdram_slave_p1_wrdata_en = sdram_dfi_p1_wrdata_en;
assign sdram_slave_p1_wrdata_mask = sdram_dfi_p1_wrdata_mask;
assign sdram_slave_p1_rddata_en = sdram_dfi_p1_rddata_en;
assign sdram_dfi_p1_rddata = sdram_slave_p1_rddata;
assign sdram_dfi_p1_rddata_valid = sdram_slave_p1_rddata_valid;

// synthesis translate_off
reg dummy_d_48;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_wrdata_en <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p1_wrdata_en <= sdram_slave_p1_wrdata_en;
	end else begin
		sdram_master_p1_wrdata_en <= sdram_inti_p1_wrdata_en;
	end
// synthesis translate_off
	dummy_d_48 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_49;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_wrdata_mask <= 4'd0;
	if (sdram_sel) begin
		sdram_master_p1_wrdata_mask <= sdram_slave_p1_wrdata_mask;
	end else begin
		sdram_master_p1_wrdata_mask <= sdram_inti_p1_wrdata_mask;
	end
// synthesis translate_off
	dummy_d_49 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_50;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_rddata_en <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p1_rddata_en <= sdram_slave_p1_rddata_en;
	end else begin
		sdram_master_p1_rddata_en <= sdram_inti_p1_rddata_en;
	end
// synthesis translate_off
	dummy_d_50 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_51;
// synthesis translate_on
always @(*) begin
	sdram_slave_p0_rddata <= 32'd0;
	if (sdram_sel) begin
		sdram_slave_p0_rddata <= sdram_master_p0_rddata;
	end else begin
	end
// synthesis translate_off
	dummy_d_51 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_52;
// synthesis translate_on
always @(*) begin
	sdram_slave_p0_rddata_valid <= 1'd0;
	if (sdram_sel) begin
		sdram_slave_p0_rddata_valid <= sdram_master_p0_rddata_valid;
	end else begin
	end
// synthesis translate_off
	dummy_d_52 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_53;
// synthesis translate_on
always @(*) begin
	sdram_slave_p1_rddata <= 32'd0;
	if (sdram_sel) begin
		sdram_slave_p1_rddata <= sdram_master_p1_rddata;
	end else begin
	end
// synthesis translate_off
	dummy_d_53 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_54;
// synthesis translate_on
always @(*) begin
	sdram_slave_p1_rddata_valid <= 1'd0;
	if (sdram_sel) begin
		sdram_slave_p1_rddata_valid <= sdram_master_p1_rddata_valid;
	end else begin
	end
// synthesis translate_off
	dummy_d_54 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_55;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_address <= 13'd0;
	if (sdram_sel) begin
		sdram_master_p0_address <= sdram_slave_p0_address;
	end else begin
		sdram_master_p0_address <= sdram_inti_p0_address;
	end
// synthesis translate_off
	dummy_d_55 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_56;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_bank <= 3'd0;
	if (sdram_sel) begin
		sdram_master_p0_bank <= sdram_slave_p0_bank;
	end else begin
		sdram_master_p0_bank <= sdram_inti_p0_bank;
	end
// synthesis translate_off
	dummy_d_56 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_57;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_cas_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p0_cas_n <= sdram_slave_p0_cas_n;
	end else begin
		sdram_master_p0_cas_n <= sdram_inti_p0_cas_n;
	end
// synthesis translate_off
	dummy_d_57 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_58;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_cs_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p0_cs_n <= sdram_slave_p0_cs_n;
	end else begin
		sdram_master_p0_cs_n <= sdram_inti_p0_cs_n;
	end
// synthesis translate_off
	dummy_d_58 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_59;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_ras_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p0_ras_n <= sdram_slave_p0_ras_n;
	end else begin
		sdram_master_p0_ras_n <= sdram_inti_p0_ras_n;
	end
// synthesis translate_off
	dummy_d_59 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_60;
// synthesis translate_on
always @(*) begin
	sdram_inti_p0_rddata <= 32'd0;
	if (sdram_sel) begin
	end else begin
		sdram_inti_p0_rddata <= sdram_master_p0_rddata;
	end
// synthesis translate_off
	dummy_d_60 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_61;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_we_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p0_we_n <= sdram_slave_p0_we_n;
	end else begin
		sdram_master_p0_we_n <= sdram_inti_p0_we_n;
	end
// synthesis translate_off
	dummy_d_61 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_62;
// synthesis translate_on
always @(*) begin
	sdram_inti_p0_rddata_valid <= 1'd0;
	if (sdram_sel) begin
	end else begin
		sdram_inti_p0_rddata_valid <= sdram_master_p0_rddata_valid;
	end
// synthesis translate_off
	dummy_d_62 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_63;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_cke <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p0_cke <= sdram_slave_p0_cke;
	end else begin
		sdram_master_p0_cke <= sdram_inti_p0_cke;
	end
// synthesis translate_off
	dummy_d_63 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_64;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_odt <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p0_odt <= sdram_slave_p0_odt;
	end else begin
		sdram_master_p0_odt <= sdram_inti_p0_odt;
	end
// synthesis translate_off
	dummy_d_64 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_65;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_reset_n <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p0_reset_n <= sdram_slave_p0_reset_n;
	end else begin
		sdram_master_p0_reset_n <= sdram_inti_p0_reset_n;
	end
// synthesis translate_off
	dummy_d_65 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_66;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_act_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p0_act_n <= sdram_slave_p0_act_n;
	end else begin
		sdram_master_p0_act_n <= sdram_inti_p0_act_n;
	end
// synthesis translate_off
	dummy_d_66 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_67;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_wrdata <= 32'd0;
	if (sdram_sel) begin
		sdram_master_p0_wrdata <= sdram_slave_p0_wrdata;
	end else begin
		sdram_master_p0_wrdata <= sdram_inti_p0_wrdata;
	end
// synthesis translate_off
	dummy_d_67 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_68;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_wrdata_en <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p0_wrdata_en <= sdram_slave_p0_wrdata_en;
	end else begin
		sdram_master_p0_wrdata_en <= sdram_inti_p0_wrdata_en;
	end
// synthesis translate_off
	dummy_d_68 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_69;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_wrdata_mask <= 4'd0;
	if (sdram_sel) begin
		sdram_master_p0_wrdata_mask <= sdram_slave_p0_wrdata_mask;
	end else begin
		sdram_master_p0_wrdata_mask <= sdram_inti_p0_wrdata_mask;
	end
// synthesis translate_off
	dummy_d_69 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_70;
// synthesis translate_on
always @(*) begin
	sdram_master_p0_rddata_en <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p0_rddata_en <= sdram_slave_p0_rddata_en;
	end else begin
		sdram_master_p0_rddata_en <= sdram_inti_p0_rddata_en;
	end
// synthesis translate_off
	dummy_d_70 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_71;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_address <= 13'd0;
	if (sdram_sel) begin
		sdram_master_p1_address <= sdram_slave_p1_address;
	end else begin
		sdram_master_p1_address <= sdram_inti_p1_address;
	end
// synthesis translate_off
	dummy_d_71 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_72;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_bank <= 3'd0;
	if (sdram_sel) begin
		sdram_master_p1_bank <= sdram_slave_p1_bank;
	end else begin
		sdram_master_p1_bank <= sdram_inti_p1_bank;
	end
// synthesis translate_off
	dummy_d_72 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_73;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_cas_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p1_cas_n <= sdram_slave_p1_cas_n;
	end else begin
		sdram_master_p1_cas_n <= sdram_inti_p1_cas_n;
	end
// synthesis translate_off
	dummy_d_73 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_74;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_cs_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p1_cs_n <= sdram_slave_p1_cs_n;
	end else begin
		sdram_master_p1_cs_n <= sdram_inti_p1_cs_n;
	end
// synthesis translate_off
	dummy_d_74 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_75;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_ras_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p1_ras_n <= sdram_slave_p1_ras_n;
	end else begin
		sdram_master_p1_ras_n <= sdram_inti_p1_ras_n;
	end
// synthesis translate_off
	dummy_d_75 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_76;
// synthesis translate_on
always @(*) begin
	sdram_inti_p1_rddata <= 32'd0;
	if (sdram_sel) begin
	end else begin
		sdram_inti_p1_rddata <= sdram_master_p1_rddata;
	end
// synthesis translate_off
	dummy_d_76 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_77;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_we_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p1_we_n <= sdram_slave_p1_we_n;
	end else begin
		sdram_master_p1_we_n <= sdram_inti_p1_we_n;
	end
// synthesis translate_off
	dummy_d_77 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_78;
// synthesis translate_on
always @(*) begin
	sdram_inti_p1_rddata_valid <= 1'd0;
	if (sdram_sel) begin
	end else begin
		sdram_inti_p1_rddata_valid <= sdram_master_p1_rddata_valid;
	end
// synthesis translate_off
	dummy_d_78 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_79;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_cke <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p1_cke <= sdram_slave_p1_cke;
	end else begin
		sdram_master_p1_cke <= sdram_inti_p1_cke;
	end
// synthesis translate_off
	dummy_d_79 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_80;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_odt <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p1_odt <= sdram_slave_p1_odt;
	end else begin
		sdram_master_p1_odt <= sdram_inti_p1_odt;
	end
// synthesis translate_off
	dummy_d_80 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_81;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_reset_n <= 1'd0;
	if (sdram_sel) begin
		sdram_master_p1_reset_n <= sdram_slave_p1_reset_n;
	end else begin
		sdram_master_p1_reset_n <= sdram_inti_p1_reset_n;
	end
// synthesis translate_off
	dummy_d_81 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_82;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_act_n <= 1'd1;
	if (sdram_sel) begin
		sdram_master_p1_act_n <= sdram_slave_p1_act_n;
	end else begin
		sdram_master_p1_act_n <= sdram_inti_p1_act_n;
	end
// synthesis translate_off
	dummy_d_82 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_83;
// synthesis translate_on
always @(*) begin
	sdram_master_p1_wrdata <= 32'd0;
	if (sdram_sel) begin
		sdram_master_p1_wrdata <= sdram_slave_p1_wrdata;
	end else begin
		sdram_master_p1_wrdata <= sdram_inti_p1_wrdata;
	end
// synthesis translate_off
	dummy_d_83 = dummy_s;
// synthesis translate_on
end
assign sdram_inti_p0_cke = sdram_cke;
assign sdram_inti_p1_cke = sdram_cke;
assign sdram_inti_p0_odt = sdram_odt;
assign sdram_inti_p1_odt = sdram_odt;
assign sdram_inti_p0_reset_n = sdram_reset_n;
assign sdram_inti_p1_reset_n = sdram_reset_n;

// synthesis translate_off
reg dummy_d_84;
// synthesis translate_on
always @(*) begin
	sdram_inti_p0_we_n <= 1'd1;
	if (sdram_phaseinjector0_command_issue_re) begin
		sdram_inti_p0_we_n <= (~sdram_phaseinjector0_command_storage[1]);
	end else begin
		sdram_inti_p0_we_n <= 1'd1;
	end
// synthesis translate_off
	dummy_d_84 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_85;
// synthesis translate_on
always @(*) begin
	sdram_inti_p0_cas_n <= 1'd1;
	if (sdram_phaseinjector0_command_issue_re) begin
		sdram_inti_p0_cas_n <= (~sdram_phaseinjector0_command_storage[2]);
	end else begin
		sdram_inti_p0_cas_n <= 1'd1;
	end
// synthesis translate_off
	dummy_d_85 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_86;
// synthesis translate_on
always @(*) begin
	sdram_inti_p0_cs_n <= 1'd1;
	if (sdram_phaseinjector0_command_issue_re) begin
		sdram_inti_p0_cs_n <= {1{(~sdram_phaseinjector0_command_storage[0])}};
	end else begin
		sdram_inti_p0_cs_n <= {1{1'd1}};
	end
// synthesis translate_off
	dummy_d_86 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_87;
// synthesis translate_on
always @(*) begin
	sdram_inti_p0_ras_n <= 1'd1;
	if (sdram_phaseinjector0_command_issue_re) begin
		sdram_inti_p0_ras_n <= (~sdram_phaseinjector0_command_storage[3]);
	end else begin
		sdram_inti_p0_ras_n <= 1'd1;
	end
// synthesis translate_off
	dummy_d_87 = dummy_s;
// synthesis translate_on
end
assign sdram_inti_p0_address = sdram_phaseinjector0_address_storage;
assign sdram_inti_p0_bank = sdram_phaseinjector0_baddress_storage;
assign sdram_inti_p0_wrdata_en = (sdram_phaseinjector0_command_issue_re & sdram_phaseinjector0_command_storage[4]);
assign sdram_inti_p0_rddata_en = (sdram_phaseinjector0_command_issue_re & sdram_phaseinjector0_command_storage[5]);
assign sdram_inti_p0_wrdata = sdram_phaseinjector0_wrdata_storage;
assign sdram_inti_p0_wrdata_mask = 1'd0;

// synthesis translate_off
reg dummy_d_88;
// synthesis translate_on
always @(*) begin
	sdram_inti_p1_we_n <= 1'd1;
	if (sdram_phaseinjector1_command_issue_re) begin
		sdram_inti_p1_we_n <= (~sdram_phaseinjector1_command_storage[1]);
	end else begin
		sdram_inti_p1_we_n <= 1'd1;
	end
// synthesis translate_off
	dummy_d_88 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_89;
// synthesis translate_on
always @(*) begin
	sdram_inti_p1_cas_n <= 1'd1;
	if (sdram_phaseinjector1_command_issue_re) begin
		sdram_inti_p1_cas_n <= (~sdram_phaseinjector1_command_storage[2]);
	end else begin
		sdram_inti_p1_cas_n <= 1'd1;
	end
// synthesis translate_off
	dummy_d_89 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_90;
// synthesis translate_on
always @(*) begin
	sdram_inti_p1_cs_n <= 1'd1;
	if (sdram_phaseinjector1_command_issue_re) begin
		sdram_inti_p1_cs_n <= {1{(~sdram_phaseinjector1_command_storage[0])}};
	end else begin
		sdram_inti_p1_cs_n <= {1{1'd1}};
	end
// synthesis translate_off
	dummy_d_90 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_91;
// synthesis translate_on
always @(*) begin
	sdram_inti_p1_ras_n <= 1'd1;
	if (sdram_phaseinjector1_command_issue_re) begin
		sdram_inti_p1_ras_n <= (~sdram_phaseinjector1_command_storage[3]);
	end else begin
		sdram_inti_p1_ras_n <= 1'd1;
	end
// synthesis translate_off
	dummy_d_91 = dummy_s;
// synthesis translate_on
end
assign sdram_inti_p1_address = sdram_phaseinjector1_address_storage;
assign sdram_inti_p1_bank = sdram_phaseinjector1_baddress_storage;
assign sdram_inti_p1_wrdata_en = (sdram_phaseinjector1_command_issue_re & sdram_phaseinjector1_command_storage[4]);
assign sdram_inti_p1_rddata_en = (sdram_phaseinjector1_command_issue_re & sdram_phaseinjector1_command_storage[5]);
assign sdram_inti_p1_wrdata = sdram_phaseinjector1_wrdata_storage;
assign sdram_inti_p1_wrdata_mask = 1'd0;
assign sdram_bankmachine0_req_valid = sdram_interface_bank0_valid;
assign sdram_interface_bank0_ready = sdram_bankmachine0_req_ready;
assign sdram_bankmachine0_req_we = sdram_interface_bank0_we;
assign sdram_bankmachine0_req_addr = sdram_interface_bank0_addr;
assign sdram_interface_bank0_lock = sdram_bankmachine0_req_lock;
assign sdram_interface_bank0_wdata_ready = sdram_bankmachine0_req_wdata_ready;
assign sdram_interface_bank0_rdata_valid = sdram_bankmachine0_req_rdata_valid;
assign sdram_bankmachine1_req_valid = sdram_interface_bank1_valid;
assign sdram_interface_bank1_ready = sdram_bankmachine1_req_ready;
assign sdram_bankmachine1_req_we = sdram_interface_bank1_we;
assign sdram_bankmachine1_req_addr = sdram_interface_bank1_addr;
assign sdram_interface_bank1_lock = sdram_bankmachine1_req_lock;
assign sdram_interface_bank1_wdata_ready = sdram_bankmachine1_req_wdata_ready;
assign sdram_interface_bank1_rdata_valid = sdram_bankmachine1_req_rdata_valid;
assign sdram_bankmachine2_req_valid = sdram_interface_bank2_valid;
assign sdram_interface_bank2_ready = sdram_bankmachine2_req_ready;
assign sdram_bankmachine2_req_we = sdram_interface_bank2_we;
assign sdram_bankmachine2_req_addr = sdram_interface_bank2_addr;
assign sdram_interface_bank2_lock = sdram_bankmachine2_req_lock;
assign sdram_interface_bank2_wdata_ready = sdram_bankmachine2_req_wdata_ready;
assign sdram_interface_bank2_rdata_valid = sdram_bankmachine2_req_rdata_valid;
assign sdram_bankmachine3_req_valid = sdram_interface_bank3_valid;
assign sdram_interface_bank3_ready = sdram_bankmachine3_req_ready;
assign sdram_bankmachine3_req_we = sdram_interface_bank3_we;
assign sdram_bankmachine3_req_addr = sdram_interface_bank3_addr;
assign sdram_interface_bank3_lock = sdram_bankmachine3_req_lock;
assign sdram_interface_bank3_wdata_ready = sdram_bankmachine3_req_wdata_ready;
assign sdram_interface_bank3_rdata_valid = sdram_bankmachine3_req_rdata_valid;
assign sdram_bankmachine4_req_valid = sdram_interface_bank4_valid;
assign sdram_interface_bank4_ready = sdram_bankmachine4_req_ready;
assign sdram_bankmachine4_req_we = sdram_interface_bank4_we;
assign sdram_bankmachine4_req_addr = sdram_interface_bank4_addr;
assign sdram_interface_bank4_lock = sdram_bankmachine4_req_lock;
assign sdram_interface_bank4_wdata_ready = sdram_bankmachine4_req_wdata_ready;
assign sdram_interface_bank4_rdata_valid = sdram_bankmachine4_req_rdata_valid;
assign sdram_bankmachine5_req_valid = sdram_interface_bank5_valid;
assign sdram_interface_bank5_ready = sdram_bankmachine5_req_ready;
assign sdram_bankmachine5_req_we = sdram_interface_bank5_we;
assign sdram_bankmachine5_req_addr = sdram_interface_bank5_addr;
assign sdram_interface_bank5_lock = sdram_bankmachine5_req_lock;
assign sdram_interface_bank5_wdata_ready = sdram_bankmachine5_req_wdata_ready;
assign sdram_interface_bank5_rdata_valid = sdram_bankmachine5_req_rdata_valid;
assign sdram_bankmachine6_req_valid = sdram_interface_bank6_valid;
assign sdram_interface_bank6_ready = sdram_bankmachine6_req_ready;
assign sdram_bankmachine6_req_we = sdram_interface_bank6_we;
assign sdram_bankmachine6_req_addr = sdram_interface_bank6_addr;
assign sdram_interface_bank6_lock = sdram_bankmachine6_req_lock;
assign sdram_interface_bank6_wdata_ready = sdram_bankmachine6_req_wdata_ready;
assign sdram_interface_bank6_rdata_valid = sdram_bankmachine6_req_rdata_valid;
assign sdram_bankmachine7_req_valid = sdram_interface_bank7_valid;
assign sdram_interface_bank7_ready = sdram_bankmachine7_req_ready;
assign sdram_bankmachine7_req_we = sdram_interface_bank7_we;
assign sdram_bankmachine7_req_addr = sdram_interface_bank7_addr;
assign sdram_interface_bank7_lock = sdram_bankmachine7_req_lock;
assign sdram_interface_bank7_wdata_ready = sdram_bankmachine7_req_wdata_ready;
assign sdram_interface_bank7_rdata_valid = sdram_bankmachine7_req_rdata_valid;
assign sdram_timer_wait = (~sdram_timer_done0);
assign sdram_postponer_req_i = sdram_timer_done0;
assign sdram_wants_refresh = sdram_postponer_req_o;
assign sdram_timer_done1 = (sdram_timer_count1 == 1'd0);
assign sdram_timer_done0 = sdram_timer_done1;
assign sdram_timer_count0 = sdram_timer_count1;
assign sdram_sequencer_start1 = (sdram_sequencer_start0 | (sdram_sequencer_count != 1'd0));
assign sdram_sequencer_done0 = (sdram_sequencer_done1 & (sdram_sequencer_count == 1'd0));

// synthesis translate_off
reg dummy_d_92;
// synthesis translate_on
always @(*) begin
	subfragments_refresher_next_state <= 2'd0;
	subfragments_refresher_next_state <= subfragments_refresher_state;
	case (subfragments_refresher_state)
		1'd1: begin
			if (sdram_cmd_ready) begin
				subfragments_refresher_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (sdram_sequencer_done0) begin
				subfragments_refresher_next_state <= 1'd0;
			end
		end
		default: begin
			if (1'd1) begin
				if (sdram_wants_refresh) begin
					subfragments_refresher_next_state <= 1'd1;
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_92 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_93;
// synthesis translate_on
always @(*) begin
	sdram_cmd_valid <= 1'd0;
	case (subfragments_refresher_state)
		1'd1: begin
			sdram_cmd_valid <= 1'd1;
		end
		2'd2: begin
			sdram_cmd_valid <= 1'd1;
			if (sdram_sequencer_done0) begin
				sdram_cmd_valid <= 1'd0;
			end
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_93 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_94;
// synthesis translate_on
always @(*) begin
	sdram_cmd_last <= 1'd0;
	case (subfragments_refresher_state)
		1'd1: begin
		end
		2'd2: begin
			if (sdram_sequencer_done0) begin
				sdram_cmd_last <= 1'd1;
			end
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_94 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_95;
// synthesis translate_on
always @(*) begin
	sdram_sequencer_start0 <= 1'd0;
	case (subfragments_refresher_state)
		1'd1: begin
			if (sdram_cmd_ready) begin
				sdram_sequencer_start0 <= 1'd1;
			end
		end
		2'd2: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_95 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine0_cmd_buffer_lookahead_sink_valid = sdram_bankmachine0_req_valid;
assign sdram_bankmachine0_req_ready = sdram_bankmachine0_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine0_req_we;
assign sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine0_req_addr;
assign sdram_bankmachine0_cmd_buffer_sink_valid = sdram_bankmachine0_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine0_cmd_buffer_lookahead_source_ready = sdram_bankmachine0_cmd_buffer_sink_ready;
assign sdram_bankmachine0_cmd_buffer_sink_first = sdram_bankmachine0_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine0_cmd_buffer_sink_last = sdram_bankmachine0_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine0_cmd_buffer_sink_payload_we = sdram_bankmachine0_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine0_cmd_buffer_sink_payload_addr = sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine0_cmd_buffer_source_ready = (sdram_bankmachine0_req_wdata_ready | sdram_bankmachine0_req_rdata_valid);
assign sdram_bankmachine0_req_lock = (sdram_bankmachine0_cmd_buffer_lookahead_source_valid | sdram_bankmachine0_cmd_buffer_source_valid);
assign sdram_bankmachine0_row_hit = (sdram_bankmachine0_row == sdram_bankmachine0_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine0_cmd_payload_ba = 1'd0;

// synthesis translate_off
reg dummy_d_96;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine0_row_col_n_addr_sel) begin
		sdram_bankmachine0_cmd_payload_a <= sdram_bankmachine0_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine0_cmd_payload_a <= ((sdram_bankmachine0_auto_precharge <<< 4'd10) | {sdram_bankmachine0_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_96 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine0_twtpcon_valid = ((sdram_bankmachine0_cmd_valid & sdram_bankmachine0_cmd_ready) & sdram_bankmachine0_cmd_payload_is_write);
assign sdram_bankmachine0_trccon_valid = ((sdram_bankmachine0_cmd_valid & sdram_bankmachine0_cmd_ready) & sdram_bankmachine0_row_open);
assign sdram_bankmachine0_trascon_valid = ((sdram_bankmachine0_cmd_valid & sdram_bankmachine0_cmd_ready) & sdram_bankmachine0_row_open);

// synthesis translate_off
reg dummy_d_97;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_auto_precharge <= 1'd0;
	if ((sdram_bankmachine0_cmd_buffer_lookahead_source_valid & sdram_bankmachine0_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine0_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine0_auto_precharge <= (sdram_bankmachine0_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_97 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_din = {sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
assign {sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
assign {sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
assign {sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout;
assign sdram_bankmachine0_cmd_buffer_lookahead_sink_ready = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable;
assign sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we = sdram_bankmachine0_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine0_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine0_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine0_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine0_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine0_cmd_buffer_lookahead_source_valid = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable;
assign sdram_bankmachine0_cmd_buffer_lookahead_source_first = sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine0_cmd_buffer_lookahead_source_last = sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine0_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine0_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine0_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_re = sdram_bankmachine0_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_98;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine0_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine0_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine0_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_98 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_din;
assign sdram_bankmachine0_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we & (sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable | sdram_bankmachine0_cmd_buffer_lookahead_replace));
assign sdram_bankmachine0_cmd_buffer_lookahead_do_read = (sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable & sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_re);
assign sdram_bankmachine0_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine0_cmd_buffer_lookahead_consume;
assign sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_dout = sdram_bankmachine0_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable = (sdram_bankmachine0_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_readable = (sdram_bankmachine0_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine0_cmd_buffer_sink_ready = ((~sdram_bankmachine0_cmd_buffer_source_valid) | sdram_bankmachine0_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_99;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine0_next_state <= 3'd0;
	subfragments_bankmachine0_next_state <= subfragments_bankmachine0_state;
	case (subfragments_bankmachine0_state)
		1'd1: begin
			if ((sdram_bankmachine0_twtpcon_ready & sdram_bankmachine0_trascon_ready)) begin
				if (sdram_bankmachine0_cmd_ready) begin
					subfragments_bankmachine0_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine0_twtpcon_ready & sdram_bankmachine0_trascon_ready)) begin
				subfragments_bankmachine0_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine0_trccon_ready) begin
				if (sdram_bankmachine0_cmd_ready) begin
					subfragments_bankmachine0_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine0_refresh_req)) begin
				subfragments_bankmachine0_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine0_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine0_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
				subfragments_bankmachine0_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							if ((sdram_bankmachine0_cmd_ready & sdram_bankmachine0_auto_precharge)) begin
								subfragments_bankmachine0_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine0_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine0_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_99 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_100;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine0_twtpcon_ready) begin
				sdram_bankmachine0_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_100 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_101;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_valid <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
			if ((sdram_bankmachine0_twtpcon_ready & sdram_bankmachine0_trascon_ready)) begin
				sdram_bankmachine0_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine0_trccon_ready) begin
				sdram_bankmachine0_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							sdram_bankmachine0_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_101 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_102;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_row_open <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine0_trccon_ready) begin
				sdram_bankmachine0_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_102 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_103;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_row_close <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
			sdram_bankmachine0_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine0_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine0_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_103 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_104;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							sdram_bankmachine0_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_104 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_105;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
			if ((sdram_bankmachine0_twtpcon_ready & sdram_bankmachine0_trascon_ready)) begin
				sdram_bankmachine0_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine0_trccon_ready) begin
				sdram_bankmachine0_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_105 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_106;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
			if ((sdram_bankmachine0_twtpcon_ready & sdram_bankmachine0_trascon_ready)) begin
				sdram_bankmachine0_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							if (sdram_bankmachine0_cmd_buffer_source_payload_we) begin
								sdram_bankmachine0_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_106 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_107;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine0_trccon_ready) begin
				sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_107 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_108;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
			if ((sdram_bankmachine0_twtpcon_ready & sdram_bankmachine0_trascon_ready)) begin
				sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine0_trccon_ready) begin
				sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_108 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_109;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							if (sdram_bankmachine0_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_109 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_110;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							if (sdram_bankmachine0_cmd_buffer_source_payload_we) begin
								sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_110 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_111;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							if (sdram_bankmachine0_cmd_buffer_source_payload_we) begin
								sdram_bankmachine0_req_wdata_ready <= sdram_bankmachine0_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_111 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_112;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine0_refresh_req) begin
			end else begin
				if (sdram_bankmachine0_cmd_buffer_source_valid) begin
					if (sdram_bankmachine0_row_opened) begin
						if (sdram_bankmachine0_row_hit) begin
							if (sdram_bankmachine0_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine0_req_rdata_valid <= sdram_bankmachine0_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_112 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine1_cmd_buffer_lookahead_sink_valid = sdram_bankmachine1_req_valid;
assign sdram_bankmachine1_req_ready = sdram_bankmachine1_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine1_req_we;
assign sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine1_req_addr;
assign sdram_bankmachine1_cmd_buffer_sink_valid = sdram_bankmachine1_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine1_cmd_buffer_lookahead_source_ready = sdram_bankmachine1_cmd_buffer_sink_ready;
assign sdram_bankmachine1_cmd_buffer_sink_first = sdram_bankmachine1_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine1_cmd_buffer_sink_last = sdram_bankmachine1_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine1_cmd_buffer_sink_payload_we = sdram_bankmachine1_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine1_cmd_buffer_sink_payload_addr = sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine1_cmd_buffer_source_ready = (sdram_bankmachine1_req_wdata_ready | sdram_bankmachine1_req_rdata_valid);
assign sdram_bankmachine1_req_lock = (sdram_bankmachine1_cmd_buffer_lookahead_source_valid | sdram_bankmachine1_cmd_buffer_source_valid);
assign sdram_bankmachine1_row_hit = (sdram_bankmachine1_row == sdram_bankmachine1_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine1_cmd_payload_ba = 1'd1;

// synthesis translate_off
reg dummy_d_113;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine1_row_col_n_addr_sel) begin
		sdram_bankmachine1_cmd_payload_a <= sdram_bankmachine1_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine1_cmd_payload_a <= ((sdram_bankmachine1_auto_precharge <<< 4'd10) | {sdram_bankmachine1_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_113 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine1_twtpcon_valid = ((sdram_bankmachine1_cmd_valid & sdram_bankmachine1_cmd_ready) & sdram_bankmachine1_cmd_payload_is_write);
assign sdram_bankmachine1_trccon_valid = ((sdram_bankmachine1_cmd_valid & sdram_bankmachine1_cmd_ready) & sdram_bankmachine1_row_open);
assign sdram_bankmachine1_trascon_valid = ((sdram_bankmachine1_cmd_valid & sdram_bankmachine1_cmd_ready) & sdram_bankmachine1_row_open);

// synthesis translate_off
reg dummy_d_114;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_auto_precharge <= 1'd0;
	if ((sdram_bankmachine1_cmd_buffer_lookahead_source_valid & sdram_bankmachine1_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine1_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine1_auto_precharge <= (sdram_bankmachine1_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_114 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_din = {sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
assign {sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
assign {sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
assign {sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout;
assign sdram_bankmachine1_cmd_buffer_lookahead_sink_ready = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable;
assign sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we = sdram_bankmachine1_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine1_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine1_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine1_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine1_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine1_cmd_buffer_lookahead_source_valid = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable;
assign sdram_bankmachine1_cmd_buffer_lookahead_source_first = sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine1_cmd_buffer_lookahead_source_last = sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine1_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine1_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine1_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_re = sdram_bankmachine1_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_115;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine1_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine1_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine1_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_115 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_din;
assign sdram_bankmachine1_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we & (sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable | sdram_bankmachine1_cmd_buffer_lookahead_replace));
assign sdram_bankmachine1_cmd_buffer_lookahead_do_read = (sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable & sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_re);
assign sdram_bankmachine1_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine1_cmd_buffer_lookahead_consume;
assign sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_dout = sdram_bankmachine1_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable = (sdram_bankmachine1_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_readable = (sdram_bankmachine1_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine1_cmd_buffer_sink_ready = ((~sdram_bankmachine1_cmd_buffer_source_valid) | sdram_bankmachine1_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_116;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine1_next_state <= 3'd0;
	subfragments_bankmachine1_next_state <= subfragments_bankmachine1_state;
	case (subfragments_bankmachine1_state)
		1'd1: begin
			if ((sdram_bankmachine1_twtpcon_ready & sdram_bankmachine1_trascon_ready)) begin
				if (sdram_bankmachine1_cmd_ready) begin
					subfragments_bankmachine1_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine1_twtpcon_ready & sdram_bankmachine1_trascon_ready)) begin
				subfragments_bankmachine1_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine1_trccon_ready) begin
				if (sdram_bankmachine1_cmd_ready) begin
					subfragments_bankmachine1_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine1_refresh_req)) begin
				subfragments_bankmachine1_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine1_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine1_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
				subfragments_bankmachine1_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							if ((sdram_bankmachine1_cmd_ready & sdram_bankmachine1_auto_precharge)) begin
								subfragments_bankmachine1_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine1_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine1_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_116 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_117;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							if (sdram_bankmachine1_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_117 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_118;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							if (sdram_bankmachine1_cmd_buffer_source_payload_we) begin
								sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_118 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_119;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							if (sdram_bankmachine1_cmd_buffer_source_payload_we) begin
								sdram_bankmachine1_req_wdata_ready <= sdram_bankmachine1_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_119 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_120;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							if (sdram_bankmachine1_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine1_req_rdata_valid <= sdram_bankmachine1_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_120 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_121;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine1_twtpcon_ready) begin
				sdram_bankmachine1_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_121 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_122;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_valid <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
			if ((sdram_bankmachine1_twtpcon_ready & sdram_bankmachine1_trascon_ready)) begin
				sdram_bankmachine1_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine1_trccon_ready) begin
				sdram_bankmachine1_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							sdram_bankmachine1_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_122 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_123;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_row_open <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine1_trccon_ready) begin
				sdram_bankmachine1_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_123 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_124;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_row_close <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
			sdram_bankmachine1_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine1_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine1_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_124 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_125;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							sdram_bankmachine1_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_125 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_126;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
			if ((sdram_bankmachine1_twtpcon_ready & sdram_bankmachine1_trascon_ready)) begin
				sdram_bankmachine1_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine1_trccon_ready) begin
				sdram_bankmachine1_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_126 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_127;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
			if ((sdram_bankmachine1_twtpcon_ready & sdram_bankmachine1_trascon_ready)) begin
				sdram_bankmachine1_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine1_refresh_req) begin
			end else begin
				if (sdram_bankmachine1_cmd_buffer_source_valid) begin
					if (sdram_bankmachine1_row_opened) begin
						if (sdram_bankmachine1_row_hit) begin
							if (sdram_bankmachine1_cmd_buffer_source_payload_we) begin
								sdram_bankmachine1_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_127 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_128;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine1_trccon_ready) begin
				sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_128 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_129;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine1_state)
		1'd1: begin
			if ((sdram_bankmachine1_twtpcon_ready & sdram_bankmachine1_trascon_ready)) begin
				sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine1_trccon_ready) begin
				sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_129 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine2_cmd_buffer_lookahead_sink_valid = sdram_bankmachine2_req_valid;
assign sdram_bankmachine2_req_ready = sdram_bankmachine2_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine2_req_we;
assign sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine2_req_addr;
assign sdram_bankmachine2_cmd_buffer_sink_valid = sdram_bankmachine2_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine2_cmd_buffer_lookahead_source_ready = sdram_bankmachine2_cmd_buffer_sink_ready;
assign sdram_bankmachine2_cmd_buffer_sink_first = sdram_bankmachine2_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine2_cmd_buffer_sink_last = sdram_bankmachine2_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine2_cmd_buffer_sink_payload_we = sdram_bankmachine2_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine2_cmd_buffer_sink_payload_addr = sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine2_cmd_buffer_source_ready = (sdram_bankmachine2_req_wdata_ready | sdram_bankmachine2_req_rdata_valid);
assign sdram_bankmachine2_req_lock = (sdram_bankmachine2_cmd_buffer_lookahead_source_valid | sdram_bankmachine2_cmd_buffer_source_valid);
assign sdram_bankmachine2_row_hit = (sdram_bankmachine2_row == sdram_bankmachine2_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine2_cmd_payload_ba = 2'd2;

// synthesis translate_off
reg dummy_d_130;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine2_row_col_n_addr_sel) begin
		sdram_bankmachine2_cmd_payload_a <= sdram_bankmachine2_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine2_cmd_payload_a <= ((sdram_bankmachine2_auto_precharge <<< 4'd10) | {sdram_bankmachine2_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_130 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine2_twtpcon_valid = ((sdram_bankmachine2_cmd_valid & sdram_bankmachine2_cmd_ready) & sdram_bankmachine2_cmd_payload_is_write);
assign sdram_bankmachine2_trccon_valid = ((sdram_bankmachine2_cmd_valid & sdram_bankmachine2_cmd_ready) & sdram_bankmachine2_row_open);
assign sdram_bankmachine2_trascon_valid = ((sdram_bankmachine2_cmd_valid & sdram_bankmachine2_cmd_ready) & sdram_bankmachine2_row_open);

// synthesis translate_off
reg dummy_d_131;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_auto_precharge <= 1'd0;
	if ((sdram_bankmachine2_cmd_buffer_lookahead_source_valid & sdram_bankmachine2_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine2_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine2_auto_precharge <= (sdram_bankmachine2_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_131 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_din = {sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
assign {sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
assign {sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
assign {sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout;
assign sdram_bankmachine2_cmd_buffer_lookahead_sink_ready = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable;
assign sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we = sdram_bankmachine2_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine2_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine2_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine2_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine2_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine2_cmd_buffer_lookahead_source_valid = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable;
assign sdram_bankmachine2_cmd_buffer_lookahead_source_first = sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine2_cmd_buffer_lookahead_source_last = sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine2_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine2_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine2_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_re = sdram_bankmachine2_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_132;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine2_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine2_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine2_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_132 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_din;
assign sdram_bankmachine2_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we & (sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable | sdram_bankmachine2_cmd_buffer_lookahead_replace));
assign sdram_bankmachine2_cmd_buffer_lookahead_do_read = (sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable & sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_re);
assign sdram_bankmachine2_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine2_cmd_buffer_lookahead_consume;
assign sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_dout = sdram_bankmachine2_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable = (sdram_bankmachine2_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_readable = (sdram_bankmachine2_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine2_cmd_buffer_sink_ready = ((~sdram_bankmachine2_cmd_buffer_source_valid) | sdram_bankmachine2_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_133;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine2_next_state <= 3'd0;
	subfragments_bankmachine2_next_state <= subfragments_bankmachine2_state;
	case (subfragments_bankmachine2_state)
		1'd1: begin
			if ((sdram_bankmachine2_twtpcon_ready & sdram_bankmachine2_trascon_ready)) begin
				if (sdram_bankmachine2_cmd_ready) begin
					subfragments_bankmachine2_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine2_twtpcon_ready & sdram_bankmachine2_trascon_ready)) begin
				subfragments_bankmachine2_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine2_trccon_ready) begin
				if (sdram_bankmachine2_cmd_ready) begin
					subfragments_bankmachine2_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine2_refresh_req)) begin
				subfragments_bankmachine2_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine2_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine2_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
				subfragments_bankmachine2_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							if ((sdram_bankmachine2_cmd_ready & sdram_bankmachine2_auto_precharge)) begin
								subfragments_bankmachine2_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine2_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine2_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_133 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_134;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							sdram_bankmachine2_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_134 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_135;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
			if ((sdram_bankmachine2_twtpcon_ready & sdram_bankmachine2_trascon_ready)) begin
				sdram_bankmachine2_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine2_trccon_ready) begin
				sdram_bankmachine2_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_135 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_136;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
			if ((sdram_bankmachine2_twtpcon_ready & sdram_bankmachine2_trascon_ready)) begin
				sdram_bankmachine2_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							if (sdram_bankmachine2_cmd_buffer_source_payload_we) begin
								sdram_bankmachine2_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_136 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_137;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine2_trccon_ready) begin
				sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_137 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_138;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
			if ((sdram_bankmachine2_twtpcon_ready & sdram_bankmachine2_trascon_ready)) begin
				sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine2_trccon_ready) begin
				sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_138 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_139;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							if (sdram_bankmachine2_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_139 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_140;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							if (sdram_bankmachine2_cmd_buffer_source_payload_we) begin
								sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_140 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_141;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							if (sdram_bankmachine2_cmd_buffer_source_payload_we) begin
								sdram_bankmachine2_req_wdata_ready <= sdram_bankmachine2_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_141 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_142;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							if (sdram_bankmachine2_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine2_req_rdata_valid <= sdram_bankmachine2_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_142 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_143;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine2_twtpcon_ready) begin
				sdram_bankmachine2_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_143 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_144;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_valid <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
			if ((sdram_bankmachine2_twtpcon_ready & sdram_bankmachine2_trascon_ready)) begin
				sdram_bankmachine2_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine2_trccon_ready) begin
				sdram_bankmachine2_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine2_refresh_req) begin
			end else begin
				if (sdram_bankmachine2_cmd_buffer_source_valid) begin
					if (sdram_bankmachine2_row_opened) begin
						if (sdram_bankmachine2_row_hit) begin
							sdram_bankmachine2_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_144 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_145;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_row_open <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine2_trccon_ready) begin
				sdram_bankmachine2_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_145 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_146;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_row_close <= 1'd0;
	case (subfragments_bankmachine2_state)
		1'd1: begin
			sdram_bankmachine2_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine2_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine2_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_146 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine3_cmd_buffer_lookahead_sink_valid = sdram_bankmachine3_req_valid;
assign sdram_bankmachine3_req_ready = sdram_bankmachine3_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine3_req_we;
assign sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine3_req_addr;
assign sdram_bankmachine3_cmd_buffer_sink_valid = sdram_bankmachine3_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine3_cmd_buffer_lookahead_source_ready = sdram_bankmachine3_cmd_buffer_sink_ready;
assign sdram_bankmachine3_cmd_buffer_sink_first = sdram_bankmachine3_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine3_cmd_buffer_sink_last = sdram_bankmachine3_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine3_cmd_buffer_sink_payload_we = sdram_bankmachine3_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine3_cmd_buffer_sink_payload_addr = sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine3_cmd_buffer_source_ready = (sdram_bankmachine3_req_wdata_ready | sdram_bankmachine3_req_rdata_valid);
assign sdram_bankmachine3_req_lock = (sdram_bankmachine3_cmd_buffer_lookahead_source_valid | sdram_bankmachine3_cmd_buffer_source_valid);
assign sdram_bankmachine3_row_hit = (sdram_bankmachine3_row == sdram_bankmachine3_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine3_cmd_payload_ba = 2'd3;

// synthesis translate_off
reg dummy_d_147;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine3_row_col_n_addr_sel) begin
		sdram_bankmachine3_cmd_payload_a <= sdram_bankmachine3_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine3_cmd_payload_a <= ((sdram_bankmachine3_auto_precharge <<< 4'd10) | {sdram_bankmachine3_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_147 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine3_twtpcon_valid = ((sdram_bankmachine3_cmd_valid & sdram_bankmachine3_cmd_ready) & sdram_bankmachine3_cmd_payload_is_write);
assign sdram_bankmachine3_trccon_valid = ((sdram_bankmachine3_cmd_valid & sdram_bankmachine3_cmd_ready) & sdram_bankmachine3_row_open);
assign sdram_bankmachine3_trascon_valid = ((sdram_bankmachine3_cmd_valid & sdram_bankmachine3_cmd_ready) & sdram_bankmachine3_row_open);

// synthesis translate_off
reg dummy_d_148;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_auto_precharge <= 1'd0;
	if ((sdram_bankmachine3_cmd_buffer_lookahead_source_valid & sdram_bankmachine3_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine3_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine3_auto_precharge <= (sdram_bankmachine3_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_148 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_din = {sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
assign {sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
assign {sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
assign {sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout;
assign sdram_bankmachine3_cmd_buffer_lookahead_sink_ready = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable;
assign sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we = sdram_bankmachine3_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine3_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine3_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine3_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine3_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine3_cmd_buffer_lookahead_source_valid = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable;
assign sdram_bankmachine3_cmd_buffer_lookahead_source_first = sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine3_cmd_buffer_lookahead_source_last = sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine3_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine3_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine3_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_re = sdram_bankmachine3_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_149;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine3_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine3_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine3_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_149 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_din;
assign sdram_bankmachine3_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we & (sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable | sdram_bankmachine3_cmd_buffer_lookahead_replace));
assign sdram_bankmachine3_cmd_buffer_lookahead_do_read = (sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable & sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_re);
assign sdram_bankmachine3_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine3_cmd_buffer_lookahead_consume;
assign sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_dout = sdram_bankmachine3_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable = (sdram_bankmachine3_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_readable = (sdram_bankmachine3_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine3_cmd_buffer_sink_ready = ((~sdram_bankmachine3_cmd_buffer_source_valid) | sdram_bankmachine3_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_150;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine3_next_state <= 3'd0;
	subfragments_bankmachine3_next_state <= subfragments_bankmachine3_state;
	case (subfragments_bankmachine3_state)
		1'd1: begin
			if ((sdram_bankmachine3_twtpcon_ready & sdram_bankmachine3_trascon_ready)) begin
				if (sdram_bankmachine3_cmd_ready) begin
					subfragments_bankmachine3_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine3_twtpcon_ready & sdram_bankmachine3_trascon_ready)) begin
				subfragments_bankmachine3_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine3_trccon_ready) begin
				if (sdram_bankmachine3_cmd_ready) begin
					subfragments_bankmachine3_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine3_refresh_req)) begin
				subfragments_bankmachine3_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine3_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine3_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
				subfragments_bankmachine3_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							if ((sdram_bankmachine3_cmd_ready & sdram_bankmachine3_auto_precharge)) begin
								subfragments_bankmachine3_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine3_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine3_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_150 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_151;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_row_open <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine3_trccon_ready) begin
				sdram_bankmachine3_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_151 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_152;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_row_close <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
			sdram_bankmachine3_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine3_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine3_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_152 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_153;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							sdram_bankmachine3_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_153 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_154;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
			if ((sdram_bankmachine3_twtpcon_ready & sdram_bankmachine3_trascon_ready)) begin
				sdram_bankmachine3_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine3_trccon_ready) begin
				sdram_bankmachine3_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_154 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_155;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
			if ((sdram_bankmachine3_twtpcon_ready & sdram_bankmachine3_trascon_ready)) begin
				sdram_bankmachine3_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							if (sdram_bankmachine3_cmd_buffer_source_payload_we) begin
								sdram_bankmachine3_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_155 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_156;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine3_trccon_ready) begin
				sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_156 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_157;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
			if ((sdram_bankmachine3_twtpcon_ready & sdram_bankmachine3_trascon_ready)) begin
				sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine3_trccon_ready) begin
				sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_157 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_158;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							if (sdram_bankmachine3_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_158 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_159;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							if (sdram_bankmachine3_cmd_buffer_source_payload_we) begin
								sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_159 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_160;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							if (sdram_bankmachine3_cmd_buffer_source_payload_we) begin
								sdram_bankmachine3_req_wdata_ready <= sdram_bankmachine3_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_160 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_161;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							if (sdram_bankmachine3_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine3_req_rdata_valid <= sdram_bankmachine3_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_161 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_162;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_valid <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
			if ((sdram_bankmachine3_twtpcon_ready & sdram_bankmachine3_trascon_ready)) begin
				sdram_bankmachine3_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine3_trccon_ready) begin
				sdram_bankmachine3_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine3_refresh_req) begin
			end else begin
				if (sdram_bankmachine3_cmd_buffer_source_valid) begin
					if (sdram_bankmachine3_row_opened) begin
						if (sdram_bankmachine3_row_hit) begin
							sdram_bankmachine3_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_162 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_163;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine3_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine3_twtpcon_ready) begin
				sdram_bankmachine3_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_163 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine4_cmd_buffer_lookahead_sink_valid = sdram_bankmachine4_req_valid;
assign sdram_bankmachine4_req_ready = sdram_bankmachine4_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine4_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine4_req_we;
assign sdram_bankmachine4_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine4_req_addr;
assign sdram_bankmachine4_cmd_buffer_sink_valid = sdram_bankmachine4_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine4_cmd_buffer_lookahead_source_ready = sdram_bankmachine4_cmd_buffer_sink_ready;
assign sdram_bankmachine4_cmd_buffer_sink_first = sdram_bankmachine4_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine4_cmd_buffer_sink_last = sdram_bankmachine4_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine4_cmd_buffer_sink_payload_we = sdram_bankmachine4_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine4_cmd_buffer_sink_payload_addr = sdram_bankmachine4_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine4_cmd_buffer_source_ready = (sdram_bankmachine4_req_wdata_ready | sdram_bankmachine4_req_rdata_valid);
assign sdram_bankmachine4_req_lock = (sdram_bankmachine4_cmd_buffer_lookahead_source_valid | sdram_bankmachine4_cmd_buffer_source_valid);
assign sdram_bankmachine4_row_hit = (sdram_bankmachine4_row == sdram_bankmachine4_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine4_cmd_payload_ba = 3'd4;

// synthesis translate_off
reg dummy_d_164;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine4_row_col_n_addr_sel) begin
		sdram_bankmachine4_cmd_payload_a <= sdram_bankmachine4_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine4_cmd_payload_a <= ((sdram_bankmachine4_auto_precharge <<< 4'd10) | {sdram_bankmachine4_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_164 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine4_twtpcon_valid = ((sdram_bankmachine4_cmd_valid & sdram_bankmachine4_cmd_ready) & sdram_bankmachine4_cmd_payload_is_write);
assign sdram_bankmachine4_trccon_valid = ((sdram_bankmachine4_cmd_valid & sdram_bankmachine4_cmd_ready) & sdram_bankmachine4_row_open);
assign sdram_bankmachine4_trascon_valid = ((sdram_bankmachine4_cmd_valid & sdram_bankmachine4_cmd_ready) & sdram_bankmachine4_row_open);

// synthesis translate_off
reg dummy_d_165;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_auto_precharge <= 1'd0;
	if ((sdram_bankmachine4_cmd_buffer_lookahead_source_valid & sdram_bankmachine4_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine4_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine4_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine4_auto_precharge <= (sdram_bankmachine4_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_165 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_din = {sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_dout;
assign {sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_dout;
assign {sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_dout;
assign {sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_dout;
assign sdram_bankmachine4_cmd_buffer_lookahead_sink_ready = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_writable;
assign sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_we = sdram_bankmachine4_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine4_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine4_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine4_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine4_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine4_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine4_cmd_buffer_lookahead_source_valid = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_readable;
assign sdram_bankmachine4_cmd_buffer_lookahead_source_first = sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine4_cmd_buffer_lookahead_source_last = sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine4_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine4_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine4_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_re = sdram_bankmachine4_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_166;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine4_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine4_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine4_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine4_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine4_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_166 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine4_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_din;
assign sdram_bankmachine4_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_we & (sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_writable | sdram_bankmachine4_cmd_buffer_lookahead_replace));
assign sdram_bankmachine4_cmd_buffer_lookahead_do_read = (sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_readable & sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_re);
assign sdram_bankmachine4_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine4_cmd_buffer_lookahead_consume;
assign sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_dout = sdram_bankmachine4_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_writable = (sdram_bankmachine4_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_readable = (sdram_bankmachine4_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine4_cmd_buffer_sink_ready = ((~sdram_bankmachine4_cmd_buffer_source_valid) | sdram_bankmachine4_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_167;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine4_next_state <= 3'd0;
	subfragments_bankmachine4_next_state <= subfragments_bankmachine4_state;
	case (subfragments_bankmachine4_state)
		1'd1: begin
			if ((sdram_bankmachine4_twtpcon_ready & sdram_bankmachine4_trascon_ready)) begin
				if (sdram_bankmachine4_cmd_ready) begin
					subfragments_bankmachine4_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine4_twtpcon_ready & sdram_bankmachine4_trascon_ready)) begin
				subfragments_bankmachine4_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine4_trccon_ready) begin
				if (sdram_bankmachine4_cmd_ready) begin
					subfragments_bankmachine4_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine4_refresh_req)) begin
				subfragments_bankmachine4_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine4_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine4_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
				subfragments_bankmachine4_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							if ((sdram_bankmachine4_cmd_ready & sdram_bankmachine4_auto_precharge)) begin
								subfragments_bankmachine4_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine4_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine4_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_167 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_168;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine4_twtpcon_ready) begin
				sdram_bankmachine4_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_168 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_169;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_valid <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
			if ((sdram_bankmachine4_twtpcon_ready & sdram_bankmachine4_trascon_ready)) begin
				sdram_bankmachine4_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine4_trccon_ready) begin
				sdram_bankmachine4_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							sdram_bankmachine4_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_169 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_170;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_row_open <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine4_trccon_ready) begin
				sdram_bankmachine4_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_170 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_171;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_row_close <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
			sdram_bankmachine4_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine4_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine4_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_171 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_172;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							sdram_bankmachine4_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_172 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_173;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
			if ((sdram_bankmachine4_twtpcon_ready & sdram_bankmachine4_trascon_ready)) begin
				sdram_bankmachine4_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine4_trccon_ready) begin
				sdram_bankmachine4_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_173 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_174;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
			if ((sdram_bankmachine4_twtpcon_ready & sdram_bankmachine4_trascon_ready)) begin
				sdram_bankmachine4_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							if (sdram_bankmachine4_cmd_buffer_source_payload_we) begin
								sdram_bankmachine4_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_174 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_175;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine4_trccon_ready) begin
				sdram_bankmachine4_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_175 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_176;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
			if ((sdram_bankmachine4_twtpcon_ready & sdram_bankmachine4_trascon_ready)) begin
				sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine4_trccon_ready) begin
				sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine4_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_176 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_177;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							if (sdram_bankmachine4_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine4_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_177 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_178;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							if (sdram_bankmachine4_cmd_buffer_source_payload_we) begin
								sdram_bankmachine4_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_178 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_179;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							if (sdram_bankmachine4_cmd_buffer_source_payload_we) begin
								sdram_bankmachine4_req_wdata_ready <= sdram_bankmachine4_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_179 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_180;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine4_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine4_refresh_req) begin
			end else begin
				if (sdram_bankmachine4_cmd_buffer_source_valid) begin
					if (sdram_bankmachine4_row_opened) begin
						if (sdram_bankmachine4_row_hit) begin
							if (sdram_bankmachine4_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine4_req_rdata_valid <= sdram_bankmachine4_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_180 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine5_cmd_buffer_lookahead_sink_valid = sdram_bankmachine5_req_valid;
assign sdram_bankmachine5_req_ready = sdram_bankmachine5_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine5_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine5_req_we;
assign sdram_bankmachine5_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine5_req_addr;
assign sdram_bankmachine5_cmd_buffer_sink_valid = sdram_bankmachine5_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine5_cmd_buffer_lookahead_source_ready = sdram_bankmachine5_cmd_buffer_sink_ready;
assign sdram_bankmachine5_cmd_buffer_sink_first = sdram_bankmachine5_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine5_cmd_buffer_sink_last = sdram_bankmachine5_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine5_cmd_buffer_sink_payload_we = sdram_bankmachine5_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine5_cmd_buffer_sink_payload_addr = sdram_bankmachine5_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine5_cmd_buffer_source_ready = (sdram_bankmachine5_req_wdata_ready | sdram_bankmachine5_req_rdata_valid);
assign sdram_bankmachine5_req_lock = (sdram_bankmachine5_cmd_buffer_lookahead_source_valid | sdram_bankmachine5_cmd_buffer_source_valid);
assign sdram_bankmachine5_row_hit = (sdram_bankmachine5_row == sdram_bankmachine5_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine5_cmd_payload_ba = 3'd5;

// synthesis translate_off
reg dummy_d_181;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine5_row_col_n_addr_sel) begin
		sdram_bankmachine5_cmd_payload_a <= sdram_bankmachine5_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine5_cmd_payload_a <= ((sdram_bankmachine5_auto_precharge <<< 4'd10) | {sdram_bankmachine5_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_181 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine5_twtpcon_valid = ((sdram_bankmachine5_cmd_valid & sdram_bankmachine5_cmd_ready) & sdram_bankmachine5_cmd_payload_is_write);
assign sdram_bankmachine5_trccon_valid = ((sdram_bankmachine5_cmd_valid & sdram_bankmachine5_cmd_ready) & sdram_bankmachine5_row_open);
assign sdram_bankmachine5_trascon_valid = ((sdram_bankmachine5_cmd_valid & sdram_bankmachine5_cmd_ready) & sdram_bankmachine5_row_open);

// synthesis translate_off
reg dummy_d_182;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_auto_precharge <= 1'd0;
	if ((sdram_bankmachine5_cmd_buffer_lookahead_source_valid & sdram_bankmachine5_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine5_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine5_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine5_auto_precharge <= (sdram_bankmachine5_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_182 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_din = {sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_dout;
assign {sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_dout;
assign {sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_dout;
assign {sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_dout;
assign sdram_bankmachine5_cmd_buffer_lookahead_sink_ready = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_writable;
assign sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_we = sdram_bankmachine5_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine5_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine5_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine5_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine5_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine5_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine5_cmd_buffer_lookahead_source_valid = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_readable;
assign sdram_bankmachine5_cmd_buffer_lookahead_source_first = sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine5_cmd_buffer_lookahead_source_last = sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine5_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine5_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine5_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_re = sdram_bankmachine5_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_183;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine5_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine5_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine5_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine5_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine5_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_183 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine5_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_din;
assign sdram_bankmachine5_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_we & (sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_writable | sdram_bankmachine5_cmd_buffer_lookahead_replace));
assign sdram_bankmachine5_cmd_buffer_lookahead_do_read = (sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_readable & sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_re);
assign sdram_bankmachine5_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine5_cmd_buffer_lookahead_consume;
assign sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_dout = sdram_bankmachine5_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_writable = (sdram_bankmachine5_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_readable = (sdram_bankmachine5_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine5_cmd_buffer_sink_ready = ((~sdram_bankmachine5_cmd_buffer_source_valid) | sdram_bankmachine5_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_184;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine5_next_state <= 3'd0;
	subfragments_bankmachine5_next_state <= subfragments_bankmachine5_state;
	case (subfragments_bankmachine5_state)
		1'd1: begin
			if ((sdram_bankmachine5_twtpcon_ready & sdram_bankmachine5_trascon_ready)) begin
				if (sdram_bankmachine5_cmd_ready) begin
					subfragments_bankmachine5_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine5_twtpcon_ready & sdram_bankmachine5_trascon_ready)) begin
				subfragments_bankmachine5_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine5_trccon_ready) begin
				if (sdram_bankmachine5_cmd_ready) begin
					subfragments_bankmachine5_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine5_refresh_req)) begin
				subfragments_bankmachine5_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine5_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine5_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
				subfragments_bankmachine5_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							if ((sdram_bankmachine5_cmd_ready & sdram_bankmachine5_auto_precharge)) begin
								subfragments_bankmachine5_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine5_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine5_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_184 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_185;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							if (sdram_bankmachine5_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine5_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_185 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_186;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							if (sdram_bankmachine5_cmd_buffer_source_payload_we) begin
								sdram_bankmachine5_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_186 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_187;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							if (sdram_bankmachine5_cmd_buffer_source_payload_we) begin
								sdram_bankmachine5_req_wdata_ready <= sdram_bankmachine5_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_187 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_188;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							if (sdram_bankmachine5_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine5_req_rdata_valid <= sdram_bankmachine5_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_188 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_189;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine5_twtpcon_ready) begin
				sdram_bankmachine5_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_189 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_190;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_valid <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
			if ((sdram_bankmachine5_twtpcon_ready & sdram_bankmachine5_trascon_ready)) begin
				sdram_bankmachine5_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine5_trccon_ready) begin
				sdram_bankmachine5_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							sdram_bankmachine5_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_190 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_191;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_row_open <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine5_trccon_ready) begin
				sdram_bankmachine5_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_191 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_192;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_row_close <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
			sdram_bankmachine5_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine5_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine5_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_192 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_193;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							sdram_bankmachine5_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_193 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_194;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
			if ((sdram_bankmachine5_twtpcon_ready & sdram_bankmachine5_trascon_ready)) begin
				sdram_bankmachine5_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine5_trccon_ready) begin
				sdram_bankmachine5_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_194 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_195;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
			if ((sdram_bankmachine5_twtpcon_ready & sdram_bankmachine5_trascon_ready)) begin
				sdram_bankmachine5_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine5_refresh_req) begin
			end else begin
				if (sdram_bankmachine5_cmd_buffer_source_valid) begin
					if (sdram_bankmachine5_row_opened) begin
						if (sdram_bankmachine5_row_hit) begin
							if (sdram_bankmachine5_cmd_buffer_source_payload_we) begin
								sdram_bankmachine5_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_195 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_196;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine5_trccon_ready) begin
				sdram_bankmachine5_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_196 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_197;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine5_state)
		1'd1: begin
			if ((sdram_bankmachine5_twtpcon_ready & sdram_bankmachine5_trascon_ready)) begin
				sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine5_trccon_ready) begin
				sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine5_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_197 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine6_cmd_buffer_lookahead_sink_valid = sdram_bankmachine6_req_valid;
assign sdram_bankmachine6_req_ready = sdram_bankmachine6_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine6_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine6_req_we;
assign sdram_bankmachine6_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine6_req_addr;
assign sdram_bankmachine6_cmd_buffer_sink_valid = sdram_bankmachine6_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine6_cmd_buffer_lookahead_source_ready = sdram_bankmachine6_cmd_buffer_sink_ready;
assign sdram_bankmachine6_cmd_buffer_sink_first = sdram_bankmachine6_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine6_cmd_buffer_sink_last = sdram_bankmachine6_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine6_cmd_buffer_sink_payload_we = sdram_bankmachine6_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine6_cmd_buffer_sink_payload_addr = sdram_bankmachine6_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine6_cmd_buffer_source_ready = (sdram_bankmachine6_req_wdata_ready | sdram_bankmachine6_req_rdata_valid);
assign sdram_bankmachine6_req_lock = (sdram_bankmachine6_cmd_buffer_lookahead_source_valid | sdram_bankmachine6_cmd_buffer_source_valid);
assign sdram_bankmachine6_row_hit = (sdram_bankmachine6_row == sdram_bankmachine6_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine6_cmd_payload_ba = 3'd6;

// synthesis translate_off
reg dummy_d_198;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine6_row_col_n_addr_sel) begin
		sdram_bankmachine6_cmd_payload_a <= sdram_bankmachine6_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine6_cmd_payload_a <= ((sdram_bankmachine6_auto_precharge <<< 4'd10) | {sdram_bankmachine6_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_198 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine6_twtpcon_valid = ((sdram_bankmachine6_cmd_valid & sdram_bankmachine6_cmd_ready) & sdram_bankmachine6_cmd_payload_is_write);
assign sdram_bankmachine6_trccon_valid = ((sdram_bankmachine6_cmd_valid & sdram_bankmachine6_cmd_ready) & sdram_bankmachine6_row_open);
assign sdram_bankmachine6_trascon_valid = ((sdram_bankmachine6_cmd_valid & sdram_bankmachine6_cmd_ready) & sdram_bankmachine6_row_open);

// synthesis translate_off
reg dummy_d_199;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_auto_precharge <= 1'd0;
	if ((sdram_bankmachine6_cmd_buffer_lookahead_source_valid & sdram_bankmachine6_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine6_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine6_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine6_auto_precharge <= (sdram_bankmachine6_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_199 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_din = {sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_dout;
assign {sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_dout;
assign {sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_dout;
assign {sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_dout;
assign sdram_bankmachine6_cmd_buffer_lookahead_sink_ready = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_writable;
assign sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_we = sdram_bankmachine6_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine6_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine6_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine6_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine6_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine6_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine6_cmd_buffer_lookahead_source_valid = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_readable;
assign sdram_bankmachine6_cmd_buffer_lookahead_source_first = sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine6_cmd_buffer_lookahead_source_last = sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine6_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine6_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine6_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_re = sdram_bankmachine6_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_200;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine6_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine6_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine6_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine6_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine6_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_200 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine6_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_din;
assign sdram_bankmachine6_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_we & (sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_writable | sdram_bankmachine6_cmd_buffer_lookahead_replace));
assign sdram_bankmachine6_cmd_buffer_lookahead_do_read = (sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_readable & sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_re);
assign sdram_bankmachine6_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine6_cmd_buffer_lookahead_consume;
assign sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_dout = sdram_bankmachine6_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_writable = (sdram_bankmachine6_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_readable = (sdram_bankmachine6_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine6_cmd_buffer_sink_ready = ((~sdram_bankmachine6_cmd_buffer_source_valid) | sdram_bankmachine6_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_201;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine6_next_state <= 3'd0;
	subfragments_bankmachine6_next_state <= subfragments_bankmachine6_state;
	case (subfragments_bankmachine6_state)
		1'd1: begin
			if ((sdram_bankmachine6_twtpcon_ready & sdram_bankmachine6_trascon_ready)) begin
				if (sdram_bankmachine6_cmd_ready) begin
					subfragments_bankmachine6_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine6_twtpcon_ready & sdram_bankmachine6_trascon_ready)) begin
				subfragments_bankmachine6_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine6_trccon_ready) begin
				if (sdram_bankmachine6_cmd_ready) begin
					subfragments_bankmachine6_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine6_refresh_req)) begin
				subfragments_bankmachine6_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine6_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine6_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
				subfragments_bankmachine6_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							if ((sdram_bankmachine6_cmd_ready & sdram_bankmachine6_auto_precharge)) begin
								subfragments_bankmachine6_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine6_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine6_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_201 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_202;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							sdram_bankmachine6_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_202 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_203;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
			if ((sdram_bankmachine6_twtpcon_ready & sdram_bankmachine6_trascon_ready)) begin
				sdram_bankmachine6_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine6_trccon_ready) begin
				sdram_bankmachine6_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_203 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_204;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
			if ((sdram_bankmachine6_twtpcon_ready & sdram_bankmachine6_trascon_ready)) begin
				sdram_bankmachine6_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							if (sdram_bankmachine6_cmd_buffer_source_payload_we) begin
								sdram_bankmachine6_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_204 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_205;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine6_trccon_ready) begin
				sdram_bankmachine6_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_205 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_206;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
			if ((sdram_bankmachine6_twtpcon_ready & sdram_bankmachine6_trascon_ready)) begin
				sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine6_trccon_ready) begin
				sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine6_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_206 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_207;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							if (sdram_bankmachine6_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine6_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_207 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_208;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							if (sdram_bankmachine6_cmd_buffer_source_payload_we) begin
								sdram_bankmachine6_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_208 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_209;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							if (sdram_bankmachine6_cmd_buffer_source_payload_we) begin
								sdram_bankmachine6_req_wdata_ready <= sdram_bankmachine6_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_209 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_210;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							if (sdram_bankmachine6_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine6_req_rdata_valid <= sdram_bankmachine6_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_210 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_211;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine6_twtpcon_ready) begin
				sdram_bankmachine6_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_211 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_212;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_valid <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
			if ((sdram_bankmachine6_twtpcon_ready & sdram_bankmachine6_trascon_ready)) begin
				sdram_bankmachine6_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine6_trccon_ready) begin
				sdram_bankmachine6_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine6_refresh_req) begin
			end else begin
				if (sdram_bankmachine6_cmd_buffer_source_valid) begin
					if (sdram_bankmachine6_row_opened) begin
						if (sdram_bankmachine6_row_hit) begin
							sdram_bankmachine6_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_212 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_213;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_row_open <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine6_trccon_ready) begin
				sdram_bankmachine6_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_213 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_214;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_row_close <= 1'd0;
	case (subfragments_bankmachine6_state)
		1'd1: begin
			sdram_bankmachine6_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine6_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine6_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_214 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine7_cmd_buffer_lookahead_sink_valid = sdram_bankmachine7_req_valid;
assign sdram_bankmachine7_req_ready = sdram_bankmachine7_cmd_buffer_lookahead_sink_ready;
assign sdram_bankmachine7_cmd_buffer_lookahead_sink_payload_we = sdram_bankmachine7_req_we;
assign sdram_bankmachine7_cmd_buffer_lookahead_sink_payload_addr = sdram_bankmachine7_req_addr;
assign sdram_bankmachine7_cmd_buffer_sink_valid = sdram_bankmachine7_cmd_buffer_lookahead_source_valid;
assign sdram_bankmachine7_cmd_buffer_lookahead_source_ready = sdram_bankmachine7_cmd_buffer_sink_ready;
assign sdram_bankmachine7_cmd_buffer_sink_first = sdram_bankmachine7_cmd_buffer_lookahead_source_first;
assign sdram_bankmachine7_cmd_buffer_sink_last = sdram_bankmachine7_cmd_buffer_lookahead_source_last;
assign sdram_bankmachine7_cmd_buffer_sink_payload_we = sdram_bankmachine7_cmd_buffer_lookahead_source_payload_we;
assign sdram_bankmachine7_cmd_buffer_sink_payload_addr = sdram_bankmachine7_cmd_buffer_lookahead_source_payload_addr;
assign sdram_bankmachine7_cmd_buffer_source_ready = (sdram_bankmachine7_req_wdata_ready | sdram_bankmachine7_req_rdata_valid);
assign sdram_bankmachine7_req_lock = (sdram_bankmachine7_cmd_buffer_lookahead_source_valid | sdram_bankmachine7_cmd_buffer_source_valid);
assign sdram_bankmachine7_row_hit = (sdram_bankmachine7_row == sdram_bankmachine7_cmd_buffer_source_payload_addr[20:8]);
assign sdram_bankmachine7_cmd_payload_ba = 3'd7;

// synthesis translate_off
reg dummy_d_215;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_a <= 13'd0;
	if (sdram_bankmachine7_row_col_n_addr_sel) begin
		sdram_bankmachine7_cmd_payload_a <= sdram_bankmachine7_cmd_buffer_source_payload_addr[20:8];
	end else begin
		sdram_bankmachine7_cmd_payload_a <= ((sdram_bankmachine7_auto_precharge <<< 4'd10) | {sdram_bankmachine7_cmd_buffer_source_payload_addr[7:0], {2{1'd0}}});
	end
// synthesis translate_off
	dummy_d_215 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine7_twtpcon_valid = ((sdram_bankmachine7_cmd_valid & sdram_bankmachine7_cmd_ready) & sdram_bankmachine7_cmd_payload_is_write);
assign sdram_bankmachine7_trccon_valid = ((sdram_bankmachine7_cmd_valid & sdram_bankmachine7_cmd_ready) & sdram_bankmachine7_row_open);
assign sdram_bankmachine7_trascon_valid = ((sdram_bankmachine7_cmd_valid & sdram_bankmachine7_cmd_ready) & sdram_bankmachine7_row_open);

// synthesis translate_off
reg dummy_d_216;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_auto_precharge <= 1'd0;
	if ((sdram_bankmachine7_cmd_buffer_lookahead_source_valid & sdram_bankmachine7_cmd_buffer_source_valid)) begin
		if ((sdram_bankmachine7_cmd_buffer_lookahead_source_payload_addr[20:8] != sdram_bankmachine7_cmd_buffer_source_payload_addr[20:8])) begin
			sdram_bankmachine7_auto_precharge <= (sdram_bankmachine7_row_close == 1'd0);
		end
	end
// synthesis translate_off
	dummy_d_216 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_din = {sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_last, sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_first, sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_payload_addr, sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_payload_we};
assign {sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_dout;
assign {sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_dout;
assign {sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_dout;
assign {sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_last, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_first, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_addr, sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_we} = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_dout;
assign sdram_bankmachine7_cmd_buffer_lookahead_sink_ready = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_writable;
assign sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_we = sdram_bankmachine7_cmd_buffer_lookahead_sink_valid;
assign sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_first = sdram_bankmachine7_cmd_buffer_lookahead_sink_first;
assign sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_last = sdram_bankmachine7_cmd_buffer_lookahead_sink_last;
assign sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_payload_we = sdram_bankmachine7_cmd_buffer_lookahead_sink_payload_we;
assign sdram_bankmachine7_cmd_buffer_lookahead_fifo_in_payload_addr = sdram_bankmachine7_cmd_buffer_lookahead_sink_payload_addr;
assign sdram_bankmachine7_cmd_buffer_lookahead_source_valid = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_readable;
assign sdram_bankmachine7_cmd_buffer_lookahead_source_first = sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_first;
assign sdram_bankmachine7_cmd_buffer_lookahead_source_last = sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_last;
assign sdram_bankmachine7_cmd_buffer_lookahead_source_payload_we = sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_we;
assign sdram_bankmachine7_cmd_buffer_lookahead_source_payload_addr = sdram_bankmachine7_cmd_buffer_lookahead_fifo_out_payload_addr;
assign sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_re = sdram_bankmachine7_cmd_buffer_lookahead_source_ready;

// synthesis translate_off
reg dummy_d_217;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_buffer_lookahead_wrport_adr <= 4'd0;
	if (sdram_bankmachine7_cmd_buffer_lookahead_replace) begin
		sdram_bankmachine7_cmd_buffer_lookahead_wrport_adr <= (sdram_bankmachine7_cmd_buffer_lookahead_produce - 1'd1);
	end else begin
		sdram_bankmachine7_cmd_buffer_lookahead_wrport_adr <= sdram_bankmachine7_cmd_buffer_lookahead_produce;
	end
// synthesis translate_off
	dummy_d_217 = dummy_s;
// synthesis translate_on
end
assign sdram_bankmachine7_cmd_buffer_lookahead_wrport_dat_w = sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_din;
assign sdram_bankmachine7_cmd_buffer_lookahead_wrport_we = (sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_we & (sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_writable | sdram_bankmachine7_cmd_buffer_lookahead_replace));
assign sdram_bankmachine7_cmd_buffer_lookahead_do_read = (sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_readable & sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_re);
assign sdram_bankmachine7_cmd_buffer_lookahead_rdport_adr = sdram_bankmachine7_cmd_buffer_lookahead_consume;
assign sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_dout = sdram_bankmachine7_cmd_buffer_lookahead_rdport_dat_r;
assign sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_writable = (sdram_bankmachine7_cmd_buffer_lookahead_level != 5'd16);
assign sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_readable = (sdram_bankmachine7_cmd_buffer_lookahead_level != 1'd0);
assign sdram_bankmachine7_cmd_buffer_sink_ready = ((~sdram_bankmachine7_cmd_buffer_source_valid) | sdram_bankmachine7_cmd_buffer_source_ready);

// synthesis translate_off
reg dummy_d_218;
// synthesis translate_on
always @(*) begin
	subfragments_bankmachine7_next_state <= 3'd0;
	subfragments_bankmachine7_next_state <= subfragments_bankmachine7_state;
	case (subfragments_bankmachine7_state)
		1'd1: begin
			if ((sdram_bankmachine7_twtpcon_ready & sdram_bankmachine7_trascon_ready)) begin
				if (sdram_bankmachine7_cmd_ready) begin
					subfragments_bankmachine7_next_state <= 3'd5;
				end
			end
		end
		2'd2: begin
			if ((sdram_bankmachine7_twtpcon_ready & sdram_bankmachine7_trascon_ready)) begin
				subfragments_bankmachine7_next_state <= 3'd5;
			end
		end
		2'd3: begin
			if (sdram_bankmachine7_trccon_ready) begin
				if (sdram_bankmachine7_cmd_ready) begin
					subfragments_bankmachine7_next_state <= 3'd6;
				end
			end
		end
		3'd4: begin
			if ((~sdram_bankmachine7_refresh_req)) begin
				subfragments_bankmachine7_next_state <= 1'd0;
			end
		end
		3'd5: begin
			subfragments_bankmachine7_next_state <= 2'd3;
		end
		3'd6: begin
			subfragments_bankmachine7_next_state <= 1'd0;
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
				subfragments_bankmachine7_next_state <= 3'd4;
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							if ((sdram_bankmachine7_cmd_ready & sdram_bankmachine7_auto_precharge)) begin
								subfragments_bankmachine7_next_state <= 2'd2;
							end
						end else begin
							subfragments_bankmachine7_next_state <= 1'd1;
						end
					end else begin
						subfragments_bankmachine7_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_218 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_219;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_row_open <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine7_trccon_ready) begin
				sdram_bankmachine7_row_open <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_219 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_220;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_row_close <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
			sdram_bankmachine7_row_close <= 1'd1;
		end
		2'd2: begin
			sdram_bankmachine7_row_close <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
			sdram_bankmachine7_row_close <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_220 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_221;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_cas <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							sdram_bankmachine7_cmd_payload_cas <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_221 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_222;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_ras <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
			if ((sdram_bankmachine7_twtpcon_ready & sdram_bankmachine7_trascon_ready)) begin
				sdram_bankmachine7_cmd_payload_ras <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine7_trccon_ready) begin
				sdram_bankmachine7_cmd_payload_ras <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_222 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_223;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_we <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
			if ((sdram_bankmachine7_twtpcon_ready & sdram_bankmachine7_trascon_ready)) begin
				sdram_bankmachine7_cmd_payload_we <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							if (sdram_bankmachine7_cmd_buffer_source_payload_we) begin
								sdram_bankmachine7_cmd_payload_we <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_223 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_224;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_row_col_n_addr_sel <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine7_trccon_ready) begin
				sdram_bankmachine7_row_col_n_addr_sel <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_224 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_225;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_is_cmd <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
			if ((sdram_bankmachine7_twtpcon_ready & sdram_bankmachine7_trascon_ready)) begin
				sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine7_trccon_ready) begin
				sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
			end
		end
		3'd4: begin
			sdram_bankmachine7_cmd_payload_is_cmd <= 1'd1;
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_225 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_226;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_is_read <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							if (sdram_bankmachine7_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine7_cmd_payload_is_read <= 1'd1;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_226 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_227;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_payload_is_write <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							if (sdram_bankmachine7_cmd_buffer_source_payload_we) begin
								sdram_bankmachine7_cmd_payload_is_write <= 1'd1;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_227 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_228;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_req_wdata_ready <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							if (sdram_bankmachine7_cmd_buffer_source_payload_we) begin
								sdram_bankmachine7_req_wdata_ready <= sdram_bankmachine7_cmd_ready;
							end else begin
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_228 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_229;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_req_rdata_valid <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							if (sdram_bankmachine7_cmd_buffer_source_payload_we) begin
							end else begin
								sdram_bankmachine7_req_rdata_valid <= sdram_bankmachine7_cmd_ready;
							end
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_229 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_230;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_refresh_gnt <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			if (sdram_bankmachine7_twtpcon_ready) begin
				sdram_bankmachine7_refresh_gnt <= 1'd1;
			end
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_230 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_231;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_valid <= 1'd0;
	case (subfragments_bankmachine7_state)
		1'd1: begin
			if ((sdram_bankmachine7_twtpcon_ready & sdram_bankmachine7_trascon_ready)) begin
				sdram_bankmachine7_cmd_valid <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
			if (sdram_bankmachine7_trccon_ready) begin
				sdram_bankmachine7_cmd_valid <= 1'd1;
			end
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		default: begin
			if (sdram_bankmachine7_refresh_req) begin
			end else begin
				if (sdram_bankmachine7_cmd_buffer_source_valid) begin
					if (sdram_bankmachine7_row_opened) begin
						if (sdram_bankmachine7_row_hit) begin
							sdram_bankmachine7_cmd_valid <= 1'd1;
						end else begin
						end
					end else begin
					end
				end
			end
		end
	endcase
// synthesis translate_off
	dummy_d_231 = dummy_s;
// synthesis translate_on
end
assign sdram_rdcmdphase = (a7ddrphy_rdphase_storage - 1'd1);
assign sdram_wrcmdphase = (a7ddrphy_wrphase_storage - 1'd1);
assign sdram_trrdcon_valid = ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & ((sdram_choose_cmd_cmd_payload_ras & (~sdram_choose_cmd_cmd_payload_cas)) & (~sdram_choose_cmd_cmd_payload_we)));
assign sdram_tfawcon_valid = ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & ((sdram_choose_cmd_cmd_payload_ras & (~sdram_choose_cmd_cmd_payload_cas)) & (~sdram_choose_cmd_cmd_payload_we)));
assign sdram_ras_allowed = (sdram_trrdcon_ready & sdram_tfawcon_ready);
assign sdram_tccdcon_valid = ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_cmd_payload_is_write | sdram_choose_req_cmd_payload_is_read));
assign sdram_cas_allowed = sdram_tccdcon_ready;
assign sdram_twtrcon_valid = ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_is_write);
assign sdram_read_available = ((((((((sdram_bankmachine0_cmd_valid & sdram_bankmachine0_cmd_payload_is_read) | (sdram_bankmachine1_cmd_valid & sdram_bankmachine1_cmd_payload_is_read)) | (sdram_bankmachine2_cmd_valid & sdram_bankmachine2_cmd_payload_is_read)) | (sdram_bankmachine3_cmd_valid & sdram_bankmachine3_cmd_payload_is_read)) | (sdram_bankmachine4_cmd_valid & sdram_bankmachine4_cmd_payload_is_read)) | (sdram_bankmachine5_cmd_valid & sdram_bankmachine5_cmd_payload_is_read)) | (sdram_bankmachine6_cmd_valid & sdram_bankmachine6_cmd_payload_is_read)) | (sdram_bankmachine7_cmd_valid & sdram_bankmachine7_cmd_payload_is_read));
assign sdram_write_available = ((((((((sdram_bankmachine0_cmd_valid & sdram_bankmachine0_cmd_payload_is_write) | (sdram_bankmachine1_cmd_valid & sdram_bankmachine1_cmd_payload_is_write)) | (sdram_bankmachine2_cmd_valid & sdram_bankmachine2_cmd_payload_is_write)) | (sdram_bankmachine3_cmd_valid & sdram_bankmachine3_cmd_payload_is_write)) | (sdram_bankmachine4_cmd_valid & sdram_bankmachine4_cmd_payload_is_write)) | (sdram_bankmachine5_cmd_valid & sdram_bankmachine5_cmd_payload_is_write)) | (sdram_bankmachine6_cmd_valid & sdram_bankmachine6_cmd_payload_is_write)) | (sdram_bankmachine7_cmd_valid & sdram_bankmachine7_cmd_payload_is_write));
assign sdram_max_time0 = (sdram_time0 == 1'd0);
assign sdram_max_time1 = (sdram_time1 == 1'd0);
assign sdram_bankmachine0_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine1_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine2_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine3_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine4_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine5_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine6_refresh_req = sdram_cmd_valid;
assign sdram_bankmachine7_refresh_req = sdram_cmd_valid;
assign sdram_go_to_refresh = (((((((sdram_bankmachine0_refresh_gnt & sdram_bankmachine1_refresh_gnt) & sdram_bankmachine2_refresh_gnt) & sdram_bankmachine3_refresh_gnt) & sdram_bankmachine4_refresh_gnt) & sdram_bankmachine5_refresh_gnt) & sdram_bankmachine6_refresh_gnt) & sdram_bankmachine7_refresh_gnt);
assign sdram_interface_rdata = {sdram_dfi_p1_rddata, sdram_dfi_p0_rddata};
assign {sdram_dfi_p1_wrdata, sdram_dfi_p0_wrdata} = sdram_interface_wdata;
assign {sdram_dfi_p1_wrdata, sdram_dfi_p0_wrdata} = sdram_interface_wdata;
assign {sdram_dfi_p1_wrdata_mask, sdram_dfi_p0_wrdata_mask} = (~sdram_interface_wdata_we);
assign {sdram_dfi_p1_wrdata_mask, sdram_dfi_p0_wrdata_mask} = (~sdram_interface_wdata_we);

// synthesis translate_off
reg dummy_d_232;
// synthesis translate_on
always @(*) begin
	sdram_choose_cmd_valids <= 8'd0;
	sdram_choose_cmd_valids[0] <= (sdram_bankmachine0_cmd_valid & (((sdram_bankmachine0_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine0_cmd_payload_ras & (~sdram_bankmachine0_cmd_payload_cas)) & (~sdram_bankmachine0_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine0_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine0_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[1] <= (sdram_bankmachine1_cmd_valid & (((sdram_bankmachine1_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine1_cmd_payload_ras & (~sdram_bankmachine1_cmd_payload_cas)) & (~sdram_bankmachine1_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine1_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine1_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[2] <= (sdram_bankmachine2_cmd_valid & (((sdram_bankmachine2_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine2_cmd_payload_ras & (~sdram_bankmachine2_cmd_payload_cas)) & (~sdram_bankmachine2_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine2_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine2_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[3] <= (sdram_bankmachine3_cmd_valid & (((sdram_bankmachine3_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine3_cmd_payload_ras & (~sdram_bankmachine3_cmd_payload_cas)) & (~sdram_bankmachine3_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine3_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine3_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[4] <= (sdram_bankmachine4_cmd_valid & (((sdram_bankmachine4_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine4_cmd_payload_ras & (~sdram_bankmachine4_cmd_payload_cas)) & (~sdram_bankmachine4_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine4_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine4_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[5] <= (sdram_bankmachine5_cmd_valid & (((sdram_bankmachine5_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine5_cmd_payload_ras & (~sdram_bankmachine5_cmd_payload_cas)) & (~sdram_bankmachine5_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine5_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine5_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[6] <= (sdram_bankmachine6_cmd_valid & (((sdram_bankmachine6_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine6_cmd_payload_ras & (~sdram_bankmachine6_cmd_payload_cas)) & (~sdram_bankmachine6_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine6_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine6_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
	sdram_choose_cmd_valids[7] <= (sdram_bankmachine7_cmd_valid & (((sdram_bankmachine7_cmd_payload_is_cmd & sdram_choose_cmd_want_cmds) & ((~((sdram_bankmachine7_cmd_payload_ras & (~sdram_bankmachine7_cmd_payload_cas)) & (~sdram_bankmachine7_cmd_payload_we))) | sdram_choose_cmd_want_activates)) | ((sdram_bankmachine7_cmd_payload_is_read == sdram_choose_cmd_want_reads) & (sdram_bankmachine7_cmd_payload_is_write == sdram_choose_cmd_want_writes))));
// synthesis translate_off
	dummy_d_232 = dummy_s;
// synthesis translate_on
end
assign sdram_choose_cmd_request = sdram_choose_cmd_valids;
assign sdram_choose_cmd_cmd_valid = rhs_array_muxed0;
assign sdram_choose_cmd_cmd_payload_a = rhs_array_muxed1;
assign sdram_choose_cmd_cmd_payload_ba = rhs_array_muxed2;
assign sdram_choose_cmd_cmd_payload_is_read = rhs_array_muxed3;
assign sdram_choose_cmd_cmd_payload_is_write = rhs_array_muxed4;
assign sdram_choose_cmd_cmd_payload_is_cmd = rhs_array_muxed5;

// synthesis translate_off
reg dummy_d_233;
// synthesis translate_on
always @(*) begin
	sdram_choose_cmd_cmd_payload_cas <= 1'd0;
	if (sdram_choose_cmd_cmd_valid) begin
		sdram_choose_cmd_cmd_payload_cas <= t_array_muxed0;
	end
// synthesis translate_off
	dummy_d_233 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_234;
// synthesis translate_on
always @(*) begin
	sdram_choose_cmd_cmd_payload_ras <= 1'd0;
	if (sdram_choose_cmd_cmd_valid) begin
		sdram_choose_cmd_cmd_payload_ras <= t_array_muxed1;
	end
// synthesis translate_off
	dummy_d_234 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_235;
// synthesis translate_on
always @(*) begin
	sdram_choose_cmd_cmd_payload_we <= 1'd0;
	if (sdram_choose_cmd_cmd_valid) begin
		sdram_choose_cmd_cmd_payload_we <= t_array_muxed2;
	end
// synthesis translate_off
	dummy_d_235 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_236;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine0_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 1'd0))) begin
		sdram_bankmachine0_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 1'd0))) begin
		sdram_bankmachine0_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_236 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_237;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine1_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 1'd1))) begin
		sdram_bankmachine1_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 1'd1))) begin
		sdram_bankmachine1_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_237 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_238;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine2_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 2'd2))) begin
		sdram_bankmachine2_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 2'd2))) begin
		sdram_bankmachine2_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_238 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_239;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine3_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 2'd3))) begin
		sdram_bankmachine3_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 2'd3))) begin
		sdram_bankmachine3_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_239 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_240;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine4_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 3'd4))) begin
		sdram_bankmachine4_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 3'd4))) begin
		sdram_bankmachine4_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_240 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_241;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine5_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 3'd5))) begin
		sdram_bankmachine5_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 3'd5))) begin
		sdram_bankmachine5_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_241 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_242;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine6_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 3'd6))) begin
		sdram_bankmachine6_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 3'd6))) begin
		sdram_bankmachine6_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_242 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_243;
// synthesis translate_on
always @(*) begin
	sdram_bankmachine7_cmd_ready <= 1'd0;
	if (((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & (sdram_choose_cmd_grant == 3'd7))) begin
		sdram_bankmachine7_cmd_ready <= 1'd1;
	end
	if (((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & (sdram_choose_req_grant == 3'd7))) begin
		sdram_bankmachine7_cmd_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_243 = dummy_s;
// synthesis translate_on
end
assign sdram_choose_cmd_ce = (sdram_choose_cmd_cmd_ready | (~sdram_choose_cmd_cmd_valid));

// synthesis translate_off
reg dummy_d_244;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_valids <= 8'd0;
	sdram_choose_req_valids[0] <= (sdram_bankmachine0_cmd_valid & (((sdram_bankmachine0_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine0_cmd_payload_ras & (~sdram_bankmachine0_cmd_payload_cas)) & (~sdram_bankmachine0_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine0_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine0_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[1] <= (sdram_bankmachine1_cmd_valid & (((sdram_bankmachine1_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine1_cmd_payload_ras & (~sdram_bankmachine1_cmd_payload_cas)) & (~sdram_bankmachine1_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine1_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine1_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[2] <= (sdram_bankmachine2_cmd_valid & (((sdram_bankmachine2_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine2_cmd_payload_ras & (~sdram_bankmachine2_cmd_payload_cas)) & (~sdram_bankmachine2_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine2_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine2_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[3] <= (sdram_bankmachine3_cmd_valid & (((sdram_bankmachine3_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine3_cmd_payload_ras & (~sdram_bankmachine3_cmd_payload_cas)) & (~sdram_bankmachine3_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine3_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine3_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[4] <= (sdram_bankmachine4_cmd_valid & (((sdram_bankmachine4_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine4_cmd_payload_ras & (~sdram_bankmachine4_cmd_payload_cas)) & (~sdram_bankmachine4_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine4_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine4_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[5] <= (sdram_bankmachine5_cmd_valid & (((sdram_bankmachine5_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine5_cmd_payload_ras & (~sdram_bankmachine5_cmd_payload_cas)) & (~sdram_bankmachine5_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine5_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine5_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[6] <= (sdram_bankmachine6_cmd_valid & (((sdram_bankmachine6_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine6_cmd_payload_ras & (~sdram_bankmachine6_cmd_payload_cas)) & (~sdram_bankmachine6_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine6_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine6_cmd_payload_is_write == sdram_choose_req_want_writes))));
	sdram_choose_req_valids[7] <= (sdram_bankmachine7_cmd_valid & (((sdram_bankmachine7_cmd_payload_is_cmd & sdram_choose_req_want_cmds) & ((~((sdram_bankmachine7_cmd_payload_ras & (~sdram_bankmachine7_cmd_payload_cas)) & (~sdram_bankmachine7_cmd_payload_we))) | sdram_choose_req_want_activates)) | ((sdram_bankmachine7_cmd_payload_is_read == sdram_choose_req_want_reads) & (sdram_bankmachine7_cmd_payload_is_write == sdram_choose_req_want_writes))));
// synthesis translate_off
	dummy_d_244 = dummy_s;
// synthesis translate_on
end
assign sdram_choose_req_request = sdram_choose_req_valids;
assign sdram_choose_req_cmd_valid = rhs_array_muxed6;
assign sdram_choose_req_cmd_payload_a = rhs_array_muxed7;
assign sdram_choose_req_cmd_payload_ba = rhs_array_muxed8;
assign sdram_choose_req_cmd_payload_is_read = rhs_array_muxed9;
assign sdram_choose_req_cmd_payload_is_write = rhs_array_muxed10;
assign sdram_choose_req_cmd_payload_is_cmd = rhs_array_muxed11;

// synthesis translate_off
reg dummy_d_245;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_cmd_payload_cas <= 1'd0;
	if (sdram_choose_req_cmd_valid) begin
		sdram_choose_req_cmd_payload_cas <= t_array_muxed3;
	end
// synthesis translate_off
	dummy_d_245 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_246;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_cmd_payload_ras <= 1'd0;
	if (sdram_choose_req_cmd_valid) begin
		sdram_choose_req_cmd_payload_ras <= t_array_muxed4;
	end
// synthesis translate_off
	dummy_d_246 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_247;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_cmd_payload_we <= 1'd0;
	if (sdram_choose_req_cmd_valid) begin
		sdram_choose_req_cmd_payload_we <= t_array_muxed5;
	end
// synthesis translate_off
	dummy_d_247 = dummy_s;
// synthesis translate_on
end
assign sdram_choose_req_ce = (sdram_choose_req_cmd_ready | (~sdram_choose_req_cmd_valid));
assign sdram_dfi_p0_reset_n = 1'd1;
assign sdram_dfi_p0_cke = {1{sdram_steerer0}};
assign sdram_dfi_p0_odt = {1{sdram_steerer1}};
assign sdram_dfi_p1_reset_n = 1'd1;
assign sdram_dfi_p1_cke = {1{sdram_steerer2}};
assign sdram_dfi_p1_odt = {1{sdram_steerer3}};

// synthesis translate_off
reg dummy_d_248;
// synthesis translate_on
always @(*) begin
	subfragments_multiplexer_next_state <= 4'd0;
	subfragments_multiplexer_next_state <= subfragments_multiplexer_state;
	case (subfragments_multiplexer_state)
		1'd1: begin
			if (sdram_read_available) begin
				if (((~sdram_write_available) | sdram_max_time1)) begin
					subfragments_multiplexer_next_state <= 2'd3;
				end
			end
			if (sdram_go_to_refresh) begin
				subfragments_multiplexer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (sdram_cmd_last) begin
				subfragments_multiplexer_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (sdram_twtrcon_ready) begin
				subfragments_multiplexer_next_state <= 1'd0;
			end
		end
		3'd4: begin
			subfragments_multiplexer_next_state <= 3'd5;
		end
		3'd5: begin
			subfragments_multiplexer_next_state <= 3'd6;
		end
		3'd6: begin
			subfragments_multiplexer_next_state <= 3'd7;
		end
		3'd7: begin
			subfragments_multiplexer_next_state <= 4'd8;
		end
		4'd8: begin
			subfragments_multiplexer_next_state <= 4'd9;
		end
		4'd9: begin
			subfragments_multiplexer_next_state <= 4'd10;
		end
		4'd10: begin
			subfragments_multiplexer_next_state <= 1'd1;
		end
		default: begin
			if (sdram_write_available) begin
				if (((~sdram_read_available) | sdram_max_time0)) begin
					subfragments_multiplexer_next_state <= 3'd4;
				end
			end
			if (sdram_go_to_refresh) begin
				subfragments_multiplexer_next_state <= 2'd2;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_248 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_249;
// synthesis translate_on
always @(*) begin
	sdram_steerer_sel1 <= 2'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			sdram_steerer_sel1 <= 1'd0;
			if ((a7ddrphy_wrphase_storage == 1'd1)) begin
				sdram_steerer_sel1 <= 2'd2;
			end
			if ((sdram_wrcmdphase == 1'd1)) begin
				sdram_steerer_sel1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			sdram_steerer_sel1 <= 1'd0;
			if ((a7ddrphy_rdphase_storage == 1'd1)) begin
				sdram_steerer_sel1 <= 2'd2;
			end
			if ((sdram_rdcmdphase == 1'd1)) begin
				sdram_steerer_sel1 <= 1'd1;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_249 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_250;
// synthesis translate_on
always @(*) begin
	sdram_choose_cmd_want_activates <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			if (1'd0) begin
			end else begin
				sdram_choose_cmd_want_activates <= sdram_ras_allowed;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			if (1'd0) begin
			end else begin
				sdram_choose_cmd_want_activates <= sdram_ras_allowed;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_250 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_251;
// synthesis translate_on
always @(*) begin
	sdram_choose_cmd_cmd_ready <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			if (1'd0) begin
			end else begin
				sdram_choose_cmd_cmd_ready <= ((~((sdram_choose_cmd_cmd_payload_ras & (~sdram_choose_cmd_cmd_payload_cas)) & (~sdram_choose_cmd_cmd_payload_we))) | sdram_ras_allowed);
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			if (1'd0) begin
			end else begin
				sdram_choose_cmd_cmd_ready <= ((~((sdram_choose_cmd_cmd_payload_ras & (~sdram_choose_cmd_cmd_payload_cas)) & (~sdram_choose_cmd_cmd_payload_we))) | sdram_ras_allowed);
			end
		end
	endcase
// synthesis translate_off
	dummy_d_251 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_252;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_want_reads <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			sdram_choose_req_want_reads <= 1'd1;
		end
	endcase
// synthesis translate_off
	dummy_d_252 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_253;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_want_writes <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			sdram_choose_req_want_writes <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_253 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_254;
// synthesis translate_on
always @(*) begin
	sdram_en0 <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			sdram_en0 <= 1'd1;
		end
	endcase
// synthesis translate_off
	dummy_d_254 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_255;
// synthesis translate_on
always @(*) begin
	sdram_choose_req_cmd_ready <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			if (1'd0) begin
				sdram_choose_req_cmd_ready <= (sdram_cas_allowed & ((~((sdram_choose_req_cmd_payload_ras & (~sdram_choose_req_cmd_payload_cas)) & (~sdram_choose_req_cmd_payload_we))) | sdram_ras_allowed));
			end else begin
				sdram_choose_req_cmd_ready <= sdram_cas_allowed;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			if (1'd0) begin
				sdram_choose_req_cmd_ready <= (sdram_cas_allowed & ((~((sdram_choose_req_cmd_payload_ras & (~sdram_choose_req_cmd_payload_cas)) & (~sdram_choose_req_cmd_payload_we))) | sdram_ras_allowed));
			end else begin
				sdram_choose_req_cmd_ready <= sdram_cas_allowed;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_255 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_256;
// synthesis translate_on
always @(*) begin
	sdram_cmd_ready <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
		end
		2'd2: begin
			sdram_cmd_ready <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_256 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_257;
// synthesis translate_on
always @(*) begin
	sdram_en1 <= 1'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			sdram_en1 <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_257 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_258;
// synthesis translate_on
always @(*) begin
	sdram_steerer_sel0 <= 2'd0;
	case (subfragments_multiplexer_state)
		1'd1: begin
			sdram_steerer_sel0 <= 1'd0;
			if ((a7ddrphy_wrphase_storage == 1'd0)) begin
				sdram_steerer_sel0 <= 2'd2;
			end
			if ((sdram_wrcmdphase == 1'd0)) begin
				sdram_steerer_sel0 <= 1'd1;
			end
		end
		2'd2: begin
			sdram_steerer_sel0 <= 2'd3;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		3'd5: begin
		end
		3'd6: begin
		end
		3'd7: begin
		end
		4'd8: begin
		end
		4'd9: begin
		end
		4'd10: begin
		end
		default: begin
			sdram_steerer_sel0 <= 1'd0;
			if ((a7ddrphy_rdphase_storage == 1'd0)) begin
				sdram_steerer_sel0 <= 2'd2;
			end
			if ((sdram_rdcmdphase == 1'd0)) begin
				sdram_steerer_sel0 <= 1'd1;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_258 = dummy_s;
// synthesis translate_on
end
assign subfragments_roundrobin0_request = {(((cmd_payload_addr[10:8] == 1'd0) & (~(((((((subfragments_locked1 | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 1'd0) & (~(((((((subfragments_locked0 | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin0_ce = ((~sdram_interface_bank0_valid) & (~sdram_interface_bank0_lock));
assign sdram_interface_bank0_addr = rhs_array_muxed12;
assign sdram_interface_bank0_we = rhs_array_muxed13;
assign sdram_interface_bank0_valid = rhs_array_muxed14;
assign subfragments_roundrobin1_request = {(((cmd_payload_addr[10:8] == 1'd1) & (~(((((((subfragments_locked3 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 1'd1) & (~(((((((subfragments_locked2 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin1_ce = ((~sdram_interface_bank1_valid) & (~sdram_interface_bank1_lock));
assign sdram_interface_bank1_addr = rhs_array_muxed15;
assign sdram_interface_bank1_we = rhs_array_muxed16;
assign sdram_interface_bank1_valid = rhs_array_muxed17;
assign subfragments_roundrobin2_request = {(((cmd_payload_addr[10:8] == 2'd2) & (~(((((((subfragments_locked5 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 2'd2) & (~(((((((subfragments_locked4 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin2_ce = ((~sdram_interface_bank2_valid) & (~sdram_interface_bank2_lock));
assign sdram_interface_bank2_addr = rhs_array_muxed18;
assign sdram_interface_bank2_we = rhs_array_muxed19;
assign sdram_interface_bank2_valid = rhs_array_muxed20;
assign subfragments_roundrobin3_request = {(((cmd_payload_addr[10:8] == 2'd3) & (~(((((((subfragments_locked7 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 2'd3) & (~(((((((subfragments_locked6 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin3_ce = ((~sdram_interface_bank3_valid) & (~sdram_interface_bank3_lock));
assign sdram_interface_bank3_addr = rhs_array_muxed21;
assign sdram_interface_bank3_we = rhs_array_muxed22;
assign sdram_interface_bank3_valid = rhs_array_muxed23;
assign subfragments_roundrobin4_request = {(((cmd_payload_addr[10:8] == 3'd4) & (~(((((((subfragments_locked9 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 3'd4) & (~(((((((subfragments_locked8 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin4_ce = ((~sdram_interface_bank4_valid) & (~sdram_interface_bank4_lock));
assign sdram_interface_bank4_addr = rhs_array_muxed24;
assign sdram_interface_bank4_we = rhs_array_muxed25;
assign sdram_interface_bank4_valid = rhs_array_muxed26;
assign subfragments_roundrobin5_request = {(((cmd_payload_addr[10:8] == 3'd5) & (~(((((((subfragments_locked11 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 3'd5) & (~(((((((subfragments_locked10 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin5_ce = ((~sdram_interface_bank5_valid) & (~sdram_interface_bank5_lock));
assign sdram_interface_bank5_addr = rhs_array_muxed27;
assign sdram_interface_bank5_we = rhs_array_muxed28;
assign sdram_interface_bank5_valid = rhs_array_muxed29;
assign subfragments_roundrobin6_request = {(((cmd_payload_addr[10:8] == 3'd6) & (~(((((((subfragments_locked13 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 3'd6) & (~(((((((subfragments_locked12 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin6_ce = ((~sdram_interface_bank6_valid) & (~sdram_interface_bank6_lock));
assign sdram_interface_bank6_addr = rhs_array_muxed30;
assign sdram_interface_bank6_we = rhs_array_muxed31;
assign sdram_interface_bank6_valid = rhs_array_muxed32;
assign subfragments_roundrobin7_request = {(((cmd_payload_addr[10:8] == 3'd7) & (~(((((((subfragments_locked15 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))))) & cmd_valid), (((port_cmd_payload_addr[10:8] == 3'd7) & (~(((((((subfragments_locked14 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))))) & port_cmd_valid)};
assign subfragments_roundrobin7_ce = ((~sdram_interface_bank7_valid) & (~sdram_interface_bank7_lock));
assign sdram_interface_bank7_addr = rhs_array_muxed33;
assign sdram_interface_bank7_we = rhs_array_muxed34;
assign sdram_interface_bank7_valid = rhs_array_muxed35;
assign port_cmd_ready = ((((((((1'd0 | (((subfragments_roundrobin0_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 1'd0) & (~(((((((subfragments_locked0 | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank0_ready)) | (((subfragments_roundrobin1_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 1'd1) & (~(((((((subfragments_locked2 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank1_ready)) | (((subfragments_roundrobin2_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 2'd2) & (~(((((((subfragments_locked4 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank2_ready)) | (((subfragments_roundrobin3_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 2'd3) & (~(((((((subfragments_locked6 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank3_ready)) | (((subfragments_roundrobin4_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 3'd4) & (~(((((((subfragments_locked8 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank4_ready)) | (((subfragments_roundrobin5_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 3'd5) & (~(((((((subfragments_locked10 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank5_ready)) | (((subfragments_roundrobin6_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 3'd6) & (~(((((((subfragments_locked12 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0)))))) & sdram_interface_bank6_ready)) | (((subfragments_roundrobin7_grant == 1'd0) & ((port_cmd_payload_addr[10:8] == 3'd7) & (~(((((((subfragments_locked14 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0)))))) & sdram_interface_bank7_ready));
assign cmd_ready = ((((((((1'd0 | (((subfragments_roundrobin0_grant == 1'd1) & ((cmd_payload_addr[10:8] == 1'd0) & (~(((((((subfragments_locked1 | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank0_ready)) | (((subfragments_roundrobin1_grant == 1'd1) & ((cmd_payload_addr[10:8] == 1'd1) & (~(((((((subfragments_locked3 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank1_ready)) | (((subfragments_roundrobin2_grant == 1'd1) & ((cmd_payload_addr[10:8] == 2'd2) & (~(((((((subfragments_locked5 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank2_ready)) | (((subfragments_roundrobin3_grant == 1'd1) & ((cmd_payload_addr[10:8] == 2'd3) & (~(((((((subfragments_locked7 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank3_ready)) | (((subfragments_roundrobin4_grant == 1'd1) & ((cmd_payload_addr[10:8] == 3'd4) & (~(((((((subfragments_locked9 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank4_ready)) | (((subfragments_roundrobin5_grant == 1'd1) & ((cmd_payload_addr[10:8] == 3'd5) & (~(((((((subfragments_locked11 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank5_ready)) | (((subfragments_roundrobin6_grant == 1'd1) & ((cmd_payload_addr[10:8] == 3'd6) & (~(((((((subfragments_locked13 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1)))))) & sdram_interface_bank6_ready)) | (((subfragments_roundrobin7_grant == 1'd1) & ((cmd_payload_addr[10:8] == 3'd7) & (~(((((((subfragments_locked15 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1)))))) & sdram_interface_bank7_ready));
assign port_wdata_ready = subfragments_new_master_wdata_ready0;
assign wdata_ready = subfragments_new_master_wdata_ready1;
assign port_rdata_valid = subfragments_new_master_rdata_valid8;
assign rdata_valid = subfragments_new_master_rdata_valid17;

// synthesis translate_off
reg dummy_d_259;
// synthesis translate_on
always @(*) begin
	sdram_interface_wdata <= 64'd0;
	case ({subfragments_new_master_wdata_ready1, subfragments_new_master_wdata_ready0})
		1'd1: begin
			sdram_interface_wdata <= port_wdata_payload_data;
		end
		2'd2: begin
			sdram_interface_wdata <= wdata_payload_data;
		end
		default: begin
			sdram_interface_wdata <= 1'd0;
		end
	endcase
// synthesis translate_off
	dummy_d_259 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_260;
// synthesis translate_on
always @(*) begin
	sdram_interface_wdata_we <= 8'd0;
	case ({subfragments_new_master_wdata_ready1, subfragments_new_master_wdata_ready0})
		1'd1: begin
			sdram_interface_wdata_we <= port_wdata_payload_we;
		end
		2'd2: begin
			sdram_interface_wdata_we <= wdata_payload_we;
		end
		default: begin
			sdram_interface_wdata_we <= 1'd0;
		end
	endcase
// synthesis translate_off
	dummy_d_260 = dummy_s;
// synthesis translate_on
end
assign port_rdata_payload_data = sdram_interface_rdata;
assign rdata_payload_data = sdram_interface_rdata;
assign data_port_adr = wb_sdram_adr[1];

// synthesis translate_off
reg dummy_d_261;
// synthesis translate_on
always @(*) begin
	data_port_we <= 8'd0;
	if (write_from_slave) begin
		data_port_we <= {8{1'd1}};
	end else begin
		if ((((wb_sdram_cyc & wb_sdram_stb) & wb_sdram_we) & wb_sdram_ack)) begin
			data_port_we <= {({4{(wb_sdram_adr[0] == 1'd0)}} & wb_sdram_sel), ({4{(wb_sdram_adr[0] == 1'd1)}} & wb_sdram_sel)};
		end
	end
// synthesis translate_off
	dummy_d_261 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_262;
// synthesis translate_on
always @(*) begin
	data_port_dat_w <= 64'd0;
	if (write_from_slave) begin
		data_port_dat_w <= interface_dat_r;
	end else begin
		data_port_dat_w <= {2{wb_sdram_dat_w}};
	end
// synthesis translate_off
	dummy_d_262 = dummy_s;
// synthesis translate_on
end
assign interface_dat_w = data_port_dat_r;
assign interface_sel = 8'd255;

// synthesis translate_off
reg dummy_d_263;
// synthesis translate_on
always @(*) begin
	wb_sdram_dat_r <= 32'd0;
	case (adr_offset_r)
		1'd0: begin
			wb_sdram_dat_r <= data_port_dat_r[63:32];
		end
		default: begin
			wb_sdram_dat_r <= data_port_dat_r[31:0];
		end
	endcase
// synthesis translate_off
	dummy_d_263 = dummy_s;
// synthesis translate_on
end
assign {tag_do_dirty, tag_do_tag} = tag_port_dat_r;
assign {tag_do_dirty, tag_do_tag} = tag_port_dat_r;
assign tag_port_dat_w = {tag_di_dirty, tag_di_tag};
assign tag_port_adr = wb_sdram_adr[1];
assign tag_di_tag = wb_sdram_adr[29:2];
assign interface_adr = {tag_do_tag, wb_sdram_adr[1]};

// synthesis translate_off
reg dummy_d_264;
// synthesis translate_on
always @(*) begin
	subfragments_next_state <= 2'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			if ((tag_do_tag == wb_sdram_adr[29:2])) begin
				subfragments_next_state <= 1'd0;
			end else begin
				if (tag_do_dirty) begin
					subfragments_next_state <= 2'd2;
				end else begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			if (interface_ack) begin
				if (1'd1) begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			if (interface_ack) begin
				if (1'd1) begin
					subfragments_next_state <= 1'd1;
				end else begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		default: begin
			if ((wb_sdram_cyc & wb_sdram_stb)) begin
				subfragments_next_state <= 1'd1;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_264 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_265;
// synthesis translate_on
always @(*) begin
	tag_di_dirty <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((tag_do_tag == wb_sdram_adr[29:2])) begin
				if (wb_sdram_we) begin
					tag_di_dirty <= 1'd1;
				end
			end else begin
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_265 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_266;
// synthesis translate_on
always @(*) begin
	interface_we <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			interface_we <= 1'd1;
		end
		2'd3: begin
			interface_we <= 1'd0;
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_266 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_267;
// synthesis translate_on
always @(*) begin
	word_clr <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			word_clr <= 1'd1;
			if ((tag_do_tag == wb_sdram_adr[29:2])) begin
			end else begin
				if (tag_do_dirty) begin
				end else begin
					word_clr <= 1'd1;
				end
			end
		end
		2'd2: begin
			if (interface_ack) begin
				if (1'd1) begin
					word_clr <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_267 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_268;
// synthesis translate_on
always @(*) begin
	word_inc <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			if (interface_ack) begin
				word_inc <= 1'd1;
			end
		end
		2'd3: begin
			if (interface_ack) begin
				word_inc <= 1'd1;
			end
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_268 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_269;
// synthesis translate_on
always @(*) begin
	wb_sdram_ack <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((tag_do_tag == wb_sdram_adr[29:2])) begin
				wb_sdram_ack <= 1'd1;
			end else begin
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_269 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_270;
// synthesis translate_on
always @(*) begin
	tag_port_we <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((tag_do_tag == wb_sdram_adr[29:2])) begin
				if (wb_sdram_we) begin
					tag_port_we <= 1'd1;
				end
			end else begin
				if (tag_do_dirty) begin
				end else begin
					tag_port_we <= 1'd1;
				end
			end
		end
		2'd2: begin
			if (interface_ack) begin
				if (1'd1) begin
					tag_port_we <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_270 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_271;
// synthesis translate_on
always @(*) begin
	write_from_slave <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (interface_ack) begin
				write_from_slave <= 1'd1;
			end
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_271 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_272;
// synthesis translate_on
always @(*) begin
	interface_cyc <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			interface_cyc <= 1'd1;
		end
		2'd3: begin
			interface_cyc <= 1'd1;
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_272 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_273;
// synthesis translate_on
always @(*) begin
	interface_stb <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			interface_stb <= 1'd1;
		end
		2'd3: begin
			interface_stb <= 1'd1;
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_273 = dummy_s;
// synthesis translate_on
end
assign port_cmd_payload_addr = (interface_adr - 28'd134217728);
assign port_cmd_payload_we = interface_we;
assign port_wdata_payload_data = interface_dat_w;
assign port_wdata_payload_we = interface_sel;
assign interface_dat_r = port_rdata_payload_data;
assign port_flush = (~interface_cyc);
assign port_cmd_last = (~interface_we);
assign port_cmd_valid = ((interface_cyc & interface_stb) & (~cmd_consumed));
assign port_wdata_valid = (((port_cmd_valid | cmd_consumed) & port_cmd_payload_we) & (~wdata_consumed));
assign port_rdata_ready = ((port_cmd_valid | cmd_consumed) & (~port_cmd_payload_we));
assign interface_ack = (ack_cmd & ((interface_we & ack_wdata) | ((~interface_we) & ack_rdata)));
assign ack_cmd = ((port_cmd_valid & port_cmd_ready) | cmd_consumed);
assign ack_wdata = ((port_wdata_valid & port_wdata_ready) | wdata_consumed);
assign ack_rdata = (port_rdata_valid & port_rdata_ready);
assign ce = ((~cmd_valid) | cmd_ready);

// synthesis translate_off
reg dummy_d_274;
// synthesis translate_on
always @(*) begin
	request <= 2'd0;
	request[0] <= write_cmd_request;
	request[1] <= read_cmd_request;
// synthesis translate_off
	dummy_d_274 = dummy_s;
// synthesis translate_on
end
assign write_cmd_grant = (grant == 1'd0);
assign read_cmd_grant = (grant == 1'd1);
assign write_aw_buffer_sink_valid = aw_valid;
assign aw_ready = write_aw_buffer_sink_ready;
assign write_aw_buffer_sink_first = aw_first;
assign write_aw_buffer_sink_last = aw_last;
assign write_aw_buffer_sink_payload_addr = aw_payload_addr;
assign write_aw_buffer_sink_payload_burst = aw_payload_burst;
assign write_aw_buffer_sink_payload_len = aw_payload_len;
assign write_aw_buffer_sink_payload_size = aw_payload_size;
assign write_aw_buffer_sink_payload_lock = aw_payload_lock;
assign write_aw_buffer_sink_payload_prot = aw_payload_prot;
assign write_aw_buffer_sink_payload_cache = aw_payload_cache;
assign write_aw_buffer_sink_payload_qos = aw_payload_qos;
assign write_aw_buffer_sink_payload_id = aw_payload_id;
assign write_id_buffer_sink_valid = ((write_aw_valid & write_aw_first) & write_aw_ready);
assign write_id_buffer_sink_payload_id = write_aw_payload_id;

// synthesis translate_off
reg dummy_d_275;
// synthesis translate_on
always @(*) begin
	write_resp_buffer_sink_payload_id <= 6'd0;
	if (((write_w_buffer_source_valid & write_w_buffer_source_last) & write_w_buffer_source_ready)) begin
		write_resp_buffer_sink_payload_id <= write_id_buffer_source_payload_id;
	end
// synthesis translate_off
	dummy_d_275 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_276;
// synthesis translate_on
always @(*) begin
	write_resp_buffer_sink_valid <= 1'd0;
	if (((write_w_buffer_source_valid & write_w_buffer_source_last) & write_w_buffer_source_ready)) begin
		write_resp_buffer_sink_valid <= 1'd1;
	end
// synthesis translate_off
	dummy_d_276 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_277;
// synthesis translate_on
always @(*) begin
	write_resp_buffer_sink_payload_resp <= 2'd0;
	if (((write_w_buffer_source_valid & write_w_buffer_source_last) & write_w_buffer_source_ready)) begin
		write_resp_buffer_sink_payload_resp <= 1'd0;
	end
// synthesis translate_off
	dummy_d_277 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_278;
// synthesis translate_on
always @(*) begin
	write_id_buffer_source_ready <= 1'd0;
	if (((write_w_buffer_source_valid & write_w_buffer_source_last) & write_w_buffer_source_ready)) begin
		write_id_buffer_source_ready <= 1'd1;
	end
// synthesis translate_off
	dummy_d_278 = dummy_s;
// synthesis translate_on
end
assign b_valid = write_resp_buffer_source_valid;
assign write_resp_buffer_source_ready = b_ready;
assign b_first = write_resp_buffer_source_first;
assign b_last = write_resp_buffer_source_last;
assign b_payload_id = write_resp_buffer_source_payload_id;
assign b_payload_resp = write_resp_buffer_source_payload_resp;
assign write_cmd_request = ((write_aw_valid & w_valid) & write_w_buffer_sink_ready);

// synthesis translate_off
reg dummy_d_279;
// synthesis translate_on
always @(*) begin
	cmd_valid <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		cmd_valid <= 1'd1;
	end
	if (read_cmd_grant) begin
		cmd_valid <= (read_ar_valid & read_can_read);
	end
// synthesis translate_off
	dummy_d_279 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_280;
// synthesis translate_on
always @(*) begin
	write_w_buffer_sink_last <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		write_w_buffer_sink_last <= w_last;
	end
// synthesis translate_off
	dummy_d_280 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_281;
// synthesis translate_on
always @(*) begin
	write_w_buffer_sink_payload_data <= 64'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		write_w_buffer_sink_payload_data <= w_payload_data;
	end
// synthesis translate_off
	dummy_d_281 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_282;
// synthesis translate_on
always @(*) begin
	write_w_buffer_sink_payload_strb <= 8'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		write_w_buffer_sink_payload_strb <= w_payload_strb;
	end
// synthesis translate_off
	dummy_d_282 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_283;
// synthesis translate_on
always @(*) begin
	write_w_buffer_sink_payload_id <= 6'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		write_w_buffer_sink_payload_id <= w_payload_id;
	end
// synthesis translate_off
	dummy_d_283 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_284;
// synthesis translate_on
always @(*) begin
	cmd_payload_we <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		cmd_payload_we <= 1'd1;
	end
	if (read_cmd_grant) begin
		cmd_payload_we <= 1'd0;
	end
// synthesis translate_off
	dummy_d_284 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_285;
// synthesis translate_on
always @(*) begin
	cmd_payload_addr <= 24'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		cmd_payload_addr <= ((write_aw_payload_addr - 1'd0) >>> 2'd3);
	end
	if (read_cmd_grant) begin
		cmd_payload_addr <= ((read_ar_payload_addr - 1'd0) >>> 2'd3);
	end
// synthesis translate_off
	dummy_d_285 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_286;
// synthesis translate_on
always @(*) begin
	write_w_buffer_sink_valid <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		if (cmd_ready) begin
			write_w_buffer_sink_valid <= 1'd1;
		end
	end
// synthesis translate_off
	dummy_d_286 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_287;
// synthesis translate_on
always @(*) begin
	write_aw_ready <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		write_aw_ready <= cmd_ready;
	end
// synthesis translate_off
	dummy_d_287 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_288;
// synthesis translate_on
always @(*) begin
	w_ready <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		if (cmd_ready) begin
			w_ready <= 1'd1;
		end
	end
// synthesis translate_off
	dummy_d_288 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_289;
// synthesis translate_on
always @(*) begin
	write_w_buffer_sink_first <= 1'd0;
	if ((write_cmd_request & write_cmd_grant)) begin
		write_w_buffer_sink_first <= w_first;
	end
// synthesis translate_off
	dummy_d_289 = dummy_s;
// synthesis translate_on
end
assign wdata_valid = write_w_buffer_source_valid;
assign write_w_buffer_source_ready = wdata_ready;
assign wdata_first = write_w_buffer_source_first;
assign wdata_last = write_w_buffer_source_last;
assign wdata_payload_data = write_w_buffer_source_payload_data;
assign wdata_payload_we = write_w_buffer_source_payload_strb;
assign write_aw_buffer_sink_ready = ((~write_aw_buffer_source_valid) | write_aw_buffer_source_ready);
assign write_beat_size = (1'd1 <<< write_aw_buffer_source_payload_size);
assign write_beat_wrap = (write_aw_buffer_source_payload_len <<< write_aw_buffer_source_payload_size);
assign write_aw_valid = (write_aw_buffer_source_valid | (~write_aw_first));
assign write_aw_first = (write_beat_count == 1'd0);
assign write_aw_last = (write_beat_count == write_aw_buffer_source_payload_len);
assign write_aw_payload_addr = (write_aw_buffer_source_payload_addr + write_beat_offset);
assign write_aw_payload_id = write_aw_buffer_source_payload_id;

// synthesis translate_off
reg dummy_d_290;
// synthesis translate_on
always @(*) begin
	write_aw_buffer_source_ready <= 1'd0;
	if (write_aw_ready) begin
		if (write_aw_last) begin
			write_aw_buffer_source_ready <= 1'd1;
		end
	end
// synthesis translate_off
	dummy_d_290 = dummy_s;
// synthesis translate_on
end
assign write_w_buffer_syncfifo_din = {write_w_buffer_fifo_in_last, write_w_buffer_fifo_in_first, write_w_buffer_fifo_in_payload_id, write_w_buffer_fifo_in_payload_strb, write_w_buffer_fifo_in_payload_data};
assign {write_w_buffer_fifo_out_last, write_w_buffer_fifo_out_first, write_w_buffer_fifo_out_payload_id, write_w_buffer_fifo_out_payload_strb, write_w_buffer_fifo_out_payload_data} = write_w_buffer_syncfifo_dout;
assign {write_w_buffer_fifo_out_last, write_w_buffer_fifo_out_first, write_w_buffer_fifo_out_payload_id, write_w_buffer_fifo_out_payload_strb, write_w_buffer_fifo_out_payload_data} = write_w_buffer_syncfifo_dout;
assign {write_w_buffer_fifo_out_last, write_w_buffer_fifo_out_first, write_w_buffer_fifo_out_payload_id, write_w_buffer_fifo_out_payload_strb, write_w_buffer_fifo_out_payload_data} = write_w_buffer_syncfifo_dout;
assign {write_w_buffer_fifo_out_last, write_w_buffer_fifo_out_first, write_w_buffer_fifo_out_payload_id, write_w_buffer_fifo_out_payload_strb, write_w_buffer_fifo_out_payload_data} = write_w_buffer_syncfifo_dout;
assign {write_w_buffer_fifo_out_last, write_w_buffer_fifo_out_first, write_w_buffer_fifo_out_payload_id, write_w_buffer_fifo_out_payload_strb, write_w_buffer_fifo_out_payload_data} = write_w_buffer_syncfifo_dout;
assign write_w_buffer_sink_ready = write_w_buffer_syncfifo_writable;
assign write_w_buffer_syncfifo_we = write_w_buffer_sink_valid;
assign write_w_buffer_fifo_in_first = write_w_buffer_sink_first;
assign write_w_buffer_fifo_in_last = write_w_buffer_sink_last;
assign write_w_buffer_fifo_in_payload_data = write_w_buffer_sink_payload_data;
assign write_w_buffer_fifo_in_payload_strb = write_w_buffer_sink_payload_strb;
assign write_w_buffer_fifo_in_payload_id = write_w_buffer_sink_payload_id;
assign write_w_buffer_source_valid = write_w_buffer_readable;
assign write_w_buffer_source_first = write_w_buffer_fifo_out_first;
assign write_w_buffer_source_last = write_w_buffer_fifo_out_last;
assign write_w_buffer_source_payload_data = write_w_buffer_fifo_out_payload_data;
assign write_w_buffer_source_payload_strb = write_w_buffer_fifo_out_payload_strb;
assign write_w_buffer_source_payload_id = write_w_buffer_fifo_out_payload_id;
assign write_w_buffer_re = write_w_buffer_source_ready;
assign write_w_buffer_syncfifo_re = (write_w_buffer_syncfifo_readable & ((~write_w_buffer_readable) | write_w_buffer_re));
assign write_w_buffer_level1 = (write_w_buffer_level0 + write_w_buffer_readable);

// synthesis translate_off
reg dummy_d_291;
// synthesis translate_on
always @(*) begin
	write_w_buffer_wrport_adr <= 4'd0;
	if (write_w_buffer_replace) begin
		write_w_buffer_wrport_adr <= (write_w_buffer_produce - 1'd1);
	end else begin
		write_w_buffer_wrport_adr <= write_w_buffer_produce;
	end
// synthesis translate_off
	dummy_d_291 = dummy_s;
// synthesis translate_on
end
assign write_w_buffer_wrport_dat_w = write_w_buffer_syncfifo_din;
assign write_w_buffer_wrport_we = (write_w_buffer_syncfifo_we & (write_w_buffer_syncfifo_writable | write_w_buffer_replace));
assign write_w_buffer_do_read = (write_w_buffer_syncfifo_readable & write_w_buffer_syncfifo_re);
assign write_w_buffer_rdport_adr = write_w_buffer_consume;
assign write_w_buffer_syncfifo_dout = write_w_buffer_rdport_dat_r;
assign write_w_buffer_rdport_re = write_w_buffer_do_read;
assign write_w_buffer_syncfifo_writable = (write_w_buffer_level0 != 5'd16);
assign write_w_buffer_syncfifo_readable = (write_w_buffer_level0 != 1'd0);
assign write_id_buffer_syncfifo_din = {write_id_buffer_fifo_in_last, write_id_buffer_fifo_in_first, write_id_buffer_fifo_in_payload_id};
assign {write_id_buffer_fifo_out_last, write_id_buffer_fifo_out_first, write_id_buffer_fifo_out_payload_id} = write_id_buffer_syncfifo_dout;
assign {write_id_buffer_fifo_out_last, write_id_buffer_fifo_out_first, write_id_buffer_fifo_out_payload_id} = write_id_buffer_syncfifo_dout;
assign {write_id_buffer_fifo_out_last, write_id_buffer_fifo_out_first, write_id_buffer_fifo_out_payload_id} = write_id_buffer_syncfifo_dout;
assign write_id_buffer_sink_ready = write_id_buffer_syncfifo_writable;
assign write_id_buffer_syncfifo_we = write_id_buffer_sink_valid;
assign write_id_buffer_fifo_in_first = write_id_buffer_sink_first;
assign write_id_buffer_fifo_in_last = write_id_buffer_sink_last;
assign write_id_buffer_fifo_in_payload_id = write_id_buffer_sink_payload_id;
assign write_id_buffer_source_valid = write_id_buffer_syncfifo_readable;
assign write_id_buffer_source_first = write_id_buffer_fifo_out_first;
assign write_id_buffer_source_last = write_id_buffer_fifo_out_last;
assign write_id_buffer_source_payload_id = write_id_buffer_fifo_out_payload_id;
assign write_id_buffer_syncfifo_re = write_id_buffer_source_ready;

// synthesis translate_off
reg dummy_d_292;
// synthesis translate_on
always @(*) begin
	write_id_buffer_wrport_adr <= 4'd0;
	if (write_id_buffer_replace) begin
		write_id_buffer_wrport_adr <= (write_id_buffer_produce - 1'd1);
	end else begin
		write_id_buffer_wrport_adr <= write_id_buffer_produce;
	end
// synthesis translate_off
	dummy_d_292 = dummy_s;
// synthesis translate_on
end
assign write_id_buffer_wrport_dat_w = write_id_buffer_syncfifo_din;
assign write_id_buffer_wrport_we = (write_id_buffer_syncfifo_we & (write_id_buffer_syncfifo_writable | write_id_buffer_replace));
assign write_id_buffer_do_read = (write_id_buffer_syncfifo_readable & write_id_buffer_syncfifo_re);
assign write_id_buffer_rdport_adr = write_id_buffer_consume;
assign write_id_buffer_syncfifo_dout = write_id_buffer_rdport_dat_r;
assign write_id_buffer_syncfifo_writable = (write_id_buffer_level != 5'd16);
assign write_id_buffer_syncfifo_readable = (write_id_buffer_level != 1'd0);
assign write_resp_buffer_syncfifo_din = {write_resp_buffer_fifo_in_last, write_resp_buffer_fifo_in_first, write_resp_buffer_fifo_in_payload_resp, write_resp_buffer_fifo_in_payload_id};
assign {write_resp_buffer_fifo_out_last, write_resp_buffer_fifo_out_first, write_resp_buffer_fifo_out_payload_resp, write_resp_buffer_fifo_out_payload_id} = write_resp_buffer_syncfifo_dout;
assign {write_resp_buffer_fifo_out_last, write_resp_buffer_fifo_out_first, write_resp_buffer_fifo_out_payload_resp, write_resp_buffer_fifo_out_payload_id} = write_resp_buffer_syncfifo_dout;
assign {write_resp_buffer_fifo_out_last, write_resp_buffer_fifo_out_first, write_resp_buffer_fifo_out_payload_resp, write_resp_buffer_fifo_out_payload_id} = write_resp_buffer_syncfifo_dout;
assign {write_resp_buffer_fifo_out_last, write_resp_buffer_fifo_out_first, write_resp_buffer_fifo_out_payload_resp, write_resp_buffer_fifo_out_payload_id} = write_resp_buffer_syncfifo_dout;
assign write_resp_buffer_sink_ready = write_resp_buffer_syncfifo_writable;
assign write_resp_buffer_syncfifo_we = write_resp_buffer_sink_valid;
assign write_resp_buffer_fifo_in_first = write_resp_buffer_sink_first;
assign write_resp_buffer_fifo_in_last = write_resp_buffer_sink_last;
assign write_resp_buffer_fifo_in_payload_id = write_resp_buffer_sink_payload_id;
assign write_resp_buffer_fifo_in_payload_resp = write_resp_buffer_sink_payload_resp;
assign write_resp_buffer_source_valid = write_resp_buffer_syncfifo_readable;
assign write_resp_buffer_source_first = write_resp_buffer_fifo_out_first;
assign write_resp_buffer_source_last = write_resp_buffer_fifo_out_last;
assign write_resp_buffer_source_payload_id = write_resp_buffer_fifo_out_payload_id;
assign write_resp_buffer_source_payload_resp = write_resp_buffer_fifo_out_payload_resp;
assign write_resp_buffer_syncfifo_re = write_resp_buffer_source_ready;

// synthesis translate_off
reg dummy_d_293;
// synthesis translate_on
always @(*) begin
	write_resp_buffer_wrport_adr <= 4'd0;
	if (write_resp_buffer_replace) begin
		write_resp_buffer_wrport_adr <= (write_resp_buffer_produce - 1'd1);
	end else begin
		write_resp_buffer_wrport_adr <= write_resp_buffer_produce;
	end
// synthesis translate_off
	dummy_d_293 = dummy_s;
// synthesis translate_on
end
assign write_resp_buffer_wrport_dat_w = write_resp_buffer_syncfifo_din;
assign write_resp_buffer_wrport_we = (write_resp_buffer_syncfifo_we & (write_resp_buffer_syncfifo_writable | write_resp_buffer_replace));
assign write_resp_buffer_do_read = (write_resp_buffer_syncfifo_readable & write_resp_buffer_syncfifo_re);
assign write_resp_buffer_rdport_adr = write_resp_buffer_consume;
assign write_resp_buffer_syncfifo_dout = write_resp_buffer_rdport_dat_r;
assign write_resp_buffer_syncfifo_writable = (write_resp_buffer_level != 5'd16);
assign write_resp_buffer_syncfifo_readable = (write_resp_buffer_level != 1'd0);
assign read_ar_buffer_sink_valid = ar_valid;
assign ar_ready = read_ar_buffer_sink_ready;
assign read_ar_buffer_sink_first = ar_first;
assign read_ar_buffer_sink_last = ar_last;
assign read_ar_buffer_sink_payload_addr = ar_payload_addr;
assign read_ar_buffer_sink_payload_burst = ar_payload_burst;
assign read_ar_buffer_sink_payload_len = ar_payload_len;
assign read_ar_buffer_sink_payload_size = ar_payload_size;
assign read_ar_buffer_sink_payload_lock = ar_payload_lock;
assign read_ar_buffer_sink_payload_prot = ar_payload_prot;
assign read_ar_buffer_sink_payload_cache = ar_payload_cache;
assign read_ar_buffer_sink_payload_qos = ar_payload_qos;
assign read_ar_buffer_sink_payload_id = ar_payload_id;
assign read_r_buffer_queue = ((cmd_valid & cmd_ready) & (~cmd_payload_we));
assign read_r_buffer_dequeue = (read_r_buffer_source_valid & read_r_buffer_source_ready);
assign read_can_read = (read_r_buffer_level2 != 5'd16);
assign read_id_buffer_sink_valid = (read_ar_valid & read_ar_ready);
assign read_id_buffer_sink_last = read_ar_last;
assign read_id_buffer_sink_payload_id = read_ar_payload_id;
assign r_last = read_id_buffer_source_last;
assign r_payload_id = read_id_buffer_source_payload_id;
assign read_id_buffer_source_ready = (r_valid & r_ready);
assign read_cmd_request = (read_ar_valid & read_can_read);

// synthesis translate_off
reg dummy_d_294;
// synthesis translate_on
always @(*) begin
	read_ar_ready <= 1'd0;
	if (read_cmd_grant) begin
		read_ar_ready <= (cmd_ready & read_can_read);
	end
// synthesis translate_off
	dummy_d_294 = dummy_s;
// synthesis translate_on
end
assign read_r_buffer_sink_valid = rdata_valid;
assign rdata_ready = read_r_buffer_sink_ready;
assign read_r_buffer_sink_first = rdata_first;
assign read_r_buffer_sink_last = rdata_last;
assign read_r_buffer_sink_payload_data = rdata_payload_data;
assign r_valid = read_r_buffer_source_valid;
assign read_r_buffer_source_ready = r_ready;
assign r_first = read_r_buffer_source_first;

// synthesis translate_off
reg dummy_d_295;
// synthesis translate_on
always @(*) begin
	r_payload_resp <= 2'd0;
	r_payload_resp <= read_r_buffer_source_payload_resp;
	r_payload_resp <= 1'd0;
// synthesis translate_off
	dummy_d_295 = dummy_s;
// synthesis translate_on
end
assign r_payload_data = read_r_buffer_source_payload_data;
assign read_ar_buffer_sink_ready = ((~read_ar_buffer_source_valid) | read_ar_buffer_source_ready);
assign read_beat_size = (1'd1 <<< read_ar_buffer_source_payload_size);
assign read_beat_wrap = (read_ar_buffer_source_payload_len <<< read_ar_buffer_source_payload_size);
assign read_ar_valid = (read_ar_buffer_source_valid | (~read_ar_first));
assign read_ar_first = (read_beat_count == 1'd0);
assign read_ar_last = (read_beat_count == read_ar_buffer_source_payload_len);
assign read_ar_payload_addr = (read_ar_buffer_source_payload_addr + read_beat_offset);
assign read_ar_payload_id = read_ar_buffer_source_payload_id;

// synthesis translate_off
reg dummy_d_296;
// synthesis translate_on
always @(*) begin
	read_ar_buffer_source_ready <= 1'd0;
	if (read_ar_ready) begin
		if (read_ar_last) begin
			read_ar_buffer_source_ready <= 1'd1;
		end
	end
// synthesis translate_off
	dummy_d_296 = dummy_s;
// synthesis translate_on
end
assign read_r_buffer_syncfifo_din = {read_r_buffer_fifo_in_last, read_r_buffer_fifo_in_first, read_r_buffer_fifo_in_payload_id, read_r_buffer_fifo_in_payload_data, read_r_buffer_fifo_in_payload_resp};
assign {read_r_buffer_fifo_out_last, read_r_buffer_fifo_out_first, read_r_buffer_fifo_out_payload_id, read_r_buffer_fifo_out_payload_data, read_r_buffer_fifo_out_payload_resp} = read_r_buffer_syncfifo_dout;
assign {read_r_buffer_fifo_out_last, read_r_buffer_fifo_out_first, read_r_buffer_fifo_out_payload_id, read_r_buffer_fifo_out_payload_data, read_r_buffer_fifo_out_payload_resp} = read_r_buffer_syncfifo_dout;
assign {read_r_buffer_fifo_out_last, read_r_buffer_fifo_out_first, read_r_buffer_fifo_out_payload_id, read_r_buffer_fifo_out_payload_data, read_r_buffer_fifo_out_payload_resp} = read_r_buffer_syncfifo_dout;
assign {read_r_buffer_fifo_out_last, read_r_buffer_fifo_out_first, read_r_buffer_fifo_out_payload_id, read_r_buffer_fifo_out_payload_data, read_r_buffer_fifo_out_payload_resp} = read_r_buffer_syncfifo_dout;
assign {read_r_buffer_fifo_out_last, read_r_buffer_fifo_out_first, read_r_buffer_fifo_out_payload_id, read_r_buffer_fifo_out_payload_data, read_r_buffer_fifo_out_payload_resp} = read_r_buffer_syncfifo_dout;
assign read_r_buffer_sink_ready = read_r_buffer_syncfifo_writable;
assign read_r_buffer_syncfifo_we = read_r_buffer_sink_valid;
assign read_r_buffer_fifo_in_first = read_r_buffer_sink_first;
assign read_r_buffer_fifo_in_last = read_r_buffer_sink_last;
assign read_r_buffer_fifo_in_payload_resp = read_r_buffer_sink_payload_resp;
assign read_r_buffer_fifo_in_payload_data = read_r_buffer_sink_payload_data;
assign read_r_buffer_fifo_in_payload_id = read_r_buffer_sink_payload_id;
assign read_r_buffer_source_valid = read_r_buffer_readable;
assign read_r_buffer_source_first = read_r_buffer_fifo_out_first;
assign read_r_buffer_source_last = read_r_buffer_fifo_out_last;
assign read_r_buffer_source_payload_resp = read_r_buffer_fifo_out_payload_resp;
assign read_r_buffer_source_payload_data = read_r_buffer_fifo_out_payload_data;
assign read_r_buffer_source_payload_id = read_r_buffer_fifo_out_payload_id;
assign read_r_buffer_re = read_r_buffer_source_ready;
assign read_r_buffer_syncfifo_re = (read_r_buffer_syncfifo_readable & ((~read_r_buffer_readable) | read_r_buffer_re));
assign read_r_buffer_level1 = (read_r_buffer_level0 + read_r_buffer_readable);

// synthesis translate_off
reg dummy_d_297;
// synthesis translate_on
always @(*) begin
	read_r_buffer_wrport_adr <= 4'd0;
	if (read_r_buffer_replace) begin
		read_r_buffer_wrport_adr <= (read_r_buffer_produce - 1'd1);
	end else begin
		read_r_buffer_wrport_adr <= read_r_buffer_produce;
	end
// synthesis translate_off
	dummy_d_297 = dummy_s;
// synthesis translate_on
end
assign read_r_buffer_wrport_dat_w = read_r_buffer_syncfifo_din;
assign read_r_buffer_wrport_we = (read_r_buffer_syncfifo_we & (read_r_buffer_syncfifo_writable | read_r_buffer_replace));
assign read_r_buffer_do_read = (read_r_buffer_syncfifo_readable & read_r_buffer_syncfifo_re);
assign read_r_buffer_rdport_adr = read_r_buffer_consume;
assign read_r_buffer_syncfifo_dout = read_r_buffer_rdport_dat_r;
assign read_r_buffer_rdport_re = read_r_buffer_do_read;
assign read_r_buffer_syncfifo_writable = (read_r_buffer_level0 != 5'd16);
assign read_r_buffer_syncfifo_readable = (read_r_buffer_level0 != 1'd0);
assign read_id_buffer_syncfifo_din = {read_id_buffer_fifo_in_last, read_id_buffer_fifo_in_first, read_id_buffer_fifo_in_payload_id};
assign {read_id_buffer_fifo_out_last, read_id_buffer_fifo_out_first, read_id_buffer_fifo_out_payload_id} = read_id_buffer_syncfifo_dout;
assign {read_id_buffer_fifo_out_last, read_id_buffer_fifo_out_first, read_id_buffer_fifo_out_payload_id} = read_id_buffer_syncfifo_dout;
assign {read_id_buffer_fifo_out_last, read_id_buffer_fifo_out_first, read_id_buffer_fifo_out_payload_id} = read_id_buffer_syncfifo_dout;
assign read_id_buffer_sink_ready = read_id_buffer_syncfifo_writable;
assign read_id_buffer_syncfifo_we = read_id_buffer_sink_valid;
assign read_id_buffer_fifo_in_first = read_id_buffer_sink_first;
assign read_id_buffer_fifo_in_last = read_id_buffer_sink_last;
assign read_id_buffer_fifo_in_payload_id = read_id_buffer_sink_payload_id;
assign read_id_buffer_source_valid = read_id_buffer_syncfifo_readable;
assign read_id_buffer_source_first = read_id_buffer_fifo_out_first;
assign read_id_buffer_source_last = read_id_buffer_fifo_out_last;
assign read_id_buffer_source_payload_id = read_id_buffer_fifo_out_payload_id;
assign read_id_buffer_syncfifo_re = read_id_buffer_source_ready;

// synthesis translate_off
reg dummy_d_298;
// synthesis translate_on
always @(*) begin
	read_id_buffer_wrport_adr <= 4'd0;
	if (read_id_buffer_replace) begin
		read_id_buffer_wrport_adr <= (read_id_buffer_produce - 1'd1);
	end else begin
		read_id_buffer_wrport_adr <= read_id_buffer_produce;
	end
// synthesis translate_off
	dummy_d_298 = dummy_s;
// synthesis translate_on
end
assign read_id_buffer_wrport_dat_w = read_id_buffer_syncfifo_din;
assign read_id_buffer_wrport_we = (read_id_buffer_syncfifo_we & (read_id_buffer_syncfifo_writable | read_id_buffer_replace));
assign read_id_buffer_do_read = (read_id_buffer_syncfifo_readable & read_id_buffer_syncfifo_re);
assign read_id_buffer_rdport_adr = read_id_buffer_consume;
assign read_id_buffer_syncfifo_dout = read_id_buffer_rdport_dat_r;
assign read_id_buffer_syncfifo_writable = (read_id_buffer_level != 5'd16);
assign read_id_buffer_syncfifo_readable = (read_id_buffer_level != 1'd0);

// synthesis translate_off
reg dummy_d_299;
// synthesis translate_on
always @(*) begin
	litedramcore_next_state <= 2'd0;
	litedramcore_next_state <= litedramcore_state;
	case (litedramcore_state)
		1'd1: begin
			litedramcore_next_state <= 2'd2;
		end
		2'd2: begin
			litedramcore_next_state <= 1'd0;
		end
		default: begin
			if ((litedramcore_litedramcore_wishbone_cyc & litedramcore_litedramcore_wishbone_stb)) begin
				litedramcore_next_state <= 1'd1;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_299 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_300;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_wishbone_ack <= 1'd0;
	case (litedramcore_state)
		1'd1: begin
		end
		2'd2: begin
			litedramcore_litedramcore_wishbone_ack <= 1'd1;
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_300 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_301;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_dat_w_next_value0 <= 8'd0;
	case (litedramcore_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			litedramcore_litedramcore_dat_w_next_value0 <= litedramcore_litedramcore_wishbone_dat_w;
		end
	endcase
// synthesis translate_off
	dummy_d_301 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_302;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_dat_w_next_value_ce0 <= 1'd0;
	case (litedramcore_state)
		1'd1: begin
		end
		2'd2: begin
		end
		default: begin
			litedramcore_litedramcore_dat_w_next_value_ce0 <= 1'd1;
		end
	endcase
// synthesis translate_off
	dummy_d_302 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_303;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_adr_next_value1 <= 14'd0;
	case (litedramcore_state)
		1'd1: begin
			litedramcore_litedramcore_adr_next_value1 <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
			if ((litedramcore_litedramcore_wishbone_cyc & litedramcore_litedramcore_wishbone_stb)) begin
				litedramcore_litedramcore_adr_next_value1 <= litedramcore_litedramcore_wishbone_adr;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_303 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_304;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_adr_next_value_ce1 <= 1'd0;
	case (litedramcore_state)
		1'd1: begin
			litedramcore_litedramcore_adr_next_value_ce1 <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
			if ((litedramcore_litedramcore_wishbone_cyc & litedramcore_litedramcore_wishbone_stb)) begin
				litedramcore_litedramcore_adr_next_value_ce1 <= 1'd1;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_304 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_305;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_we_next_value2 <= 1'd0;
	case (litedramcore_state)
		1'd1: begin
			litedramcore_litedramcore_we_next_value2 <= 1'd0;
		end
		2'd2: begin
		end
		default: begin
			if ((litedramcore_litedramcore_wishbone_cyc & litedramcore_litedramcore_wishbone_stb)) begin
				litedramcore_litedramcore_we_next_value2 <= (litedramcore_litedramcore_wishbone_we & (litedramcore_litedramcore_wishbone_sel != 1'd0));
			end
		end
	endcase
// synthesis translate_off
	dummy_d_305 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_306;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_we_next_value_ce2 <= 1'd0;
	case (litedramcore_state)
		1'd1: begin
			litedramcore_litedramcore_we_next_value_ce2 <= 1'd1;
		end
		2'd2: begin
		end
		default: begin
			if ((litedramcore_litedramcore_wishbone_cyc & litedramcore_litedramcore_wishbone_stb)) begin
				litedramcore_litedramcore_we_next_value_ce2 <= 1'd1;
			end
		end
	endcase
// synthesis translate_off
	dummy_d_306 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_307;
// synthesis translate_on
always @(*) begin
	litedramcore_litedramcore_wishbone_dat_r <= 32'd0;
	case (litedramcore_state)
		1'd1: begin
		end
		2'd2: begin
			litedramcore_litedramcore_wishbone_dat_r <= litedramcore_litedramcore_dat_r;
		end
		default: begin
		end
	endcase
// synthesis translate_off
	dummy_d_307 = dummy_s;
// synthesis translate_on
end
assign litedramcore_shared_adr = rhs_array_muxed36;
assign litedramcore_shared_dat_w = rhs_array_muxed37;
assign litedramcore_shared_sel = rhs_array_muxed38;
assign litedramcore_shared_cyc = rhs_array_muxed39;
assign litedramcore_shared_stb = rhs_array_muxed40;
assign litedramcore_shared_we = rhs_array_muxed41;
assign litedramcore_shared_cti = rhs_array_muxed42;
assign litedramcore_shared_bte = rhs_array_muxed43;
assign serv_ibus_dat_r = litedramcore_shared_dat_r;
assign serv_dbus_dat_r = litedramcore_shared_dat_r;
assign serv_ibus_ack = (litedramcore_shared_ack & (litedramcore_grant == 1'd0));
assign serv_dbus_ack = (litedramcore_shared_ack & (litedramcore_grant == 1'd1));
assign serv_ibus_err = (litedramcore_shared_err & (litedramcore_grant == 1'd0));
assign serv_dbus_err = (litedramcore_shared_err & (litedramcore_grant == 1'd1));
assign litedramcore_request = {serv_dbus_cyc, serv_ibus_cyc};

// synthesis translate_off
reg dummy_d_308;
// synthesis translate_on
always @(*) begin
	litedramcore_slave_sel <= 4'd0;
	litedramcore_slave_sel[0] <= (litedramcore_shared_adr[29:13] == 1'd0);
	litedramcore_slave_sel[1] <= (litedramcore_shared_adr[29:11] == 12'd2048);
	litedramcore_slave_sel[2] <= (litedramcore_shared_adr[29:22] == 7'd64);
	litedramcore_slave_sel[3] <= (litedramcore_shared_adr[29:14] == 16'd33280);
// synthesis translate_off
	dummy_d_308 = dummy_s;
// synthesis translate_on
end
assign litedramcore_ram_bus_adr = litedramcore_shared_adr;
assign litedramcore_ram_bus_dat_w = litedramcore_shared_dat_w;
assign litedramcore_ram_bus_sel = litedramcore_shared_sel;
assign litedramcore_ram_bus_stb = litedramcore_shared_stb;
assign litedramcore_ram_bus_we = litedramcore_shared_we;
assign litedramcore_ram_bus_cti = litedramcore_shared_cti;
assign litedramcore_ram_bus_bte = litedramcore_shared_bte;
assign ram_bus_ram_bus_adr = litedramcore_shared_adr;
assign ram_bus_ram_bus_dat_w = litedramcore_shared_dat_w;
assign ram_bus_ram_bus_sel = litedramcore_shared_sel;
assign ram_bus_ram_bus_stb = litedramcore_shared_stb;
assign ram_bus_ram_bus_we = litedramcore_shared_we;
assign ram_bus_ram_bus_cti = litedramcore_shared_cti;
assign ram_bus_ram_bus_bte = litedramcore_shared_bte;
assign wb_sdram_adr = litedramcore_shared_adr;
assign wb_sdram_dat_w = litedramcore_shared_dat_w;
assign wb_sdram_sel = litedramcore_shared_sel;
assign wb_sdram_stb = litedramcore_shared_stb;
assign wb_sdram_we = litedramcore_shared_we;
assign wb_sdram_cti = litedramcore_shared_cti;
assign wb_sdram_bte = litedramcore_shared_bte;
assign litedramcore_litedramcore_wishbone_adr = litedramcore_shared_adr;
assign litedramcore_litedramcore_wishbone_dat_w = litedramcore_shared_dat_w;
assign litedramcore_litedramcore_wishbone_sel = litedramcore_shared_sel;
assign litedramcore_litedramcore_wishbone_stb = litedramcore_shared_stb;
assign litedramcore_litedramcore_wishbone_we = litedramcore_shared_we;
assign litedramcore_litedramcore_wishbone_cti = litedramcore_shared_cti;
assign litedramcore_litedramcore_wishbone_bte = litedramcore_shared_bte;
assign litedramcore_ram_bus_cyc = (litedramcore_shared_cyc & litedramcore_slave_sel[0]);
assign ram_bus_ram_bus_cyc = (litedramcore_shared_cyc & litedramcore_slave_sel[1]);
assign wb_sdram_cyc = (litedramcore_shared_cyc & litedramcore_slave_sel[2]);
assign litedramcore_litedramcore_wishbone_cyc = (litedramcore_shared_cyc & litedramcore_slave_sel[3]);

// synthesis translate_off
reg dummy_d_309;
// synthesis translate_on
always @(*) begin
	litedramcore_shared_ack <= 1'd0;
	litedramcore_shared_ack <= (((litedramcore_ram_bus_ack | ram_bus_ram_bus_ack) | wb_sdram_ack) | litedramcore_litedramcore_wishbone_ack);
	if (litedramcore_done) begin
		litedramcore_shared_ack <= 1'd1;
	end
// synthesis translate_off
	dummy_d_309 = dummy_s;
// synthesis translate_on
end
assign litedramcore_shared_err = (((litedramcore_ram_bus_err | ram_bus_ram_bus_err) | wb_sdram_err) | litedramcore_litedramcore_wishbone_err);

// synthesis translate_off
reg dummy_d_310;
// synthesis translate_on
always @(*) begin
	litedramcore_shared_dat_r <= 32'd0;
	litedramcore_shared_dat_r <= (((({32{litedramcore_slave_sel_r[0]}} & litedramcore_ram_bus_dat_r) | ({32{litedramcore_slave_sel_r[1]}} & ram_bus_ram_bus_dat_r)) | ({32{litedramcore_slave_sel_r[2]}} & wb_sdram_dat_r)) | ({32{litedramcore_slave_sel_r[3]}} & litedramcore_litedramcore_wishbone_dat_r));
	if (litedramcore_done) begin
		litedramcore_shared_dat_r <= 32'd4294967295;
	end
// synthesis translate_off
	dummy_d_310 = dummy_s;
// synthesis translate_on
end
assign litedramcore_wait = ((litedramcore_shared_stb & litedramcore_shared_cyc) & (~litedramcore_shared_ack));

// synthesis translate_off
reg dummy_d_311;
// synthesis translate_on
always @(*) begin
	litedramcore_error <= 1'd0;
	if (litedramcore_done) begin
		litedramcore_error <= 1'd1;
	end
// synthesis translate_off
	dummy_d_311 = dummy_s;
// synthesis translate_on
end
assign litedramcore_done = (litedramcore_count == 1'd0);
assign litedramcore_csrbank0_sel = (litedramcore_interface0_bank_bus_adr[13:9] == 1'd0);
assign litedramcore_csrbank0_reset0_r = litedramcore_interface0_bank_bus_dat_w[0];
assign litedramcore_csrbank0_reset0_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 1'd0));
assign litedramcore_csrbank0_reset0_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 1'd0));
assign litedramcore_csrbank0_scratch3_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_scratch3_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 1'd1));
assign litedramcore_csrbank0_scratch3_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 1'd1));
assign litedramcore_csrbank0_scratch2_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_scratch2_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 2'd2));
assign litedramcore_csrbank0_scratch2_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 2'd2));
assign litedramcore_csrbank0_scratch1_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_scratch1_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 2'd3));
assign litedramcore_csrbank0_scratch1_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 2'd3));
assign litedramcore_csrbank0_scratch0_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_scratch0_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd4));
assign litedramcore_csrbank0_scratch0_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd4));
assign litedramcore_csrbank0_bus_errors3_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_bus_errors3_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd5));
assign litedramcore_csrbank0_bus_errors3_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd5));
assign litedramcore_csrbank0_bus_errors2_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_bus_errors2_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd6));
assign litedramcore_csrbank0_bus_errors2_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd6));
assign litedramcore_csrbank0_bus_errors1_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_bus_errors1_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd7));
assign litedramcore_csrbank0_bus_errors1_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 3'd7));
assign litedramcore_csrbank0_bus_errors0_r = litedramcore_interface0_bank_bus_dat_w[7:0];
assign litedramcore_csrbank0_bus_errors0_re = ((litedramcore_csrbank0_sel & litedramcore_interface0_bank_bus_we) & (litedramcore_interface0_bank_bus_adr[3:0] == 4'd8));
assign litedramcore_csrbank0_bus_errors0_we = ((litedramcore_csrbank0_sel & (~litedramcore_interface0_bank_bus_we)) & (litedramcore_interface0_bank_bus_adr[3:0] == 4'd8));
assign litedramcore_csrbank0_reset0_w = soccontroller_reset_storage;
assign litedramcore_csrbank0_scratch3_w = soccontroller_scratch_storage[31:24];
assign litedramcore_csrbank0_scratch2_w = soccontroller_scratch_storage[23:16];
assign litedramcore_csrbank0_scratch1_w = soccontroller_scratch_storage[15:8];
assign litedramcore_csrbank0_scratch0_w = soccontroller_scratch_storage[7:0];
assign litedramcore_csrbank0_bus_errors3_w = soccontroller_bus_errors_status[31:24];
assign litedramcore_csrbank0_bus_errors2_w = soccontroller_bus_errors_status[23:16];
assign litedramcore_csrbank0_bus_errors1_w = soccontroller_bus_errors_status[15:8];
assign litedramcore_csrbank0_bus_errors0_w = soccontroller_bus_errors_status[7:0];
assign soccontroller_bus_errors_we = litedramcore_csrbank0_bus_errors0_we;
assign litedramcore_csrbank1_sel = (litedramcore_interface1_bank_bus_adr[13:9] == 3'd7);
assign litedramcore_csrbank1_init_done0_r = litedramcore_interface1_bank_bus_dat_w[0];
assign litedramcore_csrbank1_init_done0_re = ((litedramcore_csrbank1_sel & litedramcore_interface1_bank_bus_we) & (litedramcore_interface1_bank_bus_adr[0] == 1'd0));
assign litedramcore_csrbank1_init_done0_we = ((litedramcore_csrbank1_sel & (~litedramcore_interface1_bank_bus_we)) & (litedramcore_interface1_bank_bus_adr[0] == 1'd0));
assign litedramcore_csrbank1_init_error0_r = litedramcore_interface1_bank_bus_dat_w[0];
assign litedramcore_csrbank1_init_error0_re = ((litedramcore_csrbank1_sel & litedramcore_interface1_bank_bus_we) & (litedramcore_interface1_bank_bus_adr[0] == 1'd1));
assign litedramcore_csrbank1_init_error0_we = ((litedramcore_csrbank1_sel & (~litedramcore_interface1_bank_bus_we)) & (litedramcore_interface1_bank_bus_adr[0] == 1'd1));
assign litedramcore_csrbank1_init_done0_w = init_done_storage;
assign litedramcore_csrbank1_init_error0_w = init_error_storage;
assign litedramcore_csrbank2_sel = (litedramcore_interface2_bank_bus_adr[13:9] == 3'd5);
assign litedramcore_csrbank2_rst0_r = litedramcore_interface2_bank_bus_dat_w[0];
assign litedramcore_csrbank2_rst0_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 1'd0));
assign litedramcore_csrbank2_rst0_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 1'd0));
assign litedramcore_csrbank2_half_sys8x_taps0_r = litedramcore_interface2_bank_bus_dat_w[4:0];
assign litedramcore_csrbank2_half_sys8x_taps0_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 1'd1));
assign litedramcore_csrbank2_half_sys8x_taps0_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 1'd1));
assign litedramcore_csrbank2_wlevel_en0_r = litedramcore_interface2_bank_bus_dat_w[0];
assign litedramcore_csrbank2_wlevel_en0_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 2'd2));
assign litedramcore_csrbank2_wlevel_en0_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 2'd2));
assign a7ddrphy_wlevel_strobe_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_wlevel_strobe_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 2'd3));
assign a7ddrphy_wlevel_strobe_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 2'd3));
assign litedramcore_csrbank2_dly_sel0_r = litedramcore_interface2_bank_bus_dat_w[1:0];
assign litedramcore_csrbank2_dly_sel0_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd4));
assign litedramcore_csrbank2_dly_sel0_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd4));
assign a7ddrphy_rdly_dq_rst_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_rdly_dq_rst_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd5));
assign a7ddrphy_rdly_dq_rst_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd5));
assign a7ddrphy_rdly_dq_inc_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_rdly_dq_inc_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd6));
assign a7ddrphy_rdly_dq_inc_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd6));
assign a7ddrphy_rdly_dq_bitslip_rst_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_rdly_dq_bitslip_rst_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd7));
assign a7ddrphy_rdly_dq_bitslip_rst_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 3'd7));
assign a7ddrphy_rdly_dq_bitslip_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_rdly_dq_bitslip_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd8));
assign a7ddrphy_rdly_dq_bitslip_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd8));
assign a7ddrphy_wdly_dq_bitslip_rst_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_wdly_dq_bitslip_rst_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd9));
assign a7ddrphy_wdly_dq_bitslip_rst_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd9));
assign a7ddrphy_wdly_dq_bitslip_r = litedramcore_interface2_bank_bus_dat_w[0];
assign a7ddrphy_wdly_dq_bitslip_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd10));
assign a7ddrphy_wdly_dq_bitslip_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd10));
assign litedramcore_csrbank2_rdphase0_r = litedramcore_interface2_bank_bus_dat_w[0];
assign litedramcore_csrbank2_rdphase0_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd11));
assign litedramcore_csrbank2_rdphase0_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd11));
assign litedramcore_csrbank2_wrphase0_r = litedramcore_interface2_bank_bus_dat_w[0];
assign litedramcore_csrbank2_wrphase0_re = ((litedramcore_csrbank2_sel & litedramcore_interface2_bank_bus_we) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd12));
assign litedramcore_csrbank2_wrphase0_we = ((litedramcore_csrbank2_sel & (~litedramcore_interface2_bank_bus_we)) & (litedramcore_interface2_bank_bus_adr[3:0] == 4'd12));
assign litedramcore_csrbank2_rst0_w = a7ddrphy_rst_storage;
assign litedramcore_csrbank2_half_sys8x_taps0_w = a7ddrphy_half_sys8x_taps_storage[4:0];
assign litedramcore_csrbank2_wlevel_en0_w = a7ddrphy_wlevel_en_storage;
assign litedramcore_csrbank2_dly_sel0_w = a7ddrphy_dly_sel_storage[1:0];
assign litedramcore_csrbank2_rdphase0_w = a7ddrphy_rdphase_storage;
assign litedramcore_csrbank2_wrphase0_w = a7ddrphy_wrphase_storage;
assign litedramcore_csrbank3_sel = (litedramcore_interface3_bank_bus_adr[13:9] == 3'd6);
assign litedramcore_csrbank3_dfii_control0_r = litedramcore_interface3_bank_bus_dat_w[3:0];
assign litedramcore_csrbank3_dfii_control0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 1'd0));
assign litedramcore_csrbank3_dfii_control0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 1'd0));
assign litedramcore_csrbank3_dfii_pi0_command0_r = litedramcore_interface3_bank_bus_dat_w[5:0];
assign litedramcore_csrbank3_dfii_pi0_command0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 1'd1));
assign litedramcore_csrbank3_dfii_pi0_command0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 1'd1));
assign sdram_phaseinjector0_command_issue_r = litedramcore_interface3_bank_bus_dat_w[0];
assign sdram_phaseinjector0_command_issue_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 2'd2));
assign sdram_phaseinjector0_command_issue_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 2'd2));
assign litedramcore_csrbank3_dfii_pi0_address1_r = litedramcore_interface3_bank_bus_dat_w[4:0];
assign litedramcore_csrbank3_dfii_pi0_address1_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 2'd3));
assign litedramcore_csrbank3_dfii_pi0_address1_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 2'd3));
assign litedramcore_csrbank3_dfii_pi0_address0_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_address0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd4));
assign litedramcore_csrbank3_dfii_pi0_address0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd4));
assign litedramcore_csrbank3_dfii_pi0_baddress0_r = litedramcore_interface3_bank_bus_dat_w[2:0];
assign litedramcore_csrbank3_dfii_pi0_baddress0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd5));
assign litedramcore_csrbank3_dfii_pi0_baddress0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd5));
assign litedramcore_csrbank3_dfii_pi0_wrdata3_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_wrdata3_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd6));
assign litedramcore_csrbank3_dfii_pi0_wrdata3_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd6));
assign litedramcore_csrbank3_dfii_pi0_wrdata2_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_wrdata2_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd7));
assign litedramcore_csrbank3_dfii_pi0_wrdata2_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 3'd7));
assign litedramcore_csrbank3_dfii_pi0_wrdata1_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_wrdata1_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd8));
assign litedramcore_csrbank3_dfii_pi0_wrdata1_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd8));
assign litedramcore_csrbank3_dfii_pi0_wrdata0_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_wrdata0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd9));
assign litedramcore_csrbank3_dfii_pi0_wrdata0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd9));
assign litedramcore_csrbank3_dfii_pi0_rddata3_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_rddata3_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd10));
assign litedramcore_csrbank3_dfii_pi0_rddata3_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd10));
assign litedramcore_csrbank3_dfii_pi0_rddata2_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_rddata2_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd11));
assign litedramcore_csrbank3_dfii_pi0_rddata2_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd11));
assign litedramcore_csrbank3_dfii_pi0_rddata1_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_rddata1_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd12));
assign litedramcore_csrbank3_dfii_pi0_rddata1_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd12));
assign litedramcore_csrbank3_dfii_pi0_rddata0_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi0_rddata0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd13));
assign litedramcore_csrbank3_dfii_pi0_rddata0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd13));
assign litedramcore_csrbank3_dfii_pi1_command0_r = litedramcore_interface3_bank_bus_dat_w[5:0];
assign litedramcore_csrbank3_dfii_pi1_command0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd14));
assign litedramcore_csrbank3_dfii_pi1_command0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd14));
assign sdram_phaseinjector1_command_issue_r = litedramcore_interface3_bank_bus_dat_w[0];
assign sdram_phaseinjector1_command_issue_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd15));
assign sdram_phaseinjector1_command_issue_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 4'd15));
assign litedramcore_csrbank3_dfii_pi1_address1_r = litedramcore_interface3_bank_bus_dat_w[4:0];
assign litedramcore_csrbank3_dfii_pi1_address1_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd16));
assign litedramcore_csrbank3_dfii_pi1_address1_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd16));
assign litedramcore_csrbank3_dfii_pi1_address0_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_address0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd17));
assign litedramcore_csrbank3_dfii_pi1_address0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd17));
assign litedramcore_csrbank3_dfii_pi1_baddress0_r = litedramcore_interface3_bank_bus_dat_w[2:0];
assign litedramcore_csrbank3_dfii_pi1_baddress0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd18));
assign litedramcore_csrbank3_dfii_pi1_baddress0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd18));
assign litedramcore_csrbank3_dfii_pi1_wrdata3_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_wrdata3_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd19));
assign litedramcore_csrbank3_dfii_pi1_wrdata3_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd19));
assign litedramcore_csrbank3_dfii_pi1_wrdata2_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_wrdata2_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd20));
assign litedramcore_csrbank3_dfii_pi1_wrdata2_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd20));
assign litedramcore_csrbank3_dfii_pi1_wrdata1_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_wrdata1_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd21));
assign litedramcore_csrbank3_dfii_pi1_wrdata1_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd21));
assign litedramcore_csrbank3_dfii_pi1_wrdata0_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_wrdata0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd22));
assign litedramcore_csrbank3_dfii_pi1_wrdata0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd22));
assign litedramcore_csrbank3_dfii_pi1_rddata3_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_rddata3_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd23));
assign litedramcore_csrbank3_dfii_pi1_rddata3_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd23));
assign litedramcore_csrbank3_dfii_pi1_rddata2_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_rddata2_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd24));
assign litedramcore_csrbank3_dfii_pi1_rddata2_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd24));
assign litedramcore_csrbank3_dfii_pi1_rddata1_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_rddata1_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd25));
assign litedramcore_csrbank3_dfii_pi1_rddata1_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd25));
assign litedramcore_csrbank3_dfii_pi1_rddata0_r = litedramcore_interface3_bank_bus_dat_w[7:0];
assign litedramcore_csrbank3_dfii_pi1_rddata0_re = ((litedramcore_csrbank3_sel & litedramcore_interface3_bank_bus_we) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd26));
assign litedramcore_csrbank3_dfii_pi1_rddata0_we = ((litedramcore_csrbank3_sel & (~litedramcore_interface3_bank_bus_we)) & (litedramcore_interface3_bank_bus_adr[4:0] == 5'd26));
assign sdram_sel = sdram_storage[0];
assign sdram_cke = sdram_storage[1];
assign sdram_odt = sdram_storage[2];
assign sdram_reset_n = sdram_storage[3];
assign litedramcore_csrbank3_dfii_control0_w = sdram_storage[3:0];
assign litedramcore_csrbank3_dfii_pi0_command0_w = sdram_phaseinjector0_command_storage[5:0];
assign litedramcore_csrbank3_dfii_pi0_address1_w = sdram_phaseinjector0_address_storage[12:8];
assign litedramcore_csrbank3_dfii_pi0_address0_w = sdram_phaseinjector0_address_storage[7:0];
assign litedramcore_csrbank3_dfii_pi0_baddress0_w = sdram_phaseinjector0_baddress_storage[2:0];
assign litedramcore_csrbank3_dfii_pi0_wrdata3_w = sdram_phaseinjector0_wrdata_storage[31:24];
assign litedramcore_csrbank3_dfii_pi0_wrdata2_w = sdram_phaseinjector0_wrdata_storage[23:16];
assign litedramcore_csrbank3_dfii_pi0_wrdata1_w = sdram_phaseinjector0_wrdata_storage[15:8];
assign litedramcore_csrbank3_dfii_pi0_wrdata0_w = sdram_phaseinjector0_wrdata_storage[7:0];
assign litedramcore_csrbank3_dfii_pi0_rddata3_w = sdram_phaseinjector0_rddata_status[31:24];
assign litedramcore_csrbank3_dfii_pi0_rddata2_w = sdram_phaseinjector0_rddata_status[23:16];
assign litedramcore_csrbank3_dfii_pi0_rddata1_w = sdram_phaseinjector0_rddata_status[15:8];
assign litedramcore_csrbank3_dfii_pi0_rddata0_w = sdram_phaseinjector0_rddata_status[7:0];
assign sdram_phaseinjector0_rddata_we = litedramcore_csrbank3_dfii_pi0_rddata0_we;
assign litedramcore_csrbank3_dfii_pi1_command0_w = sdram_phaseinjector1_command_storage[5:0];
assign litedramcore_csrbank3_dfii_pi1_address1_w = sdram_phaseinjector1_address_storage[12:8];
assign litedramcore_csrbank3_dfii_pi1_address0_w = sdram_phaseinjector1_address_storage[7:0];
assign litedramcore_csrbank3_dfii_pi1_baddress0_w = sdram_phaseinjector1_baddress_storage[2:0];
assign litedramcore_csrbank3_dfii_pi1_wrdata3_w = sdram_phaseinjector1_wrdata_storage[31:24];
assign litedramcore_csrbank3_dfii_pi1_wrdata2_w = sdram_phaseinjector1_wrdata_storage[23:16];
assign litedramcore_csrbank3_dfii_pi1_wrdata1_w = sdram_phaseinjector1_wrdata_storage[15:8];
assign litedramcore_csrbank3_dfii_pi1_wrdata0_w = sdram_phaseinjector1_wrdata_storage[7:0];
assign litedramcore_csrbank3_dfii_pi1_rddata3_w = sdram_phaseinjector1_rddata_status[31:24];
assign litedramcore_csrbank3_dfii_pi1_rddata2_w = sdram_phaseinjector1_rddata_status[23:16];
assign litedramcore_csrbank3_dfii_pi1_rddata1_w = sdram_phaseinjector1_rddata_status[15:8];
assign litedramcore_csrbank3_dfii_pi1_rddata0_w = sdram_phaseinjector1_rddata_status[7:0];
assign sdram_phaseinjector1_rddata_we = litedramcore_csrbank3_dfii_pi1_rddata0_we;
assign litedramcore_csrbank4_sel = (litedramcore_interface4_bank_bus_adr[13:9] == 3'd4);
assign litedramcore_csrbank4_load3_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_load3_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 1'd0));
assign litedramcore_csrbank4_load3_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 1'd0));
assign litedramcore_csrbank4_load2_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_load2_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 1'd1));
assign litedramcore_csrbank4_load2_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 1'd1));
assign litedramcore_csrbank4_load1_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_load1_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 2'd2));
assign litedramcore_csrbank4_load1_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 2'd2));
assign litedramcore_csrbank4_load0_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_load0_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 2'd3));
assign litedramcore_csrbank4_load0_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 2'd3));
assign litedramcore_csrbank4_reload3_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_reload3_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd4));
assign litedramcore_csrbank4_reload3_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd4));
assign litedramcore_csrbank4_reload2_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_reload2_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd5));
assign litedramcore_csrbank4_reload2_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd5));
assign litedramcore_csrbank4_reload1_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_reload1_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd6));
assign litedramcore_csrbank4_reload1_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd6));
assign litedramcore_csrbank4_reload0_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_reload0_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd7));
assign litedramcore_csrbank4_reload0_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 3'd7));
assign litedramcore_csrbank4_en0_r = litedramcore_interface4_bank_bus_dat_w[0];
assign litedramcore_csrbank4_en0_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd8));
assign litedramcore_csrbank4_en0_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd8));
assign litedramcore_csrbank4_update_value0_r = litedramcore_interface4_bank_bus_dat_w[0];
assign litedramcore_csrbank4_update_value0_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd9));
assign litedramcore_csrbank4_update_value0_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd9));
assign litedramcore_csrbank4_value3_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_value3_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd10));
assign litedramcore_csrbank4_value3_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd10));
assign litedramcore_csrbank4_value2_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_value2_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd11));
assign litedramcore_csrbank4_value2_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd11));
assign litedramcore_csrbank4_value1_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_value1_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd12));
assign litedramcore_csrbank4_value1_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd12));
assign litedramcore_csrbank4_value0_r = litedramcore_interface4_bank_bus_dat_w[7:0];
assign litedramcore_csrbank4_value0_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd13));
assign litedramcore_csrbank4_value0_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd13));
assign litedramcore_csrbank4_ev_status_r = litedramcore_interface4_bank_bus_dat_w[0];
assign litedramcore_csrbank4_ev_status_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd14));
assign litedramcore_csrbank4_ev_status_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd14));
assign litedramcore_csrbank4_ev_pending_r = litedramcore_interface4_bank_bus_dat_w[0];
assign litedramcore_csrbank4_ev_pending_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd15));
assign litedramcore_csrbank4_ev_pending_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 4'd15));
assign litedramcore_csrbank4_ev_enable0_r = litedramcore_interface4_bank_bus_dat_w[0];
assign litedramcore_csrbank4_ev_enable0_re = ((litedramcore_csrbank4_sel & litedramcore_interface4_bank_bus_we) & (litedramcore_interface4_bank_bus_adr[4:0] == 5'd16));
assign litedramcore_csrbank4_ev_enable0_we = ((litedramcore_csrbank4_sel & (~litedramcore_interface4_bank_bus_we)) & (litedramcore_interface4_bank_bus_adr[4:0] == 5'd16));
assign litedramcore_csrbank4_load3_w = timer_load_storage[31:24];
assign litedramcore_csrbank4_load2_w = timer_load_storage[23:16];
assign litedramcore_csrbank4_load1_w = timer_load_storage[15:8];
assign litedramcore_csrbank4_load0_w = timer_load_storage[7:0];
assign litedramcore_csrbank4_reload3_w = timer_reload_storage[31:24];
assign litedramcore_csrbank4_reload2_w = timer_reload_storage[23:16];
assign litedramcore_csrbank4_reload1_w = timer_reload_storage[15:8];
assign litedramcore_csrbank4_reload0_w = timer_reload_storage[7:0];
assign litedramcore_csrbank4_en0_w = timer_en_storage;
assign litedramcore_csrbank4_update_value0_w = timer_update_value_storage;
assign litedramcore_csrbank4_value3_w = timer_value_status[31:24];
assign litedramcore_csrbank4_value2_w = timer_value_status[23:16];
assign litedramcore_csrbank4_value1_w = timer_value_status[15:8];
assign litedramcore_csrbank4_value0_w = timer_value_status[7:0];
assign timer_value_we = litedramcore_csrbank4_value0_we;
assign timer_status_status = timer_zero0;
assign litedramcore_csrbank4_ev_status_w = timer_status_status;
assign timer_status_we = litedramcore_csrbank4_ev_status_we;
assign timer_pending_status = timer_zero1;
assign litedramcore_csrbank4_ev_pending_w = timer_pending_status;
assign timer_pending_we = litedramcore_csrbank4_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign litedramcore_csrbank4_ev_enable0_w = timer_enable_storage;
assign litedramcore_csrbank5_sel = (litedramcore_interface5_bank_bus_adr[13:9] == 2'd3);
assign uart_rxtx_r = litedramcore_interface5_bank_bus_dat_w[7:0];
assign uart_rxtx_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 1'd0));
assign uart_rxtx_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 1'd0));
assign litedramcore_csrbank5_txfull_r = litedramcore_interface5_bank_bus_dat_w[0];
assign litedramcore_csrbank5_txfull_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 1'd1));
assign litedramcore_csrbank5_txfull_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 1'd1));
assign litedramcore_csrbank5_rxempty_r = litedramcore_interface5_bank_bus_dat_w[0];
assign litedramcore_csrbank5_rxempty_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 2'd2));
assign litedramcore_csrbank5_rxempty_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 2'd2));
assign litedramcore_csrbank5_ev_status_r = litedramcore_interface5_bank_bus_dat_w[1:0];
assign litedramcore_csrbank5_ev_status_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 2'd3));
assign litedramcore_csrbank5_ev_status_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 2'd3));
assign litedramcore_csrbank5_ev_pending_r = litedramcore_interface5_bank_bus_dat_w[1:0];
assign litedramcore_csrbank5_ev_pending_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd4));
assign litedramcore_csrbank5_ev_pending_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd4));
assign litedramcore_csrbank5_ev_enable0_r = litedramcore_interface5_bank_bus_dat_w[1:0];
assign litedramcore_csrbank5_ev_enable0_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd5));
assign litedramcore_csrbank5_ev_enable0_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd5));
assign litedramcore_csrbank5_txempty_r = litedramcore_interface5_bank_bus_dat_w[0];
assign litedramcore_csrbank5_txempty_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd6));
assign litedramcore_csrbank5_txempty_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd6));
assign litedramcore_csrbank5_rxfull_r = litedramcore_interface5_bank_bus_dat_w[0];
assign litedramcore_csrbank5_rxfull_re = ((litedramcore_csrbank5_sel & litedramcore_interface5_bank_bus_we) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd7));
assign litedramcore_csrbank5_rxfull_we = ((litedramcore_csrbank5_sel & (~litedramcore_interface5_bank_bus_we)) & (litedramcore_interface5_bank_bus_adr[2:0] == 3'd7));
assign litedramcore_csrbank5_txfull_w = uart_txfull_status;
assign uart_txfull_we = litedramcore_csrbank5_txfull_we;
assign litedramcore_csrbank5_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = litedramcore_csrbank5_rxempty_we;

// synthesis translate_off
reg dummy_d_312;
// synthesis translate_on
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
// synthesis translate_off
	dummy_d_312 = dummy_s;
// synthesis translate_on
end
assign litedramcore_csrbank5_ev_status_w = uart_status_status[1:0];
assign uart_status_we = litedramcore_csrbank5_ev_status_we;

// synthesis translate_off
reg dummy_d_313;
// synthesis translate_on
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
// synthesis translate_off
	dummy_d_313 = dummy_s;
// synthesis translate_on
end
assign litedramcore_csrbank5_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = litedramcore_csrbank5_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign litedramcore_csrbank5_ev_enable0_w = uart_enable_storage[1:0];
assign litedramcore_csrbank5_txempty_w = uart_txempty_status;
assign uart_txempty_we = litedramcore_csrbank5_txempty_we;
assign litedramcore_csrbank5_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = litedramcore_csrbank5_rxfull_we;
assign litedramcore_csrbank6_sel = (litedramcore_interface6_bank_bus_adr[13:9] == 2'd2);
assign litedramcore_csrbank6_tuning_word3_r = litedramcore_interface6_bank_bus_dat_w[7:0];
assign litedramcore_csrbank6_tuning_word3_re = ((litedramcore_csrbank6_sel & litedramcore_interface6_bank_bus_we) & (litedramcore_interface6_bank_bus_adr[1:0] == 1'd0));
assign litedramcore_csrbank6_tuning_word3_we = ((litedramcore_csrbank6_sel & (~litedramcore_interface6_bank_bus_we)) & (litedramcore_interface6_bank_bus_adr[1:0] == 1'd0));
assign litedramcore_csrbank6_tuning_word2_r = litedramcore_interface6_bank_bus_dat_w[7:0];
assign litedramcore_csrbank6_tuning_word2_re = ((litedramcore_csrbank6_sel & litedramcore_interface6_bank_bus_we) & (litedramcore_interface6_bank_bus_adr[1:0] == 1'd1));
assign litedramcore_csrbank6_tuning_word2_we = ((litedramcore_csrbank6_sel & (~litedramcore_interface6_bank_bus_we)) & (litedramcore_interface6_bank_bus_adr[1:0] == 1'd1));
assign litedramcore_csrbank6_tuning_word1_r = litedramcore_interface6_bank_bus_dat_w[7:0];
assign litedramcore_csrbank6_tuning_word1_re = ((litedramcore_csrbank6_sel & litedramcore_interface6_bank_bus_we) & (litedramcore_interface6_bank_bus_adr[1:0] == 2'd2));
assign litedramcore_csrbank6_tuning_word1_we = ((litedramcore_csrbank6_sel & (~litedramcore_interface6_bank_bus_we)) & (litedramcore_interface6_bank_bus_adr[1:0] == 2'd2));
assign litedramcore_csrbank6_tuning_word0_r = litedramcore_interface6_bank_bus_dat_w[7:0];
assign litedramcore_csrbank6_tuning_word0_re = ((litedramcore_csrbank6_sel & litedramcore_interface6_bank_bus_we) & (litedramcore_interface6_bank_bus_adr[1:0] == 2'd3));
assign litedramcore_csrbank6_tuning_word0_we = ((litedramcore_csrbank6_sel & (~litedramcore_interface6_bank_bus_we)) & (litedramcore_interface6_bank_bus_adr[1:0] == 2'd3));
assign litedramcore_csrbank6_tuning_word3_w = uart_phy_storage[31:24];
assign litedramcore_csrbank6_tuning_word2_w = uart_phy_storage[23:16];
assign litedramcore_csrbank6_tuning_word1_w = uart_phy_storage[15:8];
assign litedramcore_csrbank6_tuning_word0_w = uart_phy_storage[7:0];
assign litedramcore_csr_interconnect_adr = litedramcore_litedramcore_adr;
assign litedramcore_csr_interconnect_we = litedramcore_litedramcore_we;
assign litedramcore_csr_interconnect_dat_w = litedramcore_litedramcore_dat_w;
assign litedramcore_litedramcore_dat_r = litedramcore_csr_interconnect_dat_r;
assign litedramcore_interface0_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface1_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface2_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface3_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface4_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface5_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface6_bank_bus_adr = litedramcore_csr_interconnect_adr;
assign litedramcore_interface0_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface1_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface2_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface3_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface4_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface5_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface6_bank_bus_we = litedramcore_csr_interconnect_we;
assign litedramcore_interface0_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_interface1_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_interface2_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_interface3_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_interface4_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_interface5_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_interface6_bank_bus_dat_w = litedramcore_csr_interconnect_dat_w;
assign litedramcore_csr_interconnect_dat_r = ((((((litedramcore_interface0_bank_bus_dat_r | litedramcore_interface1_bank_bus_dat_r) | litedramcore_interface2_bank_bus_dat_r) | litedramcore_interface3_bank_bus_dat_r) | litedramcore_interface4_bank_bus_dat_r) | litedramcore_interface5_bank_bus_dat_r) | litedramcore_interface6_bank_bus_dat_r);

// synthesis translate_off
reg dummy_d_314;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed0 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[0];
		end
		1'd1: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[1];
		end
		2'd2: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[2];
		end
		2'd3: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[3];
		end
		3'd4: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[4];
		end
		3'd5: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[5];
		end
		3'd6: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[6];
		end
		default: begin
			rhs_array_muxed0 <= sdram_choose_cmd_valids[7];
		end
	endcase
// synthesis translate_off
	dummy_d_314 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_315;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed1 <= 13'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			rhs_array_muxed1 <= sdram_bankmachine0_cmd_payload_a;
		end
		1'd1: begin
			rhs_array_muxed1 <= sdram_bankmachine1_cmd_payload_a;
		end
		2'd2: begin
			rhs_array_muxed1 <= sdram_bankmachine2_cmd_payload_a;
		end
		2'd3: begin
			rhs_array_muxed1 <= sdram_bankmachine3_cmd_payload_a;
		end
		3'd4: begin
			rhs_array_muxed1 <= sdram_bankmachine4_cmd_payload_a;
		end
		3'd5: begin
			rhs_array_muxed1 <= sdram_bankmachine5_cmd_payload_a;
		end
		3'd6: begin
			rhs_array_muxed1 <= sdram_bankmachine6_cmd_payload_a;
		end
		default: begin
			rhs_array_muxed1 <= sdram_bankmachine7_cmd_payload_a;
		end
	endcase
// synthesis translate_off
	dummy_d_315 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_316;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed2 <= 3'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			rhs_array_muxed2 <= sdram_bankmachine0_cmd_payload_ba;
		end
		1'd1: begin
			rhs_array_muxed2 <= sdram_bankmachine1_cmd_payload_ba;
		end
		2'd2: begin
			rhs_array_muxed2 <= sdram_bankmachine2_cmd_payload_ba;
		end
		2'd3: begin
			rhs_array_muxed2 <= sdram_bankmachine3_cmd_payload_ba;
		end
		3'd4: begin
			rhs_array_muxed2 <= sdram_bankmachine4_cmd_payload_ba;
		end
		3'd5: begin
			rhs_array_muxed2 <= sdram_bankmachine5_cmd_payload_ba;
		end
		3'd6: begin
			rhs_array_muxed2 <= sdram_bankmachine6_cmd_payload_ba;
		end
		default: begin
			rhs_array_muxed2 <= sdram_bankmachine7_cmd_payload_ba;
		end
	endcase
// synthesis translate_off
	dummy_d_316 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_317;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed3 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			rhs_array_muxed3 <= sdram_bankmachine0_cmd_payload_is_read;
		end
		1'd1: begin
			rhs_array_muxed3 <= sdram_bankmachine1_cmd_payload_is_read;
		end
		2'd2: begin
			rhs_array_muxed3 <= sdram_bankmachine2_cmd_payload_is_read;
		end
		2'd3: begin
			rhs_array_muxed3 <= sdram_bankmachine3_cmd_payload_is_read;
		end
		3'd4: begin
			rhs_array_muxed3 <= sdram_bankmachine4_cmd_payload_is_read;
		end
		3'd5: begin
			rhs_array_muxed3 <= sdram_bankmachine5_cmd_payload_is_read;
		end
		3'd6: begin
			rhs_array_muxed3 <= sdram_bankmachine6_cmd_payload_is_read;
		end
		default: begin
			rhs_array_muxed3 <= sdram_bankmachine7_cmd_payload_is_read;
		end
	endcase
// synthesis translate_off
	dummy_d_317 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_318;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed4 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			rhs_array_muxed4 <= sdram_bankmachine0_cmd_payload_is_write;
		end
		1'd1: begin
			rhs_array_muxed4 <= sdram_bankmachine1_cmd_payload_is_write;
		end
		2'd2: begin
			rhs_array_muxed4 <= sdram_bankmachine2_cmd_payload_is_write;
		end
		2'd3: begin
			rhs_array_muxed4 <= sdram_bankmachine3_cmd_payload_is_write;
		end
		3'd4: begin
			rhs_array_muxed4 <= sdram_bankmachine4_cmd_payload_is_write;
		end
		3'd5: begin
			rhs_array_muxed4 <= sdram_bankmachine5_cmd_payload_is_write;
		end
		3'd6: begin
			rhs_array_muxed4 <= sdram_bankmachine6_cmd_payload_is_write;
		end
		default: begin
			rhs_array_muxed4 <= sdram_bankmachine7_cmd_payload_is_write;
		end
	endcase
// synthesis translate_off
	dummy_d_318 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_319;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed5 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			rhs_array_muxed5 <= sdram_bankmachine0_cmd_payload_is_cmd;
		end
		1'd1: begin
			rhs_array_muxed5 <= sdram_bankmachine1_cmd_payload_is_cmd;
		end
		2'd2: begin
			rhs_array_muxed5 <= sdram_bankmachine2_cmd_payload_is_cmd;
		end
		2'd3: begin
			rhs_array_muxed5 <= sdram_bankmachine3_cmd_payload_is_cmd;
		end
		3'd4: begin
			rhs_array_muxed5 <= sdram_bankmachine4_cmd_payload_is_cmd;
		end
		3'd5: begin
			rhs_array_muxed5 <= sdram_bankmachine5_cmd_payload_is_cmd;
		end
		3'd6: begin
			rhs_array_muxed5 <= sdram_bankmachine6_cmd_payload_is_cmd;
		end
		default: begin
			rhs_array_muxed5 <= sdram_bankmachine7_cmd_payload_is_cmd;
		end
	endcase
// synthesis translate_off
	dummy_d_319 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_320;
// synthesis translate_on
always @(*) begin
	t_array_muxed0 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			t_array_muxed0 <= sdram_bankmachine0_cmd_payload_cas;
		end
		1'd1: begin
			t_array_muxed0 <= sdram_bankmachine1_cmd_payload_cas;
		end
		2'd2: begin
			t_array_muxed0 <= sdram_bankmachine2_cmd_payload_cas;
		end
		2'd3: begin
			t_array_muxed0 <= sdram_bankmachine3_cmd_payload_cas;
		end
		3'd4: begin
			t_array_muxed0 <= sdram_bankmachine4_cmd_payload_cas;
		end
		3'd5: begin
			t_array_muxed0 <= sdram_bankmachine5_cmd_payload_cas;
		end
		3'd6: begin
			t_array_muxed0 <= sdram_bankmachine6_cmd_payload_cas;
		end
		default: begin
			t_array_muxed0 <= sdram_bankmachine7_cmd_payload_cas;
		end
	endcase
// synthesis translate_off
	dummy_d_320 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_321;
// synthesis translate_on
always @(*) begin
	t_array_muxed1 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			t_array_muxed1 <= sdram_bankmachine0_cmd_payload_ras;
		end
		1'd1: begin
			t_array_muxed1 <= sdram_bankmachine1_cmd_payload_ras;
		end
		2'd2: begin
			t_array_muxed1 <= sdram_bankmachine2_cmd_payload_ras;
		end
		2'd3: begin
			t_array_muxed1 <= sdram_bankmachine3_cmd_payload_ras;
		end
		3'd4: begin
			t_array_muxed1 <= sdram_bankmachine4_cmd_payload_ras;
		end
		3'd5: begin
			t_array_muxed1 <= sdram_bankmachine5_cmd_payload_ras;
		end
		3'd6: begin
			t_array_muxed1 <= sdram_bankmachine6_cmd_payload_ras;
		end
		default: begin
			t_array_muxed1 <= sdram_bankmachine7_cmd_payload_ras;
		end
	endcase
// synthesis translate_off
	dummy_d_321 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_322;
// synthesis translate_on
always @(*) begin
	t_array_muxed2 <= 1'd0;
	case (sdram_choose_cmd_grant)
		1'd0: begin
			t_array_muxed2 <= sdram_bankmachine0_cmd_payload_we;
		end
		1'd1: begin
			t_array_muxed2 <= sdram_bankmachine1_cmd_payload_we;
		end
		2'd2: begin
			t_array_muxed2 <= sdram_bankmachine2_cmd_payload_we;
		end
		2'd3: begin
			t_array_muxed2 <= sdram_bankmachine3_cmd_payload_we;
		end
		3'd4: begin
			t_array_muxed2 <= sdram_bankmachine4_cmd_payload_we;
		end
		3'd5: begin
			t_array_muxed2 <= sdram_bankmachine5_cmd_payload_we;
		end
		3'd6: begin
			t_array_muxed2 <= sdram_bankmachine6_cmd_payload_we;
		end
		default: begin
			t_array_muxed2 <= sdram_bankmachine7_cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_322 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_323;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed6 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[0];
		end
		1'd1: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[1];
		end
		2'd2: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[2];
		end
		2'd3: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[3];
		end
		3'd4: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[4];
		end
		3'd5: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[5];
		end
		3'd6: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[6];
		end
		default: begin
			rhs_array_muxed6 <= sdram_choose_req_valids[7];
		end
	endcase
// synthesis translate_off
	dummy_d_323 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_324;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed7 <= 13'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			rhs_array_muxed7 <= sdram_bankmachine0_cmd_payload_a;
		end
		1'd1: begin
			rhs_array_muxed7 <= sdram_bankmachine1_cmd_payload_a;
		end
		2'd2: begin
			rhs_array_muxed7 <= sdram_bankmachine2_cmd_payload_a;
		end
		2'd3: begin
			rhs_array_muxed7 <= sdram_bankmachine3_cmd_payload_a;
		end
		3'd4: begin
			rhs_array_muxed7 <= sdram_bankmachine4_cmd_payload_a;
		end
		3'd5: begin
			rhs_array_muxed7 <= sdram_bankmachine5_cmd_payload_a;
		end
		3'd6: begin
			rhs_array_muxed7 <= sdram_bankmachine6_cmd_payload_a;
		end
		default: begin
			rhs_array_muxed7 <= sdram_bankmachine7_cmd_payload_a;
		end
	endcase
// synthesis translate_off
	dummy_d_324 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_325;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed8 <= 3'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			rhs_array_muxed8 <= sdram_bankmachine0_cmd_payload_ba;
		end
		1'd1: begin
			rhs_array_muxed8 <= sdram_bankmachine1_cmd_payload_ba;
		end
		2'd2: begin
			rhs_array_muxed8 <= sdram_bankmachine2_cmd_payload_ba;
		end
		2'd3: begin
			rhs_array_muxed8 <= sdram_bankmachine3_cmd_payload_ba;
		end
		3'd4: begin
			rhs_array_muxed8 <= sdram_bankmachine4_cmd_payload_ba;
		end
		3'd5: begin
			rhs_array_muxed8 <= sdram_bankmachine5_cmd_payload_ba;
		end
		3'd6: begin
			rhs_array_muxed8 <= sdram_bankmachine6_cmd_payload_ba;
		end
		default: begin
			rhs_array_muxed8 <= sdram_bankmachine7_cmd_payload_ba;
		end
	endcase
// synthesis translate_off
	dummy_d_325 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_326;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed9 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			rhs_array_muxed9 <= sdram_bankmachine0_cmd_payload_is_read;
		end
		1'd1: begin
			rhs_array_muxed9 <= sdram_bankmachine1_cmd_payload_is_read;
		end
		2'd2: begin
			rhs_array_muxed9 <= sdram_bankmachine2_cmd_payload_is_read;
		end
		2'd3: begin
			rhs_array_muxed9 <= sdram_bankmachine3_cmd_payload_is_read;
		end
		3'd4: begin
			rhs_array_muxed9 <= sdram_bankmachine4_cmd_payload_is_read;
		end
		3'd5: begin
			rhs_array_muxed9 <= sdram_bankmachine5_cmd_payload_is_read;
		end
		3'd6: begin
			rhs_array_muxed9 <= sdram_bankmachine6_cmd_payload_is_read;
		end
		default: begin
			rhs_array_muxed9 <= sdram_bankmachine7_cmd_payload_is_read;
		end
	endcase
// synthesis translate_off
	dummy_d_326 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_327;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed10 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			rhs_array_muxed10 <= sdram_bankmachine0_cmd_payload_is_write;
		end
		1'd1: begin
			rhs_array_muxed10 <= sdram_bankmachine1_cmd_payload_is_write;
		end
		2'd2: begin
			rhs_array_muxed10 <= sdram_bankmachine2_cmd_payload_is_write;
		end
		2'd3: begin
			rhs_array_muxed10 <= sdram_bankmachine3_cmd_payload_is_write;
		end
		3'd4: begin
			rhs_array_muxed10 <= sdram_bankmachine4_cmd_payload_is_write;
		end
		3'd5: begin
			rhs_array_muxed10 <= sdram_bankmachine5_cmd_payload_is_write;
		end
		3'd6: begin
			rhs_array_muxed10 <= sdram_bankmachine6_cmd_payload_is_write;
		end
		default: begin
			rhs_array_muxed10 <= sdram_bankmachine7_cmd_payload_is_write;
		end
	endcase
// synthesis translate_off
	dummy_d_327 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_328;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed11 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			rhs_array_muxed11 <= sdram_bankmachine0_cmd_payload_is_cmd;
		end
		1'd1: begin
			rhs_array_muxed11 <= sdram_bankmachine1_cmd_payload_is_cmd;
		end
		2'd2: begin
			rhs_array_muxed11 <= sdram_bankmachine2_cmd_payload_is_cmd;
		end
		2'd3: begin
			rhs_array_muxed11 <= sdram_bankmachine3_cmd_payload_is_cmd;
		end
		3'd4: begin
			rhs_array_muxed11 <= sdram_bankmachine4_cmd_payload_is_cmd;
		end
		3'd5: begin
			rhs_array_muxed11 <= sdram_bankmachine5_cmd_payload_is_cmd;
		end
		3'd6: begin
			rhs_array_muxed11 <= sdram_bankmachine6_cmd_payload_is_cmd;
		end
		default: begin
			rhs_array_muxed11 <= sdram_bankmachine7_cmd_payload_is_cmd;
		end
	endcase
// synthesis translate_off
	dummy_d_328 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_329;
// synthesis translate_on
always @(*) begin
	t_array_muxed3 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			t_array_muxed3 <= sdram_bankmachine0_cmd_payload_cas;
		end
		1'd1: begin
			t_array_muxed3 <= sdram_bankmachine1_cmd_payload_cas;
		end
		2'd2: begin
			t_array_muxed3 <= sdram_bankmachine2_cmd_payload_cas;
		end
		2'd3: begin
			t_array_muxed3 <= sdram_bankmachine3_cmd_payload_cas;
		end
		3'd4: begin
			t_array_muxed3 <= sdram_bankmachine4_cmd_payload_cas;
		end
		3'd5: begin
			t_array_muxed3 <= sdram_bankmachine5_cmd_payload_cas;
		end
		3'd6: begin
			t_array_muxed3 <= sdram_bankmachine6_cmd_payload_cas;
		end
		default: begin
			t_array_muxed3 <= sdram_bankmachine7_cmd_payload_cas;
		end
	endcase
// synthesis translate_off
	dummy_d_329 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_330;
// synthesis translate_on
always @(*) begin
	t_array_muxed4 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			t_array_muxed4 <= sdram_bankmachine0_cmd_payload_ras;
		end
		1'd1: begin
			t_array_muxed4 <= sdram_bankmachine1_cmd_payload_ras;
		end
		2'd2: begin
			t_array_muxed4 <= sdram_bankmachine2_cmd_payload_ras;
		end
		2'd3: begin
			t_array_muxed4 <= sdram_bankmachine3_cmd_payload_ras;
		end
		3'd4: begin
			t_array_muxed4 <= sdram_bankmachine4_cmd_payload_ras;
		end
		3'd5: begin
			t_array_muxed4 <= sdram_bankmachine5_cmd_payload_ras;
		end
		3'd6: begin
			t_array_muxed4 <= sdram_bankmachine6_cmd_payload_ras;
		end
		default: begin
			t_array_muxed4 <= sdram_bankmachine7_cmd_payload_ras;
		end
	endcase
// synthesis translate_off
	dummy_d_330 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_331;
// synthesis translate_on
always @(*) begin
	t_array_muxed5 <= 1'd0;
	case (sdram_choose_req_grant)
		1'd0: begin
			t_array_muxed5 <= sdram_bankmachine0_cmd_payload_we;
		end
		1'd1: begin
			t_array_muxed5 <= sdram_bankmachine1_cmd_payload_we;
		end
		2'd2: begin
			t_array_muxed5 <= sdram_bankmachine2_cmd_payload_we;
		end
		2'd3: begin
			t_array_muxed5 <= sdram_bankmachine3_cmd_payload_we;
		end
		3'd4: begin
			t_array_muxed5 <= sdram_bankmachine4_cmd_payload_we;
		end
		3'd5: begin
			t_array_muxed5 <= sdram_bankmachine5_cmd_payload_we;
		end
		3'd6: begin
			t_array_muxed5 <= sdram_bankmachine6_cmd_payload_we;
		end
		default: begin
			t_array_muxed5 <= sdram_bankmachine7_cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_331 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_332;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed12 <= 21'd0;
	case (subfragments_roundrobin0_grant)
		1'd0: begin
			rhs_array_muxed12 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed12 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_332 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_333;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed13 <= 1'd0;
	case (subfragments_roundrobin0_grant)
		1'd0: begin
			rhs_array_muxed13 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed13 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_333 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_334;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed14 <= 1'd0;
	case (subfragments_roundrobin0_grant)
		1'd0: begin
			rhs_array_muxed14 <= (((port_cmd_payload_addr[10:8] == 1'd0) & (~(((((((subfragments_locked0 | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed14 <= (((cmd_payload_addr[10:8] == 1'd0) & (~(((((((subfragments_locked1 | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_334 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_335;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed15 <= 21'd0;
	case (subfragments_roundrobin1_grant)
		1'd0: begin
			rhs_array_muxed15 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed15 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_335 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_336;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed16 <= 1'd0;
	case (subfragments_roundrobin1_grant)
		1'd0: begin
			rhs_array_muxed16 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed16 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_336 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_337;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed17 <= 1'd0;
	case (subfragments_roundrobin1_grant)
		1'd0: begin
			rhs_array_muxed17 <= (((port_cmd_payload_addr[10:8] == 1'd1) & (~(((((((subfragments_locked2 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed17 <= (((cmd_payload_addr[10:8] == 1'd1) & (~(((((((subfragments_locked3 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_337 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_338;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed18 <= 21'd0;
	case (subfragments_roundrobin2_grant)
		1'd0: begin
			rhs_array_muxed18 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed18 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_338 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_339;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed19 <= 1'd0;
	case (subfragments_roundrobin2_grant)
		1'd0: begin
			rhs_array_muxed19 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed19 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_339 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_340;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed20 <= 1'd0;
	case (subfragments_roundrobin2_grant)
		1'd0: begin
			rhs_array_muxed20 <= (((port_cmd_payload_addr[10:8] == 2'd2) & (~(((((((subfragments_locked4 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed20 <= (((cmd_payload_addr[10:8] == 2'd2) & (~(((((((subfragments_locked5 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_340 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_341;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed21 <= 21'd0;
	case (subfragments_roundrobin3_grant)
		1'd0: begin
			rhs_array_muxed21 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed21 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_341 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_342;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed22 <= 1'd0;
	case (subfragments_roundrobin3_grant)
		1'd0: begin
			rhs_array_muxed22 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed22 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_342 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_343;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed23 <= 1'd0;
	case (subfragments_roundrobin3_grant)
		1'd0: begin
			rhs_array_muxed23 <= (((port_cmd_payload_addr[10:8] == 2'd3) & (~(((((((subfragments_locked6 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed23 <= (((cmd_payload_addr[10:8] == 2'd3) & (~(((((((subfragments_locked7 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_343 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_344;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed24 <= 21'd0;
	case (subfragments_roundrobin4_grant)
		1'd0: begin
			rhs_array_muxed24 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed24 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_344 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_345;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed25 <= 1'd0;
	case (subfragments_roundrobin4_grant)
		1'd0: begin
			rhs_array_muxed25 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed25 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_345 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_346;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed26 <= 1'd0;
	case (subfragments_roundrobin4_grant)
		1'd0: begin
			rhs_array_muxed26 <= (((port_cmd_payload_addr[10:8] == 3'd4) & (~(((((((subfragments_locked8 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed26 <= (((cmd_payload_addr[10:8] == 3'd4) & (~(((((((subfragments_locked9 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_346 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_347;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed27 <= 21'd0;
	case (subfragments_roundrobin5_grant)
		1'd0: begin
			rhs_array_muxed27 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed27 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_347 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_348;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed28 <= 1'd0;
	case (subfragments_roundrobin5_grant)
		1'd0: begin
			rhs_array_muxed28 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed28 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_348 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_349;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed29 <= 1'd0;
	case (subfragments_roundrobin5_grant)
		1'd0: begin
			rhs_array_muxed29 <= (((port_cmd_payload_addr[10:8] == 3'd5) & (~(((((((subfragments_locked10 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed29 <= (((cmd_payload_addr[10:8] == 3'd5) & (~(((((((subfragments_locked11 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_349 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_350;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed30 <= 21'd0;
	case (subfragments_roundrobin6_grant)
		1'd0: begin
			rhs_array_muxed30 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed30 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_350 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_351;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed31 <= 1'd0;
	case (subfragments_roundrobin6_grant)
		1'd0: begin
			rhs_array_muxed31 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed31 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_351 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_352;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed32 <= 1'd0;
	case (subfragments_roundrobin6_grant)
		1'd0: begin
			rhs_array_muxed32 <= (((port_cmd_payload_addr[10:8] == 3'd6) & (~(((((((subfragments_locked12 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed32 <= (((cmd_payload_addr[10:8] == 3'd6) & (~(((((((subfragments_locked13 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank7_lock & (subfragments_roundrobin7_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_352 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_353;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed33 <= 21'd0;
	case (subfragments_roundrobin7_grant)
		1'd0: begin
			rhs_array_muxed33 <= {port_cmd_payload_addr[23:11], port_cmd_payload_addr[7:0]};
		end
		default: begin
			rhs_array_muxed33 <= {cmd_payload_addr[23:11], cmd_payload_addr[7:0]};
		end
	endcase
// synthesis translate_off
	dummy_d_353 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_354;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed34 <= 1'd0;
	case (subfragments_roundrobin7_grant)
		1'd0: begin
			rhs_array_muxed34 <= port_cmd_payload_we;
		end
		default: begin
			rhs_array_muxed34 <= cmd_payload_we;
		end
	endcase
// synthesis translate_off
	dummy_d_354 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_355;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed35 <= 1'd0;
	case (subfragments_roundrobin7_grant)
		1'd0: begin
			rhs_array_muxed35 <= (((port_cmd_payload_addr[10:8] == 3'd7) & (~(((((((subfragments_locked14 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd0))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd0))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd0))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd0))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd0))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd0))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd0))))) & port_cmd_valid);
		end
		default: begin
			rhs_array_muxed35 <= (((cmd_payload_addr[10:8] == 3'd7) & (~(((((((subfragments_locked15 | (sdram_interface_bank0_lock & (subfragments_roundrobin0_grant == 1'd1))) | (sdram_interface_bank1_lock & (subfragments_roundrobin1_grant == 1'd1))) | (sdram_interface_bank2_lock & (subfragments_roundrobin2_grant == 1'd1))) | (sdram_interface_bank3_lock & (subfragments_roundrobin3_grant == 1'd1))) | (sdram_interface_bank4_lock & (subfragments_roundrobin4_grant == 1'd1))) | (sdram_interface_bank5_lock & (subfragments_roundrobin5_grant == 1'd1))) | (sdram_interface_bank6_lock & (subfragments_roundrobin6_grant == 1'd1))))) & cmd_valid);
		end
	endcase
// synthesis translate_off
	dummy_d_355 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_356;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed36 <= 30'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed36 <= serv_ibus_adr;
		end
		default: begin
			rhs_array_muxed36 <= serv_dbus_adr;
		end
	endcase
// synthesis translate_off
	dummy_d_356 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_357;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed37 <= 32'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed37 <= serv_ibus_dat_w;
		end
		default: begin
			rhs_array_muxed37 <= serv_dbus_dat_w;
		end
	endcase
// synthesis translate_off
	dummy_d_357 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_358;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed38 <= 4'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed38 <= serv_ibus_sel;
		end
		default: begin
			rhs_array_muxed38 <= serv_dbus_sel;
		end
	endcase
// synthesis translate_off
	dummy_d_358 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_359;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed39 <= 1'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed39 <= serv_ibus_cyc;
		end
		default: begin
			rhs_array_muxed39 <= serv_dbus_cyc;
		end
	endcase
// synthesis translate_off
	dummy_d_359 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_360;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed40 <= 1'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed40 <= serv_ibus_stb;
		end
		default: begin
			rhs_array_muxed40 <= serv_dbus_stb;
		end
	endcase
// synthesis translate_off
	dummy_d_360 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_361;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed41 <= 1'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed41 <= serv_ibus_we;
		end
		default: begin
			rhs_array_muxed41 <= serv_dbus_we;
		end
	endcase
// synthesis translate_off
	dummy_d_361 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_362;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed42 <= 3'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed42 <= serv_ibus_cti;
		end
		default: begin
			rhs_array_muxed42 <= serv_dbus_cti;
		end
	endcase
// synthesis translate_off
	dummy_d_362 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_363;
// synthesis translate_on
always @(*) begin
	rhs_array_muxed43 <= 2'd0;
	case (litedramcore_grant)
		1'd0: begin
			rhs_array_muxed43 <= serv_ibus_bte;
		end
		default: begin
			rhs_array_muxed43 <= serv_dbus_bte;
		end
	endcase
// synthesis translate_off
	dummy_d_363 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_364;
// synthesis translate_on
always @(*) begin
	array_muxed0 <= 3'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed0 <= sdram_nop_ba[2:0];
		end
		1'd1: begin
			array_muxed0 <= sdram_choose_cmd_cmd_payload_ba[2:0];
		end
		2'd2: begin
			array_muxed0 <= sdram_choose_req_cmd_payload_ba[2:0];
		end
		default: begin
			array_muxed0 <= sdram_cmd_payload_ba[2:0];
		end
	endcase
// synthesis translate_off
	dummy_d_364 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_365;
// synthesis translate_on
always @(*) begin
	array_muxed1 <= 13'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed1 <= sdram_nop_a;
		end
		1'd1: begin
			array_muxed1 <= sdram_choose_cmd_cmd_payload_a;
		end
		2'd2: begin
			array_muxed1 <= sdram_choose_req_cmd_payload_a;
		end
		default: begin
			array_muxed1 <= sdram_cmd_payload_a;
		end
	endcase
// synthesis translate_off
	dummy_d_365 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_366;
// synthesis translate_on
always @(*) begin
	array_muxed2 <= 1'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed2 <= 1'd0;
		end
		1'd1: begin
			array_muxed2 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_cas);
		end
		2'd2: begin
			array_muxed2 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_cas);
		end
		default: begin
			array_muxed2 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_cas);
		end
	endcase
// synthesis translate_off
	dummy_d_366 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_367;
// synthesis translate_on
always @(*) begin
	array_muxed3 <= 1'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed3 <= 1'd0;
		end
		1'd1: begin
			array_muxed3 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_ras);
		end
		2'd2: begin
			array_muxed3 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_ras);
		end
		default: begin
			array_muxed3 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_ras);
		end
	endcase
// synthesis translate_off
	dummy_d_367 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_368;
// synthesis translate_on
always @(*) begin
	array_muxed4 <= 1'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed4 <= 1'd0;
		end
		1'd1: begin
			array_muxed4 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_we);
		end
		2'd2: begin
			array_muxed4 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_we);
		end
		default: begin
			array_muxed4 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_we);
		end
	endcase
// synthesis translate_off
	dummy_d_368 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_369;
// synthesis translate_on
always @(*) begin
	array_muxed5 <= 1'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed5 <= 1'd0;
		end
		1'd1: begin
			array_muxed5 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_is_read);
		end
		2'd2: begin
			array_muxed5 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_is_read);
		end
		default: begin
			array_muxed5 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_is_read);
		end
	endcase
// synthesis translate_off
	dummy_d_369 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_370;
// synthesis translate_on
always @(*) begin
	array_muxed6 <= 1'd0;
	case (sdram_steerer_sel0)
		1'd0: begin
			array_muxed6 <= 1'd0;
		end
		1'd1: begin
			array_muxed6 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_is_write);
		end
		2'd2: begin
			array_muxed6 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_is_write);
		end
		default: begin
			array_muxed6 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_is_write);
		end
	endcase
// synthesis translate_off
	dummy_d_370 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_371;
// synthesis translate_on
always @(*) begin
	array_muxed7 <= 3'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed7 <= sdram_nop_ba[2:0];
		end
		1'd1: begin
			array_muxed7 <= sdram_choose_cmd_cmd_payload_ba[2:0];
		end
		2'd2: begin
			array_muxed7 <= sdram_choose_req_cmd_payload_ba[2:0];
		end
		default: begin
			array_muxed7 <= sdram_cmd_payload_ba[2:0];
		end
	endcase
// synthesis translate_off
	dummy_d_371 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_372;
// synthesis translate_on
always @(*) begin
	array_muxed8 <= 13'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed8 <= sdram_nop_a;
		end
		1'd1: begin
			array_muxed8 <= sdram_choose_cmd_cmd_payload_a;
		end
		2'd2: begin
			array_muxed8 <= sdram_choose_req_cmd_payload_a;
		end
		default: begin
			array_muxed8 <= sdram_cmd_payload_a;
		end
	endcase
// synthesis translate_off
	dummy_d_372 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_373;
// synthesis translate_on
always @(*) begin
	array_muxed9 <= 1'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed9 <= 1'd0;
		end
		1'd1: begin
			array_muxed9 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_cas);
		end
		2'd2: begin
			array_muxed9 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_cas);
		end
		default: begin
			array_muxed9 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_cas);
		end
	endcase
// synthesis translate_off
	dummy_d_373 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_374;
// synthesis translate_on
always @(*) begin
	array_muxed10 <= 1'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed10 <= 1'd0;
		end
		1'd1: begin
			array_muxed10 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_ras);
		end
		2'd2: begin
			array_muxed10 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_ras);
		end
		default: begin
			array_muxed10 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_ras);
		end
	endcase
// synthesis translate_off
	dummy_d_374 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_375;
// synthesis translate_on
always @(*) begin
	array_muxed11 <= 1'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed11 <= 1'd0;
		end
		1'd1: begin
			array_muxed11 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_we);
		end
		2'd2: begin
			array_muxed11 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_we);
		end
		default: begin
			array_muxed11 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_we);
		end
	endcase
// synthesis translate_off
	dummy_d_375 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_376;
// synthesis translate_on
always @(*) begin
	array_muxed12 <= 1'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed12 <= 1'd0;
		end
		1'd1: begin
			array_muxed12 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_is_read);
		end
		2'd2: begin
			array_muxed12 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_is_read);
		end
		default: begin
			array_muxed12 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_is_read);
		end
	endcase
// synthesis translate_off
	dummy_d_376 = dummy_s;
// synthesis translate_on
end

// synthesis translate_off
reg dummy_d_377;
// synthesis translate_on
always @(*) begin
	array_muxed13 <= 1'd0;
	case (sdram_steerer_sel1)
		1'd0: begin
			array_muxed13 <= 1'd0;
		end
		1'd1: begin
			array_muxed13 <= ((sdram_choose_cmd_cmd_valid & sdram_choose_cmd_cmd_ready) & sdram_choose_cmd_cmd_payload_is_write);
		end
		2'd2: begin
			array_muxed13 <= ((sdram_choose_req_cmd_valid & sdram_choose_req_cmd_ready) & sdram_choose_req_cmd_payload_is_write);
		end
		default: begin
			array_muxed13 <= ((sdram_cmd_valid & sdram_cmd_ready) & sdram_cmd_payload_is_write);
		end
	endcase
// synthesis translate_off
	dummy_d_377 = dummy_s;
// synthesis translate_on
end
assign uart_phy_rx = regs1;
assign xilinxasyncresetsynchronizerimpl0 = (~locked);
assign xilinxasyncresetsynchronizerimpl1 = (~locked);
assign xilinxasyncresetsynchronizerimpl2 = (~locked);
assign xilinxasyncresetsynchronizerimpl3 = (~locked);

always @(posedge iodelay_clk) begin
	if ((reset_counter != 1'd0)) begin
		reset_counter <= (reset_counter - 1'd1);
	end else begin
		ic_reset <= 1'd0;
	end
	if (iodelay_rst) begin
		reset_counter <= 4'd15;
		ic_reset <= 1'd1;
	end
end

always @(posedge sys_clk) begin
	if ((soccontroller_bus_errors != 32'd4294967295)) begin
		if (soccontroller_bus_error) begin
			soccontroller_bus_errors <= (soccontroller_bus_errors + 1'd1);
		end
	end
	litedramcore_ram_bus_ack <= 1'd0;
	if (((litedramcore_ram_bus_cyc & litedramcore_ram_bus_stb) & (~litedramcore_ram_bus_ack))) begin
		litedramcore_ram_bus_ack <= 1'd1;
	end
	ram_bus_ram_bus_ack <= 1'd0;
	if (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & (~ram_bus_ram_bus_ack))) begin
		ram_bus_ram_bus_ack <= 1'd1;
	end
	uart_phy_sink_ready <= 1'd0;
	if (((uart_phy_sink_valid & (~uart_phy_tx_busy)) & (~uart_phy_sink_ready))) begin
		uart_phy_tx_reg <= uart_phy_sink_payload_data;
		uart_phy_tx_bitcount <= 1'd0;
		uart_phy_tx_busy <= 1'd1;
		serial_tx <= 1'd0;
	end else begin
		if ((uart_phy_tx_clken & uart_phy_tx_busy)) begin
			uart_phy_tx_bitcount <= (uart_phy_tx_bitcount + 1'd1);
			if ((uart_phy_tx_bitcount == 4'd8)) begin
				serial_tx <= 1'd1;
			end else begin
				if ((uart_phy_tx_bitcount == 4'd9)) begin
					serial_tx <= 1'd1;
					uart_phy_tx_busy <= 1'd0;
					uart_phy_sink_ready <= 1'd1;
				end else begin
					serial_tx <= uart_phy_tx_reg[0];
					uart_phy_tx_reg <= {1'd0, uart_phy_tx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_tx_busy) begin
		{uart_phy_tx_clken, uart_phy_tx_clkphase} <= (uart_phy_tx_clkphase + uart_phy_storage);
	end else begin
		{uart_phy_tx_clken, uart_phy_tx_clkphase} <= uart_phy_storage;
	end
	uart_phy_source_valid <= 1'd0;
	uart_phy_rx_r <= uart_phy_rx;
	if ((~uart_phy_rx_busy)) begin
		if (((~uart_phy_rx) & uart_phy_rx_r)) begin
			uart_phy_rx_busy <= 1'd1;
			uart_phy_rx_bitcount <= 1'd0;
		end
	end else begin
		if (uart_phy_rx_clken) begin
			uart_phy_rx_bitcount <= (uart_phy_rx_bitcount + 1'd1);
			if ((uart_phy_rx_bitcount == 1'd0)) begin
				if (uart_phy_rx) begin
					uart_phy_rx_busy <= 1'd0;
				end
			end else begin
				if ((uart_phy_rx_bitcount == 4'd9)) begin
					uart_phy_rx_busy <= 1'd0;
					if (uart_phy_rx) begin
						uart_phy_source_payload_data <= uart_phy_rx_reg;
						uart_phy_source_valid <= 1'd1;
					end
				end else begin
					uart_phy_rx_reg <= {uart_phy_rx, uart_phy_rx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_rx_busy) begin
		{uart_phy_rx_clken, uart_phy_rx_clkphase} <= (uart_phy_rx_clkphase + uart_phy_storage);
	end else begin
		{uart_phy_rx_clken, uart_phy_rx_clkphase} <= 32'd2147483648;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_old_trigger <= uart_tx_trigger;
	if (((~uart_tx_trigger) & uart_tx_old_trigger)) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_old_trigger <= uart_rx_trigger;
	if (((~uart_rx_trigger) & uart_rx_old_trigger)) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (uart_reset) begin
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_old_trigger <= timer_zero_trigger;
	if (((~timer_zero_trigger) & timer_zero_old_trigger)) begin
		timer_zero_pending <= 1'd1;
	end
	a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline <= a7ddrphy_dqs_oe_delay_tappeddelayline;
	a7ddrphy_dqspattern_o1 <= a7ddrphy_dqspattern_o0;
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip0_value0 <= (a7ddrphy_bitslip0_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip0_value0 <= 3'd7;
	end
	a7ddrphy_bitslip0_r0 <= {a7ddrphy_dqspattern_o1, a7ddrphy_bitslip0_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip1_value0 <= (a7ddrphy_bitslip1_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip1_value0 <= 3'd7;
	end
	a7ddrphy_bitslip1_r0 <= {a7ddrphy_dqspattern_o1, a7ddrphy_bitslip1_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip0_value1 <= (a7ddrphy_bitslip0_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip0_value1 <= 3'd7;
	end
	a7ddrphy_bitslip0_r1 <= {{a7ddrphy_dfi_p3_wrdata_mask[2], a7ddrphy_dfi_p3_wrdata_mask[0], a7ddrphy_dfi_p2_wrdata_mask[2], a7ddrphy_dfi_p2_wrdata_mask[0], a7ddrphy_dfi_p1_wrdata_mask[2], a7ddrphy_dfi_p1_wrdata_mask[0], a7ddrphy_dfi_p0_wrdata_mask[2], a7ddrphy_dfi_p0_wrdata_mask[0]}, a7ddrphy_bitslip0_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip1_value1 <= (a7ddrphy_bitslip1_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip1_value1 <= 3'd7;
	end
	a7ddrphy_bitslip1_r1 <= {{a7ddrphy_dfi_p3_wrdata_mask[3], a7ddrphy_dfi_p3_wrdata_mask[1], a7ddrphy_dfi_p2_wrdata_mask[3], a7ddrphy_dfi_p2_wrdata_mask[1], a7ddrphy_dfi_p1_wrdata_mask[3], a7ddrphy_dfi_p1_wrdata_mask[1], a7ddrphy_dfi_p0_wrdata_mask[3], a7ddrphy_dfi_p0_wrdata_mask[1]}, a7ddrphy_bitslip1_r1[15:8]};
	a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline <= a7ddrphy_dq_oe_delay_tappeddelayline;
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip0_value2 <= (a7ddrphy_bitslip0_value2 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip0_value2 <= 3'd7;
	end
	a7ddrphy_bitslip0_r2 <= {{a7ddrphy_dfi_p3_wrdata[16], a7ddrphy_dfi_p3_wrdata[0], a7ddrphy_dfi_p2_wrdata[16], a7ddrphy_dfi_p2_wrdata[0], a7ddrphy_dfi_p1_wrdata[16], a7ddrphy_dfi_p1_wrdata[0], a7ddrphy_dfi_p0_wrdata[16], a7ddrphy_dfi_p0_wrdata[0]}, a7ddrphy_bitslip0_r2[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip0_value3 <= (a7ddrphy_bitslip0_value3 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip0_value3 <= 3'd7;
	end
	a7ddrphy_bitslip0_r3 <= {a7ddrphy_bitslip03, a7ddrphy_bitslip0_r3[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip1_value2 <= (a7ddrphy_bitslip1_value2 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip1_value2 <= 3'd7;
	end
	a7ddrphy_bitslip1_r2 <= {{a7ddrphy_dfi_p3_wrdata[17], a7ddrphy_dfi_p3_wrdata[1], a7ddrphy_dfi_p2_wrdata[17], a7ddrphy_dfi_p2_wrdata[1], a7ddrphy_dfi_p1_wrdata[17], a7ddrphy_dfi_p1_wrdata[1], a7ddrphy_dfi_p0_wrdata[17], a7ddrphy_dfi_p0_wrdata[1]}, a7ddrphy_bitslip1_r2[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip1_value3 <= (a7ddrphy_bitslip1_value3 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip1_value3 <= 3'd7;
	end
	a7ddrphy_bitslip1_r3 <= {a7ddrphy_bitslip13, a7ddrphy_bitslip1_r3[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip2_value0 <= (a7ddrphy_bitslip2_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip2_value0 <= 3'd7;
	end
	a7ddrphy_bitslip2_r0 <= {{a7ddrphy_dfi_p3_wrdata[18], a7ddrphy_dfi_p3_wrdata[2], a7ddrphy_dfi_p2_wrdata[18], a7ddrphy_dfi_p2_wrdata[2], a7ddrphy_dfi_p1_wrdata[18], a7ddrphy_dfi_p1_wrdata[2], a7ddrphy_dfi_p0_wrdata[18], a7ddrphy_dfi_p0_wrdata[2]}, a7ddrphy_bitslip2_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip2_value1 <= (a7ddrphy_bitslip2_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip2_value1 <= 3'd7;
	end
	a7ddrphy_bitslip2_r1 <= {a7ddrphy_bitslip21, a7ddrphy_bitslip2_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip3_value0 <= (a7ddrphy_bitslip3_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip3_value0 <= 3'd7;
	end
	a7ddrphy_bitslip3_r0 <= {{a7ddrphy_dfi_p3_wrdata[19], a7ddrphy_dfi_p3_wrdata[3], a7ddrphy_dfi_p2_wrdata[19], a7ddrphy_dfi_p2_wrdata[3], a7ddrphy_dfi_p1_wrdata[19], a7ddrphy_dfi_p1_wrdata[3], a7ddrphy_dfi_p0_wrdata[19], a7ddrphy_dfi_p0_wrdata[3]}, a7ddrphy_bitslip3_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip3_value1 <= (a7ddrphy_bitslip3_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip3_value1 <= 3'd7;
	end
	a7ddrphy_bitslip3_r1 <= {a7ddrphy_bitslip31, a7ddrphy_bitslip3_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip4_value0 <= (a7ddrphy_bitslip4_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip4_value0 <= 3'd7;
	end
	a7ddrphy_bitslip4_r0 <= {{a7ddrphy_dfi_p3_wrdata[20], a7ddrphy_dfi_p3_wrdata[4], a7ddrphy_dfi_p2_wrdata[20], a7ddrphy_dfi_p2_wrdata[4], a7ddrphy_dfi_p1_wrdata[20], a7ddrphy_dfi_p1_wrdata[4], a7ddrphy_dfi_p0_wrdata[20], a7ddrphy_dfi_p0_wrdata[4]}, a7ddrphy_bitslip4_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip4_value1 <= (a7ddrphy_bitslip4_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip4_value1 <= 3'd7;
	end
	a7ddrphy_bitslip4_r1 <= {a7ddrphy_bitslip41, a7ddrphy_bitslip4_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip5_value0 <= (a7ddrphy_bitslip5_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip5_value0 <= 3'd7;
	end
	a7ddrphy_bitslip5_r0 <= {{a7ddrphy_dfi_p3_wrdata[21], a7ddrphy_dfi_p3_wrdata[5], a7ddrphy_dfi_p2_wrdata[21], a7ddrphy_dfi_p2_wrdata[5], a7ddrphy_dfi_p1_wrdata[21], a7ddrphy_dfi_p1_wrdata[5], a7ddrphy_dfi_p0_wrdata[21], a7ddrphy_dfi_p0_wrdata[5]}, a7ddrphy_bitslip5_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip5_value1 <= (a7ddrphy_bitslip5_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip5_value1 <= 3'd7;
	end
	a7ddrphy_bitslip5_r1 <= {a7ddrphy_bitslip51, a7ddrphy_bitslip5_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip6_value0 <= (a7ddrphy_bitslip6_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip6_value0 <= 3'd7;
	end
	a7ddrphy_bitslip6_r0 <= {{a7ddrphy_dfi_p3_wrdata[22], a7ddrphy_dfi_p3_wrdata[6], a7ddrphy_dfi_p2_wrdata[22], a7ddrphy_dfi_p2_wrdata[6], a7ddrphy_dfi_p1_wrdata[22], a7ddrphy_dfi_p1_wrdata[6], a7ddrphy_dfi_p0_wrdata[22], a7ddrphy_dfi_p0_wrdata[6]}, a7ddrphy_bitslip6_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip6_value1 <= (a7ddrphy_bitslip6_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip6_value1 <= 3'd7;
	end
	a7ddrphy_bitslip6_r1 <= {a7ddrphy_bitslip61, a7ddrphy_bitslip6_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip7_value0 <= (a7ddrphy_bitslip7_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip7_value0 <= 3'd7;
	end
	a7ddrphy_bitslip7_r0 <= {{a7ddrphy_dfi_p3_wrdata[23], a7ddrphy_dfi_p3_wrdata[7], a7ddrphy_dfi_p2_wrdata[23], a7ddrphy_dfi_p2_wrdata[7], a7ddrphy_dfi_p1_wrdata[23], a7ddrphy_dfi_p1_wrdata[7], a7ddrphy_dfi_p0_wrdata[23], a7ddrphy_dfi_p0_wrdata[7]}, a7ddrphy_bitslip7_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip7_value1 <= (a7ddrphy_bitslip7_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip7_value1 <= 3'd7;
	end
	a7ddrphy_bitslip7_r1 <= {a7ddrphy_bitslip71, a7ddrphy_bitslip7_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip8_value0 <= (a7ddrphy_bitslip8_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip8_value0 <= 3'd7;
	end
	a7ddrphy_bitslip8_r0 <= {{a7ddrphy_dfi_p3_wrdata[24], a7ddrphy_dfi_p3_wrdata[8], a7ddrphy_dfi_p2_wrdata[24], a7ddrphy_dfi_p2_wrdata[8], a7ddrphy_dfi_p1_wrdata[24], a7ddrphy_dfi_p1_wrdata[8], a7ddrphy_dfi_p0_wrdata[24], a7ddrphy_dfi_p0_wrdata[8]}, a7ddrphy_bitslip8_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip8_value1 <= (a7ddrphy_bitslip8_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip8_value1 <= 3'd7;
	end
	a7ddrphy_bitslip8_r1 <= {a7ddrphy_bitslip81, a7ddrphy_bitslip8_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip9_value0 <= (a7ddrphy_bitslip9_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip9_value0 <= 3'd7;
	end
	a7ddrphy_bitslip9_r0 <= {{a7ddrphy_dfi_p3_wrdata[25], a7ddrphy_dfi_p3_wrdata[9], a7ddrphy_dfi_p2_wrdata[25], a7ddrphy_dfi_p2_wrdata[9], a7ddrphy_dfi_p1_wrdata[25], a7ddrphy_dfi_p1_wrdata[9], a7ddrphy_dfi_p0_wrdata[25], a7ddrphy_dfi_p0_wrdata[9]}, a7ddrphy_bitslip9_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip9_value1 <= (a7ddrphy_bitslip9_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip9_value1 <= 3'd7;
	end
	a7ddrphy_bitslip9_r1 <= {a7ddrphy_bitslip91, a7ddrphy_bitslip9_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip10_value0 <= (a7ddrphy_bitslip10_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip10_value0 <= 3'd7;
	end
	a7ddrphy_bitslip10_r0 <= {{a7ddrphy_dfi_p3_wrdata[26], a7ddrphy_dfi_p3_wrdata[10], a7ddrphy_dfi_p2_wrdata[26], a7ddrphy_dfi_p2_wrdata[10], a7ddrphy_dfi_p1_wrdata[26], a7ddrphy_dfi_p1_wrdata[10], a7ddrphy_dfi_p0_wrdata[26], a7ddrphy_dfi_p0_wrdata[10]}, a7ddrphy_bitslip10_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip10_value1 <= (a7ddrphy_bitslip10_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip10_value1 <= 3'd7;
	end
	a7ddrphy_bitslip10_r1 <= {a7ddrphy_bitslip101, a7ddrphy_bitslip10_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip11_value0 <= (a7ddrphy_bitslip11_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip11_value0 <= 3'd7;
	end
	a7ddrphy_bitslip11_r0 <= {{a7ddrphy_dfi_p3_wrdata[27], a7ddrphy_dfi_p3_wrdata[11], a7ddrphy_dfi_p2_wrdata[27], a7ddrphy_dfi_p2_wrdata[11], a7ddrphy_dfi_p1_wrdata[27], a7ddrphy_dfi_p1_wrdata[11], a7ddrphy_dfi_p0_wrdata[27], a7ddrphy_dfi_p0_wrdata[11]}, a7ddrphy_bitslip11_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip11_value1 <= (a7ddrphy_bitslip11_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip11_value1 <= 3'd7;
	end
	a7ddrphy_bitslip11_r1 <= {a7ddrphy_bitslip111, a7ddrphy_bitslip11_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip12_value0 <= (a7ddrphy_bitslip12_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip12_value0 <= 3'd7;
	end
	a7ddrphy_bitslip12_r0 <= {{a7ddrphy_dfi_p3_wrdata[28], a7ddrphy_dfi_p3_wrdata[12], a7ddrphy_dfi_p2_wrdata[28], a7ddrphy_dfi_p2_wrdata[12], a7ddrphy_dfi_p1_wrdata[28], a7ddrphy_dfi_p1_wrdata[12], a7ddrphy_dfi_p0_wrdata[28], a7ddrphy_dfi_p0_wrdata[12]}, a7ddrphy_bitslip12_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip12_value1 <= (a7ddrphy_bitslip12_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip12_value1 <= 3'd7;
	end
	a7ddrphy_bitslip12_r1 <= {a7ddrphy_bitslip121, a7ddrphy_bitslip12_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip13_value0 <= (a7ddrphy_bitslip13_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip13_value0 <= 3'd7;
	end
	a7ddrphy_bitslip13_r0 <= {{a7ddrphy_dfi_p3_wrdata[29], a7ddrphy_dfi_p3_wrdata[13], a7ddrphy_dfi_p2_wrdata[29], a7ddrphy_dfi_p2_wrdata[13], a7ddrphy_dfi_p1_wrdata[29], a7ddrphy_dfi_p1_wrdata[13], a7ddrphy_dfi_p0_wrdata[29], a7ddrphy_dfi_p0_wrdata[13]}, a7ddrphy_bitslip13_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip13_value1 <= (a7ddrphy_bitslip13_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip13_value1 <= 3'd7;
	end
	a7ddrphy_bitslip13_r1 <= {a7ddrphy_bitslip131, a7ddrphy_bitslip13_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip14_value0 <= (a7ddrphy_bitslip14_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip14_value0 <= 3'd7;
	end
	a7ddrphy_bitslip14_r0 <= {{a7ddrphy_dfi_p3_wrdata[30], a7ddrphy_dfi_p3_wrdata[14], a7ddrphy_dfi_p2_wrdata[30], a7ddrphy_dfi_p2_wrdata[14], a7ddrphy_dfi_p1_wrdata[30], a7ddrphy_dfi_p1_wrdata[14], a7ddrphy_dfi_p0_wrdata[30], a7ddrphy_dfi_p0_wrdata[14]}, a7ddrphy_bitslip14_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip14_value1 <= (a7ddrphy_bitslip14_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip14_value1 <= 3'd7;
	end
	a7ddrphy_bitslip14_r1 <= {a7ddrphy_bitslip141, a7ddrphy_bitslip14_r1[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip15_value0 <= (a7ddrphy_bitslip15_value0 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip15_value0 <= 3'd7;
	end
	a7ddrphy_bitslip15_r0 <= {{a7ddrphy_dfi_p3_wrdata[31], a7ddrphy_dfi_p3_wrdata[15], a7ddrphy_dfi_p2_wrdata[31], a7ddrphy_dfi_p2_wrdata[15], a7ddrphy_dfi_p1_wrdata[31], a7ddrphy_dfi_p1_wrdata[15], a7ddrphy_dfi_p0_wrdata[31], a7ddrphy_dfi_p0_wrdata[15]}, a7ddrphy_bitslip15_r0[15:8]};
	if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
		a7ddrphy_bitslip15_value1 <= (a7ddrphy_bitslip15_value1 + 1'd1);
	end
	if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
		a7ddrphy_bitslip15_value1 <= 3'd7;
	end
	a7ddrphy_bitslip15_r1 <= {a7ddrphy_bitslip151, a7ddrphy_bitslip15_r1[15:8]};
	a7ddrphy_rddata_en_tappeddelayline0 <= (a7ddrphy_dfi_p0_rddata_en | a7ddrphy_dfi_p1_rddata_en);
	a7ddrphy_rddata_en_tappeddelayline1 <= a7ddrphy_rddata_en_tappeddelayline0;
	a7ddrphy_rddata_en_tappeddelayline2 <= a7ddrphy_rddata_en_tappeddelayline1;
	a7ddrphy_rddata_en_tappeddelayline3 <= a7ddrphy_rddata_en_tappeddelayline2;
	a7ddrphy_rddata_en_tappeddelayline4 <= a7ddrphy_rddata_en_tappeddelayline3;
	a7ddrphy_rddata_en_tappeddelayline5 <= a7ddrphy_rddata_en_tappeddelayline4;
	a7ddrphy_rddata_en_tappeddelayline6 <= a7ddrphy_rddata_en_tappeddelayline5;
	a7ddrphy_rddata_en_tappeddelayline7 <= a7ddrphy_rddata_en_tappeddelayline6;
	a7ddrphy_wrdata_en_tappeddelayline0 <= (a7ddrphy_dfi_p0_wrdata_en | a7ddrphy_dfi_p1_wrdata_en);
	a7ddrphy_wrdata_en_tappeddelayline1 <= a7ddrphy_wrdata_en_tappeddelayline0;
	if (sdram_inti_p0_rddata_valid) begin
		sdram_phaseinjector0_rddata_status <= sdram_inti_p0_rddata;
	end
	if (sdram_inti_p1_rddata_valid) begin
		sdram_phaseinjector1_rddata_status <= sdram_inti_p1_rddata;
	end
	if ((sdram_timer_wait & (~sdram_timer_done0))) begin
		sdram_timer_count1 <= (sdram_timer_count1 - 1'd1);
	end else begin
		sdram_timer_count1 <= 10'd781;
	end
	sdram_postponer_req_o <= 1'd0;
	if (sdram_postponer_req_i) begin
		sdram_postponer_count <= (sdram_postponer_count - 1'd1);
		if ((sdram_postponer_count == 1'd0)) begin
			sdram_postponer_count <= 1'd0;
			sdram_postponer_req_o <= 1'd1;
		end
	end
	if (sdram_sequencer_start0) begin
		sdram_sequencer_count <= 1'd0;
	end else begin
		if (sdram_sequencer_done1) begin
			if ((sdram_sequencer_count != 1'd0)) begin
				sdram_sequencer_count <= (sdram_sequencer_count - 1'd1);
			end
		end
	end
	sdram_cmd_payload_a <= 1'd0;
	sdram_cmd_payload_ba <= 1'd0;
	sdram_cmd_payload_cas <= 1'd0;
	sdram_cmd_payload_ras <= 1'd0;
	sdram_cmd_payload_we <= 1'd0;
	sdram_sequencer_done1 <= 1'd0;
	if ((sdram_sequencer_start1 & (sdram_sequencer_counter == 1'd0))) begin
		sdram_cmd_payload_a <= 11'd1024;
		sdram_cmd_payload_ba <= 1'd0;
		sdram_cmd_payload_cas <= 1'd0;
		sdram_cmd_payload_ras <= 1'd1;
		sdram_cmd_payload_we <= 1'd1;
	end
	if ((sdram_sequencer_counter == 2'd2)) begin
		sdram_cmd_payload_a <= 1'd0;
		sdram_cmd_payload_ba <= 1'd0;
		sdram_cmd_payload_cas <= 1'd1;
		sdram_cmd_payload_ras <= 1'd1;
		sdram_cmd_payload_we <= 1'd0;
	end
	if ((sdram_sequencer_counter == 5'd16)) begin
		sdram_cmd_payload_a <= 1'd0;
		sdram_cmd_payload_ba <= 1'd0;
		sdram_cmd_payload_cas <= 1'd0;
		sdram_cmd_payload_ras <= 1'd0;
		sdram_cmd_payload_we <= 1'd0;
		sdram_sequencer_done1 <= 1'd1;
	end
	if ((sdram_sequencer_counter == 5'd16)) begin
		sdram_sequencer_counter <= 1'd0;
	end else begin
		if ((sdram_sequencer_counter != 1'd0)) begin
			sdram_sequencer_counter <= (sdram_sequencer_counter + 1'd1);
		end else begin
			if (sdram_sequencer_start1) begin
				sdram_sequencer_counter <= 1'd1;
			end
		end
	end
	subfragments_refresher_state <= subfragments_refresher_next_state;
	if (sdram_bankmachine0_row_close) begin
		sdram_bankmachine0_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine0_row_open) begin
			sdram_bankmachine0_row_opened <= 1'd1;
			sdram_bankmachine0_row <= sdram_bankmachine0_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we & sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable) & (~sdram_bankmachine0_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine0_cmd_buffer_lookahead_produce <= (sdram_bankmachine0_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine0_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine0_cmd_buffer_lookahead_consume <= (sdram_bankmachine0_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_we & sdram_bankmachine0_cmd_buffer_lookahead_syncfifo0_writable) & (~sdram_bankmachine0_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine0_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine0_cmd_buffer_lookahead_level <= (sdram_bankmachine0_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine0_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine0_cmd_buffer_lookahead_level <= (sdram_bankmachine0_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine0_cmd_buffer_source_valid) | sdram_bankmachine0_cmd_buffer_source_ready)) begin
		sdram_bankmachine0_cmd_buffer_source_valid <= sdram_bankmachine0_cmd_buffer_sink_valid;
		sdram_bankmachine0_cmd_buffer_source_first <= sdram_bankmachine0_cmd_buffer_sink_first;
		sdram_bankmachine0_cmd_buffer_source_last <= sdram_bankmachine0_cmd_buffer_sink_last;
		sdram_bankmachine0_cmd_buffer_source_payload_we <= sdram_bankmachine0_cmd_buffer_sink_payload_we;
		sdram_bankmachine0_cmd_buffer_source_payload_addr <= sdram_bankmachine0_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine0_twtpcon_valid) begin
		sdram_bankmachine0_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine0_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine0_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine0_twtpcon_ready)) begin
			sdram_bankmachine0_twtpcon_count <= (sdram_bankmachine0_twtpcon_count - 1'd1);
			if ((sdram_bankmachine0_twtpcon_count == 1'd1)) begin
				sdram_bankmachine0_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine0_state <= subfragments_bankmachine0_next_state;
	if (sdram_bankmachine1_row_close) begin
		sdram_bankmachine1_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine1_row_open) begin
			sdram_bankmachine1_row_opened <= 1'd1;
			sdram_bankmachine1_row <= sdram_bankmachine1_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we & sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable) & (~sdram_bankmachine1_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine1_cmd_buffer_lookahead_produce <= (sdram_bankmachine1_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine1_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine1_cmd_buffer_lookahead_consume <= (sdram_bankmachine1_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_we & sdram_bankmachine1_cmd_buffer_lookahead_syncfifo1_writable) & (~sdram_bankmachine1_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine1_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine1_cmd_buffer_lookahead_level <= (sdram_bankmachine1_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine1_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine1_cmd_buffer_lookahead_level <= (sdram_bankmachine1_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine1_cmd_buffer_source_valid) | sdram_bankmachine1_cmd_buffer_source_ready)) begin
		sdram_bankmachine1_cmd_buffer_source_valid <= sdram_bankmachine1_cmd_buffer_sink_valid;
		sdram_bankmachine1_cmd_buffer_source_first <= sdram_bankmachine1_cmd_buffer_sink_first;
		sdram_bankmachine1_cmd_buffer_source_last <= sdram_bankmachine1_cmd_buffer_sink_last;
		sdram_bankmachine1_cmd_buffer_source_payload_we <= sdram_bankmachine1_cmd_buffer_sink_payload_we;
		sdram_bankmachine1_cmd_buffer_source_payload_addr <= sdram_bankmachine1_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine1_twtpcon_valid) begin
		sdram_bankmachine1_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine1_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine1_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine1_twtpcon_ready)) begin
			sdram_bankmachine1_twtpcon_count <= (sdram_bankmachine1_twtpcon_count - 1'd1);
			if ((sdram_bankmachine1_twtpcon_count == 1'd1)) begin
				sdram_bankmachine1_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine1_state <= subfragments_bankmachine1_next_state;
	if (sdram_bankmachine2_row_close) begin
		sdram_bankmachine2_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine2_row_open) begin
			sdram_bankmachine2_row_opened <= 1'd1;
			sdram_bankmachine2_row <= sdram_bankmachine2_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we & sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable) & (~sdram_bankmachine2_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine2_cmd_buffer_lookahead_produce <= (sdram_bankmachine2_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine2_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine2_cmd_buffer_lookahead_consume <= (sdram_bankmachine2_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_we & sdram_bankmachine2_cmd_buffer_lookahead_syncfifo2_writable) & (~sdram_bankmachine2_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine2_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine2_cmd_buffer_lookahead_level <= (sdram_bankmachine2_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine2_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine2_cmd_buffer_lookahead_level <= (sdram_bankmachine2_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine2_cmd_buffer_source_valid) | sdram_bankmachine2_cmd_buffer_source_ready)) begin
		sdram_bankmachine2_cmd_buffer_source_valid <= sdram_bankmachine2_cmd_buffer_sink_valid;
		sdram_bankmachine2_cmd_buffer_source_first <= sdram_bankmachine2_cmd_buffer_sink_first;
		sdram_bankmachine2_cmd_buffer_source_last <= sdram_bankmachine2_cmd_buffer_sink_last;
		sdram_bankmachine2_cmd_buffer_source_payload_we <= sdram_bankmachine2_cmd_buffer_sink_payload_we;
		sdram_bankmachine2_cmd_buffer_source_payload_addr <= sdram_bankmachine2_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine2_twtpcon_valid) begin
		sdram_bankmachine2_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine2_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine2_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine2_twtpcon_ready)) begin
			sdram_bankmachine2_twtpcon_count <= (sdram_bankmachine2_twtpcon_count - 1'd1);
			if ((sdram_bankmachine2_twtpcon_count == 1'd1)) begin
				sdram_bankmachine2_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine2_state <= subfragments_bankmachine2_next_state;
	if (sdram_bankmachine3_row_close) begin
		sdram_bankmachine3_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine3_row_open) begin
			sdram_bankmachine3_row_opened <= 1'd1;
			sdram_bankmachine3_row <= sdram_bankmachine3_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we & sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable) & (~sdram_bankmachine3_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine3_cmd_buffer_lookahead_produce <= (sdram_bankmachine3_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine3_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine3_cmd_buffer_lookahead_consume <= (sdram_bankmachine3_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_we & sdram_bankmachine3_cmd_buffer_lookahead_syncfifo3_writable) & (~sdram_bankmachine3_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine3_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine3_cmd_buffer_lookahead_level <= (sdram_bankmachine3_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine3_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine3_cmd_buffer_lookahead_level <= (sdram_bankmachine3_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine3_cmd_buffer_source_valid) | sdram_bankmachine3_cmd_buffer_source_ready)) begin
		sdram_bankmachine3_cmd_buffer_source_valid <= sdram_bankmachine3_cmd_buffer_sink_valid;
		sdram_bankmachine3_cmd_buffer_source_first <= sdram_bankmachine3_cmd_buffer_sink_first;
		sdram_bankmachine3_cmd_buffer_source_last <= sdram_bankmachine3_cmd_buffer_sink_last;
		sdram_bankmachine3_cmd_buffer_source_payload_we <= sdram_bankmachine3_cmd_buffer_sink_payload_we;
		sdram_bankmachine3_cmd_buffer_source_payload_addr <= sdram_bankmachine3_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine3_twtpcon_valid) begin
		sdram_bankmachine3_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine3_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine3_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine3_twtpcon_ready)) begin
			sdram_bankmachine3_twtpcon_count <= (sdram_bankmachine3_twtpcon_count - 1'd1);
			if ((sdram_bankmachine3_twtpcon_count == 1'd1)) begin
				sdram_bankmachine3_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine3_state <= subfragments_bankmachine3_next_state;
	if (sdram_bankmachine4_row_close) begin
		sdram_bankmachine4_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine4_row_open) begin
			sdram_bankmachine4_row_opened <= 1'd1;
			sdram_bankmachine4_row <= sdram_bankmachine4_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_we & sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_writable) & (~sdram_bankmachine4_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine4_cmd_buffer_lookahead_produce <= (sdram_bankmachine4_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine4_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine4_cmd_buffer_lookahead_consume <= (sdram_bankmachine4_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_we & sdram_bankmachine4_cmd_buffer_lookahead_syncfifo4_writable) & (~sdram_bankmachine4_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine4_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine4_cmd_buffer_lookahead_level <= (sdram_bankmachine4_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine4_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine4_cmd_buffer_lookahead_level <= (sdram_bankmachine4_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine4_cmd_buffer_source_valid) | sdram_bankmachine4_cmd_buffer_source_ready)) begin
		sdram_bankmachine4_cmd_buffer_source_valid <= sdram_bankmachine4_cmd_buffer_sink_valid;
		sdram_bankmachine4_cmd_buffer_source_first <= sdram_bankmachine4_cmd_buffer_sink_first;
		sdram_bankmachine4_cmd_buffer_source_last <= sdram_bankmachine4_cmd_buffer_sink_last;
		sdram_bankmachine4_cmd_buffer_source_payload_we <= sdram_bankmachine4_cmd_buffer_sink_payload_we;
		sdram_bankmachine4_cmd_buffer_source_payload_addr <= sdram_bankmachine4_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine4_twtpcon_valid) begin
		sdram_bankmachine4_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine4_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine4_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine4_twtpcon_ready)) begin
			sdram_bankmachine4_twtpcon_count <= (sdram_bankmachine4_twtpcon_count - 1'd1);
			if ((sdram_bankmachine4_twtpcon_count == 1'd1)) begin
				sdram_bankmachine4_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine4_state <= subfragments_bankmachine4_next_state;
	if (sdram_bankmachine5_row_close) begin
		sdram_bankmachine5_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine5_row_open) begin
			sdram_bankmachine5_row_opened <= 1'd1;
			sdram_bankmachine5_row <= sdram_bankmachine5_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_we & sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_writable) & (~sdram_bankmachine5_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine5_cmd_buffer_lookahead_produce <= (sdram_bankmachine5_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine5_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine5_cmd_buffer_lookahead_consume <= (sdram_bankmachine5_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_we & sdram_bankmachine5_cmd_buffer_lookahead_syncfifo5_writable) & (~sdram_bankmachine5_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine5_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine5_cmd_buffer_lookahead_level <= (sdram_bankmachine5_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine5_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine5_cmd_buffer_lookahead_level <= (sdram_bankmachine5_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine5_cmd_buffer_source_valid) | sdram_bankmachine5_cmd_buffer_source_ready)) begin
		sdram_bankmachine5_cmd_buffer_source_valid <= sdram_bankmachine5_cmd_buffer_sink_valid;
		sdram_bankmachine5_cmd_buffer_source_first <= sdram_bankmachine5_cmd_buffer_sink_first;
		sdram_bankmachine5_cmd_buffer_source_last <= sdram_bankmachine5_cmd_buffer_sink_last;
		sdram_bankmachine5_cmd_buffer_source_payload_we <= sdram_bankmachine5_cmd_buffer_sink_payload_we;
		sdram_bankmachine5_cmd_buffer_source_payload_addr <= sdram_bankmachine5_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine5_twtpcon_valid) begin
		sdram_bankmachine5_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine5_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine5_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine5_twtpcon_ready)) begin
			sdram_bankmachine5_twtpcon_count <= (sdram_bankmachine5_twtpcon_count - 1'd1);
			if ((sdram_bankmachine5_twtpcon_count == 1'd1)) begin
				sdram_bankmachine5_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine5_state <= subfragments_bankmachine5_next_state;
	if (sdram_bankmachine6_row_close) begin
		sdram_bankmachine6_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine6_row_open) begin
			sdram_bankmachine6_row_opened <= 1'd1;
			sdram_bankmachine6_row <= sdram_bankmachine6_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_we & sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_writable) & (~sdram_bankmachine6_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine6_cmd_buffer_lookahead_produce <= (sdram_bankmachine6_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine6_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine6_cmd_buffer_lookahead_consume <= (sdram_bankmachine6_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_we & sdram_bankmachine6_cmd_buffer_lookahead_syncfifo6_writable) & (~sdram_bankmachine6_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine6_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine6_cmd_buffer_lookahead_level <= (sdram_bankmachine6_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine6_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine6_cmd_buffer_lookahead_level <= (sdram_bankmachine6_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine6_cmd_buffer_source_valid) | sdram_bankmachine6_cmd_buffer_source_ready)) begin
		sdram_bankmachine6_cmd_buffer_source_valid <= sdram_bankmachine6_cmd_buffer_sink_valid;
		sdram_bankmachine6_cmd_buffer_source_first <= sdram_bankmachine6_cmd_buffer_sink_first;
		sdram_bankmachine6_cmd_buffer_source_last <= sdram_bankmachine6_cmd_buffer_sink_last;
		sdram_bankmachine6_cmd_buffer_source_payload_we <= sdram_bankmachine6_cmd_buffer_sink_payload_we;
		sdram_bankmachine6_cmd_buffer_source_payload_addr <= sdram_bankmachine6_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine6_twtpcon_valid) begin
		sdram_bankmachine6_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine6_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine6_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine6_twtpcon_ready)) begin
			sdram_bankmachine6_twtpcon_count <= (sdram_bankmachine6_twtpcon_count - 1'd1);
			if ((sdram_bankmachine6_twtpcon_count == 1'd1)) begin
				sdram_bankmachine6_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine6_state <= subfragments_bankmachine6_next_state;
	if (sdram_bankmachine7_row_close) begin
		sdram_bankmachine7_row_opened <= 1'd0;
	end else begin
		if (sdram_bankmachine7_row_open) begin
			sdram_bankmachine7_row_opened <= 1'd1;
			sdram_bankmachine7_row <= sdram_bankmachine7_cmd_buffer_source_payload_addr[20:8];
		end
	end
	if (((sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_we & sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_writable) & (~sdram_bankmachine7_cmd_buffer_lookahead_replace))) begin
		sdram_bankmachine7_cmd_buffer_lookahead_produce <= (sdram_bankmachine7_cmd_buffer_lookahead_produce + 1'd1);
	end
	if (sdram_bankmachine7_cmd_buffer_lookahead_do_read) begin
		sdram_bankmachine7_cmd_buffer_lookahead_consume <= (sdram_bankmachine7_cmd_buffer_lookahead_consume + 1'd1);
	end
	if (((sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_we & sdram_bankmachine7_cmd_buffer_lookahead_syncfifo7_writable) & (~sdram_bankmachine7_cmd_buffer_lookahead_replace))) begin
		if ((~sdram_bankmachine7_cmd_buffer_lookahead_do_read)) begin
			sdram_bankmachine7_cmd_buffer_lookahead_level <= (sdram_bankmachine7_cmd_buffer_lookahead_level + 1'd1);
		end
	end else begin
		if (sdram_bankmachine7_cmd_buffer_lookahead_do_read) begin
			sdram_bankmachine7_cmd_buffer_lookahead_level <= (sdram_bankmachine7_cmd_buffer_lookahead_level - 1'd1);
		end
	end
	if (((~sdram_bankmachine7_cmd_buffer_source_valid) | sdram_bankmachine7_cmd_buffer_source_ready)) begin
		sdram_bankmachine7_cmd_buffer_source_valid <= sdram_bankmachine7_cmd_buffer_sink_valid;
		sdram_bankmachine7_cmd_buffer_source_first <= sdram_bankmachine7_cmd_buffer_sink_first;
		sdram_bankmachine7_cmd_buffer_source_last <= sdram_bankmachine7_cmd_buffer_sink_last;
		sdram_bankmachine7_cmd_buffer_source_payload_we <= sdram_bankmachine7_cmd_buffer_sink_payload_we;
		sdram_bankmachine7_cmd_buffer_source_payload_addr <= sdram_bankmachine7_cmd_buffer_sink_payload_addr;
	end
	if (sdram_bankmachine7_twtpcon_valid) begin
		sdram_bankmachine7_twtpcon_count <= 2'd3;
		if (1'd0) begin
			sdram_bankmachine7_twtpcon_ready <= 1'd1;
		end else begin
			sdram_bankmachine7_twtpcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_bankmachine7_twtpcon_ready)) begin
			sdram_bankmachine7_twtpcon_count <= (sdram_bankmachine7_twtpcon_count - 1'd1);
			if ((sdram_bankmachine7_twtpcon_count == 1'd1)) begin
				sdram_bankmachine7_twtpcon_ready <= 1'd1;
			end
		end
	end
	subfragments_bankmachine7_state <= subfragments_bankmachine7_next_state;
	if ((~sdram_en0)) begin
		sdram_time0 <= 5'd31;
	end else begin
		if ((~sdram_max_time0)) begin
			sdram_time0 <= (sdram_time0 - 1'd1);
		end
	end
	if ((~sdram_en1)) begin
		sdram_time1 <= 4'd15;
	end else begin
		if ((~sdram_max_time1)) begin
			sdram_time1 <= (sdram_time1 - 1'd1);
		end
	end
	if (sdram_choose_cmd_ce) begin
		case (sdram_choose_cmd_grant)
			1'd0: begin
				if (sdram_choose_cmd_request[1]) begin
					sdram_choose_cmd_grant <= 1'd1;
				end else begin
					if (sdram_choose_cmd_request[2]) begin
						sdram_choose_cmd_grant <= 2'd2;
					end else begin
						if (sdram_choose_cmd_request[3]) begin
							sdram_choose_cmd_grant <= 2'd3;
						end else begin
							if (sdram_choose_cmd_request[4]) begin
								sdram_choose_cmd_grant <= 3'd4;
							end else begin
								if (sdram_choose_cmd_request[5]) begin
									sdram_choose_cmd_grant <= 3'd5;
								end else begin
									if (sdram_choose_cmd_request[6]) begin
										sdram_choose_cmd_grant <= 3'd6;
									end else begin
										if (sdram_choose_cmd_request[7]) begin
											sdram_choose_cmd_grant <= 3'd7;
										end
									end
								end
							end
						end
					end
				end
			end
			1'd1: begin
				if (sdram_choose_cmd_request[2]) begin
					sdram_choose_cmd_grant <= 2'd2;
				end else begin
					if (sdram_choose_cmd_request[3]) begin
						sdram_choose_cmd_grant <= 2'd3;
					end else begin
						if (sdram_choose_cmd_request[4]) begin
							sdram_choose_cmd_grant <= 3'd4;
						end else begin
							if (sdram_choose_cmd_request[5]) begin
								sdram_choose_cmd_grant <= 3'd5;
							end else begin
								if (sdram_choose_cmd_request[6]) begin
									sdram_choose_cmd_grant <= 3'd6;
								end else begin
									if (sdram_choose_cmd_request[7]) begin
										sdram_choose_cmd_grant <= 3'd7;
									end else begin
										if (sdram_choose_cmd_request[0]) begin
											sdram_choose_cmd_grant <= 1'd0;
										end
									end
								end
							end
						end
					end
				end
			end
			2'd2: begin
				if (sdram_choose_cmd_request[3]) begin
					sdram_choose_cmd_grant <= 2'd3;
				end else begin
					if (sdram_choose_cmd_request[4]) begin
						sdram_choose_cmd_grant <= 3'd4;
					end else begin
						if (sdram_choose_cmd_request[5]) begin
							sdram_choose_cmd_grant <= 3'd5;
						end else begin
							if (sdram_choose_cmd_request[6]) begin
								sdram_choose_cmd_grant <= 3'd6;
							end else begin
								if (sdram_choose_cmd_request[7]) begin
									sdram_choose_cmd_grant <= 3'd7;
								end else begin
									if (sdram_choose_cmd_request[0]) begin
										sdram_choose_cmd_grant <= 1'd0;
									end else begin
										if (sdram_choose_cmd_request[1]) begin
											sdram_choose_cmd_grant <= 1'd1;
										end
									end
								end
							end
						end
					end
				end
			end
			2'd3: begin
				if (sdram_choose_cmd_request[4]) begin
					sdram_choose_cmd_grant <= 3'd4;
				end else begin
					if (sdram_choose_cmd_request[5]) begin
						sdram_choose_cmd_grant <= 3'd5;
					end else begin
						if (sdram_choose_cmd_request[6]) begin
							sdram_choose_cmd_grant <= 3'd6;
						end else begin
							if (sdram_choose_cmd_request[7]) begin
								sdram_choose_cmd_grant <= 3'd7;
							end else begin
								if (sdram_choose_cmd_request[0]) begin
									sdram_choose_cmd_grant <= 1'd0;
								end else begin
									if (sdram_choose_cmd_request[1]) begin
										sdram_choose_cmd_grant <= 1'd1;
									end else begin
										if (sdram_choose_cmd_request[2]) begin
											sdram_choose_cmd_grant <= 2'd2;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd4: begin
				if (sdram_choose_cmd_request[5]) begin
					sdram_choose_cmd_grant <= 3'd5;
				end else begin
					if (sdram_choose_cmd_request[6]) begin
						sdram_choose_cmd_grant <= 3'd6;
					end else begin
						if (sdram_choose_cmd_request[7]) begin
							sdram_choose_cmd_grant <= 3'd7;
						end else begin
							if (sdram_choose_cmd_request[0]) begin
								sdram_choose_cmd_grant <= 1'd0;
							end else begin
								if (sdram_choose_cmd_request[1]) begin
									sdram_choose_cmd_grant <= 1'd1;
								end else begin
									if (sdram_choose_cmd_request[2]) begin
										sdram_choose_cmd_grant <= 2'd2;
									end else begin
										if (sdram_choose_cmd_request[3]) begin
											sdram_choose_cmd_grant <= 2'd3;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd5: begin
				if (sdram_choose_cmd_request[6]) begin
					sdram_choose_cmd_grant <= 3'd6;
				end else begin
					if (sdram_choose_cmd_request[7]) begin
						sdram_choose_cmd_grant <= 3'd7;
					end else begin
						if (sdram_choose_cmd_request[0]) begin
							sdram_choose_cmd_grant <= 1'd0;
						end else begin
							if (sdram_choose_cmd_request[1]) begin
								sdram_choose_cmd_grant <= 1'd1;
							end else begin
								if (sdram_choose_cmd_request[2]) begin
									sdram_choose_cmd_grant <= 2'd2;
								end else begin
									if (sdram_choose_cmd_request[3]) begin
										sdram_choose_cmd_grant <= 2'd3;
									end else begin
										if (sdram_choose_cmd_request[4]) begin
											sdram_choose_cmd_grant <= 3'd4;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd6: begin
				if (sdram_choose_cmd_request[7]) begin
					sdram_choose_cmd_grant <= 3'd7;
				end else begin
					if (sdram_choose_cmd_request[0]) begin
						sdram_choose_cmd_grant <= 1'd0;
					end else begin
						if (sdram_choose_cmd_request[1]) begin
							sdram_choose_cmd_grant <= 1'd1;
						end else begin
							if (sdram_choose_cmd_request[2]) begin
								sdram_choose_cmd_grant <= 2'd2;
							end else begin
								if (sdram_choose_cmd_request[3]) begin
									sdram_choose_cmd_grant <= 2'd3;
								end else begin
									if (sdram_choose_cmd_request[4]) begin
										sdram_choose_cmd_grant <= 3'd4;
									end else begin
										if (sdram_choose_cmd_request[5]) begin
											sdram_choose_cmd_grant <= 3'd5;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd7: begin
				if (sdram_choose_cmd_request[0]) begin
					sdram_choose_cmd_grant <= 1'd0;
				end else begin
					if (sdram_choose_cmd_request[1]) begin
						sdram_choose_cmd_grant <= 1'd1;
					end else begin
						if (sdram_choose_cmd_request[2]) begin
							sdram_choose_cmd_grant <= 2'd2;
						end else begin
							if (sdram_choose_cmd_request[3]) begin
								sdram_choose_cmd_grant <= 2'd3;
							end else begin
								if (sdram_choose_cmd_request[4]) begin
									sdram_choose_cmd_grant <= 3'd4;
								end else begin
									if (sdram_choose_cmd_request[5]) begin
										sdram_choose_cmd_grant <= 3'd5;
									end else begin
										if (sdram_choose_cmd_request[6]) begin
											sdram_choose_cmd_grant <= 3'd6;
										end
									end
								end
							end
						end
					end
				end
			end
		endcase
	end
	if (sdram_choose_req_ce) begin
		case (sdram_choose_req_grant)
			1'd0: begin
				if (sdram_choose_req_request[1]) begin
					sdram_choose_req_grant <= 1'd1;
				end else begin
					if (sdram_choose_req_request[2]) begin
						sdram_choose_req_grant <= 2'd2;
					end else begin
						if (sdram_choose_req_request[3]) begin
							sdram_choose_req_grant <= 2'd3;
						end else begin
							if (sdram_choose_req_request[4]) begin
								sdram_choose_req_grant <= 3'd4;
							end else begin
								if (sdram_choose_req_request[5]) begin
									sdram_choose_req_grant <= 3'd5;
								end else begin
									if (sdram_choose_req_request[6]) begin
										sdram_choose_req_grant <= 3'd6;
									end else begin
										if (sdram_choose_req_request[7]) begin
											sdram_choose_req_grant <= 3'd7;
										end
									end
								end
							end
						end
					end
				end
			end
			1'd1: begin
				if (sdram_choose_req_request[2]) begin
					sdram_choose_req_grant <= 2'd2;
				end else begin
					if (sdram_choose_req_request[3]) begin
						sdram_choose_req_grant <= 2'd3;
					end else begin
						if (sdram_choose_req_request[4]) begin
							sdram_choose_req_grant <= 3'd4;
						end else begin
							if (sdram_choose_req_request[5]) begin
								sdram_choose_req_grant <= 3'd5;
							end else begin
								if (sdram_choose_req_request[6]) begin
									sdram_choose_req_grant <= 3'd6;
								end else begin
									if (sdram_choose_req_request[7]) begin
										sdram_choose_req_grant <= 3'd7;
									end else begin
										if (sdram_choose_req_request[0]) begin
											sdram_choose_req_grant <= 1'd0;
										end
									end
								end
							end
						end
					end
				end
			end
			2'd2: begin
				if (sdram_choose_req_request[3]) begin
					sdram_choose_req_grant <= 2'd3;
				end else begin
					if (sdram_choose_req_request[4]) begin
						sdram_choose_req_grant <= 3'd4;
					end else begin
						if (sdram_choose_req_request[5]) begin
							sdram_choose_req_grant <= 3'd5;
						end else begin
							if (sdram_choose_req_request[6]) begin
								sdram_choose_req_grant <= 3'd6;
							end else begin
								if (sdram_choose_req_request[7]) begin
									sdram_choose_req_grant <= 3'd7;
								end else begin
									if (sdram_choose_req_request[0]) begin
										sdram_choose_req_grant <= 1'd0;
									end else begin
										if (sdram_choose_req_request[1]) begin
											sdram_choose_req_grant <= 1'd1;
										end
									end
								end
							end
						end
					end
				end
			end
			2'd3: begin
				if (sdram_choose_req_request[4]) begin
					sdram_choose_req_grant <= 3'd4;
				end else begin
					if (sdram_choose_req_request[5]) begin
						sdram_choose_req_grant <= 3'd5;
					end else begin
						if (sdram_choose_req_request[6]) begin
							sdram_choose_req_grant <= 3'd6;
						end else begin
							if (sdram_choose_req_request[7]) begin
								sdram_choose_req_grant <= 3'd7;
							end else begin
								if (sdram_choose_req_request[0]) begin
									sdram_choose_req_grant <= 1'd0;
								end else begin
									if (sdram_choose_req_request[1]) begin
										sdram_choose_req_grant <= 1'd1;
									end else begin
										if (sdram_choose_req_request[2]) begin
											sdram_choose_req_grant <= 2'd2;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd4: begin
				if (sdram_choose_req_request[5]) begin
					sdram_choose_req_grant <= 3'd5;
				end else begin
					if (sdram_choose_req_request[6]) begin
						sdram_choose_req_grant <= 3'd6;
					end else begin
						if (sdram_choose_req_request[7]) begin
							sdram_choose_req_grant <= 3'd7;
						end else begin
							if (sdram_choose_req_request[0]) begin
								sdram_choose_req_grant <= 1'd0;
							end else begin
								if (sdram_choose_req_request[1]) begin
									sdram_choose_req_grant <= 1'd1;
								end else begin
									if (sdram_choose_req_request[2]) begin
										sdram_choose_req_grant <= 2'd2;
									end else begin
										if (sdram_choose_req_request[3]) begin
											sdram_choose_req_grant <= 2'd3;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd5: begin
				if (sdram_choose_req_request[6]) begin
					sdram_choose_req_grant <= 3'd6;
				end else begin
					if (sdram_choose_req_request[7]) begin
						sdram_choose_req_grant <= 3'd7;
					end else begin
						if (sdram_choose_req_request[0]) begin
							sdram_choose_req_grant <= 1'd0;
						end else begin
							if (sdram_choose_req_request[1]) begin
								sdram_choose_req_grant <= 1'd1;
							end else begin
								if (sdram_choose_req_request[2]) begin
									sdram_choose_req_grant <= 2'd2;
								end else begin
									if (sdram_choose_req_request[3]) begin
										sdram_choose_req_grant <= 2'd3;
									end else begin
										if (sdram_choose_req_request[4]) begin
											sdram_choose_req_grant <= 3'd4;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd6: begin
				if (sdram_choose_req_request[7]) begin
					sdram_choose_req_grant <= 3'd7;
				end else begin
					if (sdram_choose_req_request[0]) begin
						sdram_choose_req_grant <= 1'd0;
					end else begin
						if (sdram_choose_req_request[1]) begin
							sdram_choose_req_grant <= 1'd1;
						end else begin
							if (sdram_choose_req_request[2]) begin
								sdram_choose_req_grant <= 2'd2;
							end else begin
								if (sdram_choose_req_request[3]) begin
									sdram_choose_req_grant <= 2'd3;
								end else begin
									if (sdram_choose_req_request[4]) begin
										sdram_choose_req_grant <= 3'd4;
									end else begin
										if (sdram_choose_req_request[5]) begin
											sdram_choose_req_grant <= 3'd5;
										end
									end
								end
							end
						end
					end
				end
			end
			3'd7: begin
				if (sdram_choose_req_request[0]) begin
					sdram_choose_req_grant <= 1'd0;
				end else begin
					if (sdram_choose_req_request[1]) begin
						sdram_choose_req_grant <= 1'd1;
					end else begin
						if (sdram_choose_req_request[2]) begin
							sdram_choose_req_grant <= 2'd2;
						end else begin
							if (sdram_choose_req_request[3]) begin
								sdram_choose_req_grant <= 2'd3;
							end else begin
								if (sdram_choose_req_request[4]) begin
									sdram_choose_req_grant <= 3'd4;
								end else begin
									if (sdram_choose_req_request[5]) begin
										sdram_choose_req_grant <= 3'd5;
									end else begin
										if (sdram_choose_req_request[6]) begin
											sdram_choose_req_grant <= 3'd6;
										end
									end
								end
							end
						end
					end
				end
			end
		endcase
	end
	sdram_dfi_p0_cs_n <= 1'd0;
	sdram_dfi_p0_bank <= array_muxed0;
	sdram_dfi_p0_address <= array_muxed1;
	sdram_dfi_p0_cas_n <= (~array_muxed2);
	sdram_dfi_p0_ras_n <= (~array_muxed3);
	sdram_dfi_p0_we_n <= (~array_muxed4);
	sdram_dfi_p0_rddata_en <= array_muxed5;
	sdram_dfi_p0_wrdata_en <= array_muxed6;
	sdram_dfi_p1_cs_n <= 1'd0;
	sdram_dfi_p1_bank <= array_muxed7;
	sdram_dfi_p1_address <= array_muxed8;
	sdram_dfi_p1_cas_n <= (~array_muxed9);
	sdram_dfi_p1_ras_n <= (~array_muxed10);
	sdram_dfi_p1_we_n <= (~array_muxed11);
	sdram_dfi_p1_rddata_en <= array_muxed12;
	sdram_dfi_p1_wrdata_en <= array_muxed13;
	if (sdram_tccdcon_valid) begin
		sdram_tccdcon_count <= 1'd0;
		if (1'd1) begin
			sdram_tccdcon_ready <= 1'd1;
		end else begin
			sdram_tccdcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_tccdcon_ready)) begin
			sdram_tccdcon_count <= (sdram_tccdcon_count - 1'd1);
			if ((sdram_tccdcon_count == 1'd1)) begin
				sdram_tccdcon_ready <= 1'd1;
			end
		end
	end
	if (sdram_twtrcon_valid) begin
		sdram_twtrcon_count <= 2'd3;
		if (1'd0) begin
			sdram_twtrcon_ready <= 1'd1;
		end else begin
			sdram_twtrcon_ready <= 1'd0;
		end
	end else begin
		if ((~sdram_twtrcon_ready)) begin
			sdram_twtrcon_count <= (sdram_twtrcon_count - 1'd1);
			if ((sdram_twtrcon_count == 1'd1)) begin
				sdram_twtrcon_ready <= 1'd1;
			end
		end
	end
	subfragments_multiplexer_state <= subfragments_multiplexer_next_state;
	subfragments_new_master_wdata_ready0 <= ((((((((1'd0 | ((subfragments_roundrobin0_grant == 1'd0) & sdram_interface_bank0_wdata_ready)) | ((subfragments_roundrobin1_grant == 1'd0) & sdram_interface_bank1_wdata_ready)) | ((subfragments_roundrobin2_grant == 1'd0) & sdram_interface_bank2_wdata_ready)) | ((subfragments_roundrobin3_grant == 1'd0) & sdram_interface_bank3_wdata_ready)) | ((subfragments_roundrobin4_grant == 1'd0) & sdram_interface_bank4_wdata_ready)) | ((subfragments_roundrobin5_grant == 1'd0) & sdram_interface_bank5_wdata_ready)) | ((subfragments_roundrobin6_grant == 1'd0) & sdram_interface_bank6_wdata_ready)) | ((subfragments_roundrobin7_grant == 1'd0) & sdram_interface_bank7_wdata_ready));
	subfragments_new_master_wdata_ready1 <= ((((((((1'd0 | ((subfragments_roundrobin0_grant == 1'd1) & sdram_interface_bank0_wdata_ready)) | ((subfragments_roundrobin1_grant == 1'd1) & sdram_interface_bank1_wdata_ready)) | ((subfragments_roundrobin2_grant == 1'd1) & sdram_interface_bank2_wdata_ready)) | ((subfragments_roundrobin3_grant == 1'd1) & sdram_interface_bank3_wdata_ready)) | ((subfragments_roundrobin4_grant == 1'd1) & sdram_interface_bank4_wdata_ready)) | ((subfragments_roundrobin5_grant == 1'd1) & sdram_interface_bank5_wdata_ready)) | ((subfragments_roundrobin6_grant == 1'd1) & sdram_interface_bank6_wdata_ready)) | ((subfragments_roundrobin7_grant == 1'd1) & sdram_interface_bank7_wdata_ready));
	subfragments_new_master_rdata_valid0 <= ((((((((1'd0 | ((subfragments_roundrobin0_grant == 1'd0) & sdram_interface_bank0_rdata_valid)) | ((subfragments_roundrobin1_grant == 1'd0) & sdram_interface_bank1_rdata_valid)) | ((subfragments_roundrobin2_grant == 1'd0) & sdram_interface_bank2_rdata_valid)) | ((subfragments_roundrobin3_grant == 1'd0) & sdram_interface_bank3_rdata_valid)) | ((subfragments_roundrobin4_grant == 1'd0) & sdram_interface_bank4_rdata_valid)) | ((subfragments_roundrobin5_grant == 1'd0) & sdram_interface_bank5_rdata_valid)) | ((subfragments_roundrobin6_grant == 1'd0) & sdram_interface_bank6_rdata_valid)) | ((subfragments_roundrobin7_grant == 1'd0) & sdram_interface_bank7_rdata_valid));
	subfragments_new_master_rdata_valid1 <= subfragments_new_master_rdata_valid0;
	subfragments_new_master_rdata_valid2 <= subfragments_new_master_rdata_valid1;
	subfragments_new_master_rdata_valid3 <= subfragments_new_master_rdata_valid2;
	subfragments_new_master_rdata_valid4 <= subfragments_new_master_rdata_valid3;
	subfragments_new_master_rdata_valid5 <= subfragments_new_master_rdata_valid4;
	subfragments_new_master_rdata_valid6 <= subfragments_new_master_rdata_valid5;
	subfragments_new_master_rdata_valid7 <= subfragments_new_master_rdata_valid6;
	subfragments_new_master_rdata_valid8 <= subfragments_new_master_rdata_valid7;
	subfragments_new_master_rdata_valid9 <= ((((((((1'd0 | ((subfragments_roundrobin0_grant == 1'd1) & sdram_interface_bank0_rdata_valid)) | ((subfragments_roundrobin1_grant == 1'd1) & sdram_interface_bank1_rdata_valid)) | ((subfragments_roundrobin2_grant == 1'd1) & sdram_interface_bank2_rdata_valid)) | ((subfragments_roundrobin3_grant == 1'd1) & sdram_interface_bank3_rdata_valid)) | ((subfragments_roundrobin4_grant == 1'd1) & sdram_interface_bank4_rdata_valid)) | ((subfragments_roundrobin5_grant == 1'd1) & sdram_interface_bank5_rdata_valid)) | ((subfragments_roundrobin6_grant == 1'd1) & sdram_interface_bank6_rdata_valid)) | ((subfragments_roundrobin7_grant == 1'd1) & sdram_interface_bank7_rdata_valid));
	subfragments_new_master_rdata_valid10 <= subfragments_new_master_rdata_valid9;
	subfragments_new_master_rdata_valid11 <= subfragments_new_master_rdata_valid10;
	subfragments_new_master_rdata_valid12 <= subfragments_new_master_rdata_valid11;
	subfragments_new_master_rdata_valid13 <= subfragments_new_master_rdata_valid12;
	subfragments_new_master_rdata_valid14 <= subfragments_new_master_rdata_valid13;
	subfragments_new_master_rdata_valid15 <= subfragments_new_master_rdata_valid14;
	subfragments_new_master_rdata_valid16 <= subfragments_new_master_rdata_valid15;
	subfragments_new_master_rdata_valid17 <= subfragments_new_master_rdata_valid16;
	if (subfragments_roundrobin0_ce) begin
		case (subfragments_roundrobin0_grant)
			1'd0: begin
				if (subfragments_roundrobin0_request[1]) begin
					subfragments_roundrobin0_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin0_request[0]) begin
					subfragments_roundrobin0_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin1_ce) begin
		case (subfragments_roundrobin1_grant)
			1'd0: begin
				if (subfragments_roundrobin1_request[1]) begin
					subfragments_roundrobin1_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin1_request[0]) begin
					subfragments_roundrobin1_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin2_ce) begin
		case (subfragments_roundrobin2_grant)
			1'd0: begin
				if (subfragments_roundrobin2_request[1]) begin
					subfragments_roundrobin2_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin2_request[0]) begin
					subfragments_roundrobin2_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin3_ce) begin
		case (subfragments_roundrobin3_grant)
			1'd0: begin
				if (subfragments_roundrobin3_request[1]) begin
					subfragments_roundrobin3_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin3_request[0]) begin
					subfragments_roundrobin3_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin4_ce) begin
		case (subfragments_roundrobin4_grant)
			1'd0: begin
				if (subfragments_roundrobin4_request[1]) begin
					subfragments_roundrobin4_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin4_request[0]) begin
					subfragments_roundrobin4_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin5_ce) begin
		case (subfragments_roundrobin5_grant)
			1'd0: begin
				if (subfragments_roundrobin5_request[1]) begin
					subfragments_roundrobin5_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin5_request[0]) begin
					subfragments_roundrobin5_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin6_ce) begin
		case (subfragments_roundrobin6_grant)
			1'd0: begin
				if (subfragments_roundrobin6_request[1]) begin
					subfragments_roundrobin6_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin6_request[0]) begin
					subfragments_roundrobin6_grant <= 1'd0;
				end
			end
		endcase
	end
	if (subfragments_roundrobin7_ce) begin
		case (subfragments_roundrobin7_grant)
			1'd0: begin
				if (subfragments_roundrobin7_request[1]) begin
					subfragments_roundrobin7_grant <= 1'd1;
				end
			end
			1'd1: begin
				if (subfragments_roundrobin7_request[0]) begin
					subfragments_roundrobin7_grant <= 1'd0;
				end
			end
		endcase
	end
	adr_offset_r <= wb_sdram_adr[0];
	subfragments_state <= subfragments_next_state;
	if (interface_ack) begin
		cmd_consumed <= 1'd0;
		wdata_consumed <= 1'd0;
	end else begin
		if ((port_cmd_valid & port_cmd_ready)) begin
			cmd_consumed <= 1'd1;
		end
		if ((port_wdata_valid & port_wdata_ready)) begin
			wdata_consumed <= 1'd1;
		end
	end
	if (((~write_aw_buffer_source_valid) | write_aw_buffer_source_ready)) begin
		write_aw_buffer_source_valid <= write_aw_buffer_sink_valid;
		write_aw_buffer_source_first <= write_aw_buffer_sink_first;
		write_aw_buffer_source_last <= write_aw_buffer_sink_last;
		write_aw_buffer_source_payload_addr <= write_aw_buffer_sink_payload_addr;
		write_aw_buffer_source_payload_burst <= write_aw_buffer_sink_payload_burst;
		write_aw_buffer_source_payload_len <= write_aw_buffer_sink_payload_len;
		write_aw_buffer_source_payload_size <= write_aw_buffer_sink_payload_size;
		write_aw_buffer_source_payload_lock <= write_aw_buffer_sink_payload_lock;
		write_aw_buffer_source_payload_prot <= write_aw_buffer_sink_payload_prot;
		write_aw_buffer_source_payload_cache <= write_aw_buffer_sink_payload_cache;
		write_aw_buffer_source_payload_qos <= write_aw_buffer_sink_payload_qos;
		write_aw_buffer_source_payload_id <= write_aw_buffer_sink_payload_id;
	end
	if ((write_aw_valid & write_aw_ready)) begin
		if (write_aw_last) begin
			write_beat_count <= 1'd0;
			write_beat_offset <= 1'd0;
		end else begin
			write_beat_count <= (write_beat_count + 1'd1);
			if ((((write_aw_buffer_source_payload_burst == 1'd1) & 1'd1) | ((write_aw_buffer_source_payload_burst == 2'd2) & 1'd1))) begin
				write_beat_offset <= (write_beat_offset + write_beat_size);
			end
		end
		if (((write_aw_buffer_source_payload_burst == 2'd2) & 1'd1)) begin
			if ((write_beat_offset == write_beat_wrap)) begin
				write_beat_offset <= 1'd0;
			end
		end
	end
	if (write_w_buffer_syncfifo_re) begin
		write_w_buffer_readable <= 1'd1;
	end else begin
		if (write_w_buffer_re) begin
			write_w_buffer_readable <= 1'd0;
		end
	end
	if (((write_w_buffer_syncfifo_we & write_w_buffer_syncfifo_writable) & (~write_w_buffer_replace))) begin
		write_w_buffer_produce <= (write_w_buffer_produce + 1'd1);
	end
	if (write_w_buffer_do_read) begin
		write_w_buffer_consume <= (write_w_buffer_consume + 1'd1);
	end
	if (((write_w_buffer_syncfifo_we & write_w_buffer_syncfifo_writable) & (~write_w_buffer_replace))) begin
		if ((~write_w_buffer_do_read)) begin
			write_w_buffer_level0 <= (write_w_buffer_level0 + 1'd1);
		end
	end else begin
		if (write_w_buffer_do_read) begin
			write_w_buffer_level0 <= (write_w_buffer_level0 - 1'd1);
		end
	end
	if (((write_id_buffer_syncfifo_we & write_id_buffer_syncfifo_writable) & (~write_id_buffer_replace))) begin
		write_id_buffer_produce <= (write_id_buffer_produce + 1'd1);
	end
	if (write_id_buffer_do_read) begin
		write_id_buffer_consume <= (write_id_buffer_consume + 1'd1);
	end
	if (((write_id_buffer_syncfifo_we & write_id_buffer_syncfifo_writable) & (~write_id_buffer_replace))) begin
		if ((~write_id_buffer_do_read)) begin
			write_id_buffer_level <= (write_id_buffer_level + 1'd1);
		end
	end else begin
		if (write_id_buffer_do_read) begin
			write_id_buffer_level <= (write_id_buffer_level - 1'd1);
		end
	end
	if (((write_resp_buffer_syncfifo_we & write_resp_buffer_syncfifo_writable) & (~write_resp_buffer_replace))) begin
		write_resp_buffer_produce <= (write_resp_buffer_produce + 1'd1);
	end
	if (write_resp_buffer_do_read) begin
		write_resp_buffer_consume <= (write_resp_buffer_consume + 1'd1);
	end
	if (((write_resp_buffer_syncfifo_we & write_resp_buffer_syncfifo_writable) & (~write_resp_buffer_replace))) begin
		if ((~write_resp_buffer_do_read)) begin
			write_resp_buffer_level <= (write_resp_buffer_level + 1'd1);
		end
	end else begin
		if (write_resp_buffer_do_read) begin
			write_resp_buffer_level <= (write_resp_buffer_level - 1'd1);
		end
	end
	if (read_r_buffer_queue) begin
		if ((~read_r_buffer_dequeue)) begin
			read_r_buffer_level2 <= (read_r_buffer_level2 + 1'd1);
		end
	end else begin
		if (read_r_buffer_dequeue) begin
			read_r_buffer_level2 <= (read_r_buffer_level2 - 1'd1);
		end
	end
	if (((~read_ar_buffer_source_valid) | read_ar_buffer_source_ready)) begin
		read_ar_buffer_source_valid <= read_ar_buffer_sink_valid;
		read_ar_buffer_source_first <= read_ar_buffer_sink_first;
		read_ar_buffer_source_last <= read_ar_buffer_sink_last;
		read_ar_buffer_source_payload_addr <= read_ar_buffer_sink_payload_addr;
		read_ar_buffer_source_payload_burst <= read_ar_buffer_sink_payload_burst;
		read_ar_buffer_source_payload_len <= read_ar_buffer_sink_payload_len;
		read_ar_buffer_source_payload_size <= read_ar_buffer_sink_payload_size;
		read_ar_buffer_source_payload_lock <= read_ar_buffer_sink_payload_lock;
		read_ar_buffer_source_payload_prot <= read_ar_buffer_sink_payload_prot;
		read_ar_buffer_source_payload_cache <= read_ar_buffer_sink_payload_cache;
		read_ar_buffer_source_payload_qos <= read_ar_buffer_sink_payload_qos;
		read_ar_buffer_source_payload_id <= read_ar_buffer_sink_payload_id;
	end
	if ((read_ar_valid & read_ar_ready)) begin
		if (read_ar_last) begin
			read_beat_count <= 1'd0;
			read_beat_offset <= 1'd0;
		end else begin
			read_beat_count <= (read_beat_count + 1'd1);
			if ((((read_ar_buffer_source_payload_burst == 1'd1) & 1'd1) | ((read_ar_buffer_source_payload_burst == 2'd2) & 1'd1))) begin
				read_beat_offset <= (read_beat_offset + read_beat_size);
			end
		end
		if (((read_ar_buffer_source_payload_burst == 2'd2) & 1'd1)) begin
			if ((read_beat_offset == read_beat_wrap)) begin
				read_beat_offset <= 1'd0;
			end
		end
	end
	if (read_r_buffer_syncfifo_re) begin
		read_r_buffer_readable <= 1'd1;
	end else begin
		if (read_r_buffer_re) begin
			read_r_buffer_readable <= 1'd0;
		end
	end
	if (((read_r_buffer_syncfifo_we & read_r_buffer_syncfifo_writable) & (~read_r_buffer_replace))) begin
		read_r_buffer_produce <= (read_r_buffer_produce + 1'd1);
	end
	if (read_r_buffer_do_read) begin
		read_r_buffer_consume <= (read_r_buffer_consume + 1'd1);
	end
	if (((read_r_buffer_syncfifo_we & read_r_buffer_syncfifo_writable) & (~read_r_buffer_replace))) begin
		if ((~read_r_buffer_do_read)) begin
			read_r_buffer_level0 <= (read_r_buffer_level0 + 1'd1);
		end
	end else begin
		if (read_r_buffer_do_read) begin
			read_r_buffer_level0 <= (read_r_buffer_level0 - 1'd1);
		end
	end
	if (((read_id_buffer_syncfifo_we & read_id_buffer_syncfifo_writable) & (~read_id_buffer_replace))) begin
		read_id_buffer_produce <= (read_id_buffer_produce + 1'd1);
	end
	if (read_id_buffer_do_read) begin
		read_id_buffer_consume <= (read_id_buffer_consume + 1'd1);
	end
	if (((read_id_buffer_syncfifo_we & read_id_buffer_syncfifo_writable) & (~read_id_buffer_replace))) begin
		if ((~read_id_buffer_do_read)) begin
			read_id_buffer_level <= (read_id_buffer_level + 1'd1);
		end
	end else begin
		if (read_id_buffer_do_read) begin
			read_id_buffer_level <= (read_id_buffer_level - 1'd1);
		end
	end
	if (ce) begin
		case (grant)
			1'd0: begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
			1'd1: begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		endcase
	end
	litedramcore_state <= litedramcore_next_state;
	if (litedramcore_litedramcore_dat_w_next_value_ce0) begin
		litedramcore_litedramcore_dat_w <= litedramcore_litedramcore_dat_w_next_value0;
	end
	if (litedramcore_litedramcore_adr_next_value_ce1) begin
		litedramcore_litedramcore_adr <= litedramcore_litedramcore_adr_next_value1;
	end
	if (litedramcore_litedramcore_we_next_value_ce2) begin
		litedramcore_litedramcore_we <= litedramcore_litedramcore_we_next_value2;
	end
	case (litedramcore_grant)
		1'd0: begin
			if ((~litedramcore_request[0])) begin
				if (litedramcore_request[1]) begin
					litedramcore_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~litedramcore_request[1])) begin
				if (litedramcore_request[0]) begin
					litedramcore_grant <= 1'd0;
				end
			end
		end
	endcase
	litedramcore_slave_sel_r <= litedramcore_slave_sel;
	if (litedramcore_wait) begin
		if ((~litedramcore_done)) begin
			litedramcore_count <= (litedramcore_count - 1'd1);
		end
	end else begin
		litedramcore_count <= 20'd1000000;
	end
	litedramcore_interface0_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank0_sel) begin
		case (litedramcore_interface0_bank_bus_adr[3:0])
			1'd0: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_reset0_w;
			end
			1'd1: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_scratch3_w;
			end
			2'd2: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_scratch2_w;
			end
			2'd3: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_scratch1_w;
			end
			3'd4: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_scratch0_w;
			end
			3'd5: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_bus_errors3_w;
			end
			3'd6: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_bus_errors2_w;
			end
			3'd7: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_bus_errors1_w;
			end
			4'd8: begin
				litedramcore_interface0_bank_bus_dat_r <= litedramcore_csrbank0_bus_errors0_w;
			end
		endcase
	end
	if (litedramcore_csrbank0_reset0_re) begin
		soccontroller_reset_storage <= litedramcore_csrbank0_reset0_r;
	end
	soccontroller_reset_re <= litedramcore_csrbank0_reset0_re;
	if (litedramcore_csrbank0_scratch3_re) begin
		soccontroller_scratch_storage[31:24] <= litedramcore_csrbank0_scratch3_r;
	end
	if (litedramcore_csrbank0_scratch2_re) begin
		soccontroller_scratch_storage[23:16] <= litedramcore_csrbank0_scratch2_r;
	end
	if (litedramcore_csrbank0_scratch1_re) begin
		soccontroller_scratch_storage[15:8] <= litedramcore_csrbank0_scratch1_r;
	end
	if (litedramcore_csrbank0_scratch0_re) begin
		soccontroller_scratch_storage[7:0] <= litedramcore_csrbank0_scratch0_r;
	end
	soccontroller_scratch_re <= litedramcore_csrbank0_scratch0_re;
	soccontroller_bus_errors_re <= litedramcore_csrbank0_bus_errors0_re;
	litedramcore_interface1_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank1_sel) begin
		case (litedramcore_interface1_bank_bus_adr[0])
			1'd0: begin
				litedramcore_interface1_bank_bus_dat_r <= litedramcore_csrbank1_init_done0_w;
			end
			1'd1: begin
				litedramcore_interface1_bank_bus_dat_r <= litedramcore_csrbank1_init_error0_w;
			end
		endcase
	end
	if (litedramcore_csrbank1_init_done0_re) begin
		init_done_storage <= litedramcore_csrbank1_init_done0_r;
	end
	init_done_re <= litedramcore_csrbank1_init_done0_re;
	if (litedramcore_csrbank1_init_error0_re) begin
		init_error_storage <= litedramcore_csrbank1_init_error0_r;
	end
	init_error_re <= litedramcore_csrbank1_init_error0_re;
	litedramcore_interface2_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank2_sel) begin
		case (litedramcore_interface2_bank_bus_adr[3:0])
			1'd0: begin
				litedramcore_interface2_bank_bus_dat_r <= litedramcore_csrbank2_rst0_w;
			end
			1'd1: begin
				litedramcore_interface2_bank_bus_dat_r <= litedramcore_csrbank2_half_sys8x_taps0_w;
			end
			2'd2: begin
				litedramcore_interface2_bank_bus_dat_r <= litedramcore_csrbank2_wlevel_en0_w;
			end
			2'd3: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_wlevel_strobe_w;
			end
			3'd4: begin
				litedramcore_interface2_bank_bus_dat_r <= litedramcore_csrbank2_dly_sel0_w;
			end
			3'd5: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_rdly_dq_rst_w;
			end
			3'd6: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_rdly_dq_inc_w;
			end
			3'd7: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_rdly_dq_bitslip_rst_w;
			end
			4'd8: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_rdly_dq_bitslip_w;
			end
			4'd9: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_wdly_dq_bitslip_rst_w;
			end
			4'd10: begin
				litedramcore_interface2_bank_bus_dat_r <= a7ddrphy_wdly_dq_bitslip_w;
			end
			4'd11: begin
				litedramcore_interface2_bank_bus_dat_r <= litedramcore_csrbank2_rdphase0_w;
			end
			4'd12: begin
				litedramcore_interface2_bank_bus_dat_r <= litedramcore_csrbank2_wrphase0_w;
			end
		endcase
	end
	if (litedramcore_csrbank2_rst0_re) begin
		a7ddrphy_rst_storage <= litedramcore_csrbank2_rst0_r;
	end
	a7ddrphy_rst_re <= litedramcore_csrbank2_rst0_re;
	if (litedramcore_csrbank2_half_sys8x_taps0_re) begin
		a7ddrphy_half_sys8x_taps_storage[4:0] <= litedramcore_csrbank2_half_sys8x_taps0_r;
	end
	a7ddrphy_half_sys8x_taps_re <= litedramcore_csrbank2_half_sys8x_taps0_re;
	if (litedramcore_csrbank2_wlevel_en0_re) begin
		a7ddrphy_wlevel_en_storage <= litedramcore_csrbank2_wlevel_en0_r;
	end
	a7ddrphy_wlevel_en_re <= litedramcore_csrbank2_wlevel_en0_re;
	if (litedramcore_csrbank2_dly_sel0_re) begin
		a7ddrphy_dly_sel_storage[1:0] <= litedramcore_csrbank2_dly_sel0_r;
	end
	a7ddrphy_dly_sel_re <= litedramcore_csrbank2_dly_sel0_re;
	if (litedramcore_csrbank2_rdphase0_re) begin
		a7ddrphy_rdphase_storage <= litedramcore_csrbank2_rdphase0_r;
	end
	a7ddrphy_rdphase_re <= litedramcore_csrbank2_rdphase0_re;
	if (litedramcore_csrbank2_wrphase0_re) begin
		a7ddrphy_wrphase_storage <= litedramcore_csrbank2_wrphase0_r;
	end
	a7ddrphy_wrphase_re <= litedramcore_csrbank2_wrphase0_re;
	litedramcore_interface3_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank3_sel) begin
		case (litedramcore_interface3_bank_bus_adr[4:0])
			1'd0: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_control0_w;
			end
			1'd1: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_command0_w;
			end
			2'd2: begin
				litedramcore_interface3_bank_bus_dat_r <= sdram_phaseinjector0_command_issue_w;
			end
			2'd3: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_address1_w;
			end
			3'd4: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_address0_w;
			end
			3'd5: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_baddress0_w;
			end
			3'd6: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_wrdata3_w;
			end
			3'd7: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_wrdata2_w;
			end
			4'd8: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_wrdata1_w;
			end
			4'd9: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_wrdata0_w;
			end
			4'd10: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_rddata3_w;
			end
			4'd11: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_rddata2_w;
			end
			4'd12: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_rddata1_w;
			end
			4'd13: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi0_rddata0_w;
			end
			4'd14: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_command0_w;
			end
			4'd15: begin
				litedramcore_interface3_bank_bus_dat_r <= sdram_phaseinjector1_command_issue_w;
			end
			5'd16: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_address1_w;
			end
			5'd17: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_address0_w;
			end
			5'd18: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_baddress0_w;
			end
			5'd19: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_wrdata3_w;
			end
			5'd20: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_wrdata2_w;
			end
			5'd21: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_wrdata1_w;
			end
			5'd22: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_wrdata0_w;
			end
			5'd23: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_rddata3_w;
			end
			5'd24: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_rddata2_w;
			end
			5'd25: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_rddata1_w;
			end
			5'd26: begin
				litedramcore_interface3_bank_bus_dat_r <= litedramcore_csrbank3_dfii_pi1_rddata0_w;
			end
		endcase
	end
	if (litedramcore_csrbank3_dfii_control0_re) begin
		sdram_storage[3:0] <= litedramcore_csrbank3_dfii_control0_r;
	end
	sdram_re <= litedramcore_csrbank3_dfii_control0_re;
	if (litedramcore_csrbank3_dfii_pi0_command0_re) begin
		sdram_phaseinjector0_command_storage[5:0] <= litedramcore_csrbank3_dfii_pi0_command0_r;
	end
	sdram_phaseinjector0_command_re <= litedramcore_csrbank3_dfii_pi0_command0_re;
	if (litedramcore_csrbank3_dfii_pi0_address1_re) begin
		sdram_phaseinjector0_address_storage[12:8] <= litedramcore_csrbank3_dfii_pi0_address1_r;
	end
	if (litedramcore_csrbank3_dfii_pi0_address0_re) begin
		sdram_phaseinjector0_address_storage[7:0] <= litedramcore_csrbank3_dfii_pi0_address0_r;
	end
	sdram_phaseinjector0_address_re <= litedramcore_csrbank3_dfii_pi0_address0_re;
	if (litedramcore_csrbank3_dfii_pi0_baddress0_re) begin
		sdram_phaseinjector0_baddress_storage[2:0] <= litedramcore_csrbank3_dfii_pi0_baddress0_r;
	end
	sdram_phaseinjector0_baddress_re <= litedramcore_csrbank3_dfii_pi0_baddress0_re;
	if (litedramcore_csrbank3_dfii_pi0_wrdata3_re) begin
		sdram_phaseinjector0_wrdata_storage[31:24] <= litedramcore_csrbank3_dfii_pi0_wrdata3_r;
	end
	if (litedramcore_csrbank3_dfii_pi0_wrdata2_re) begin
		sdram_phaseinjector0_wrdata_storage[23:16] <= litedramcore_csrbank3_dfii_pi0_wrdata2_r;
	end
	if (litedramcore_csrbank3_dfii_pi0_wrdata1_re) begin
		sdram_phaseinjector0_wrdata_storage[15:8] <= litedramcore_csrbank3_dfii_pi0_wrdata1_r;
	end
	if (litedramcore_csrbank3_dfii_pi0_wrdata0_re) begin
		sdram_phaseinjector0_wrdata_storage[7:0] <= litedramcore_csrbank3_dfii_pi0_wrdata0_r;
	end
	sdram_phaseinjector0_wrdata_re <= litedramcore_csrbank3_dfii_pi0_wrdata0_re;
	sdram_phaseinjector0_rddata_re <= litedramcore_csrbank3_dfii_pi0_rddata0_re;
	if (litedramcore_csrbank3_dfii_pi1_command0_re) begin
		sdram_phaseinjector1_command_storage[5:0] <= litedramcore_csrbank3_dfii_pi1_command0_r;
	end
	sdram_phaseinjector1_command_re <= litedramcore_csrbank3_dfii_pi1_command0_re;
	if (litedramcore_csrbank3_dfii_pi1_address1_re) begin
		sdram_phaseinjector1_address_storage[12:8] <= litedramcore_csrbank3_dfii_pi1_address1_r;
	end
	if (litedramcore_csrbank3_dfii_pi1_address0_re) begin
		sdram_phaseinjector1_address_storage[7:0] <= litedramcore_csrbank3_dfii_pi1_address0_r;
	end
	sdram_phaseinjector1_address_re <= litedramcore_csrbank3_dfii_pi1_address0_re;
	if (litedramcore_csrbank3_dfii_pi1_baddress0_re) begin
		sdram_phaseinjector1_baddress_storage[2:0] <= litedramcore_csrbank3_dfii_pi1_baddress0_r;
	end
	sdram_phaseinjector1_baddress_re <= litedramcore_csrbank3_dfii_pi1_baddress0_re;
	if (litedramcore_csrbank3_dfii_pi1_wrdata3_re) begin
		sdram_phaseinjector1_wrdata_storage[31:24] <= litedramcore_csrbank3_dfii_pi1_wrdata3_r;
	end
	if (litedramcore_csrbank3_dfii_pi1_wrdata2_re) begin
		sdram_phaseinjector1_wrdata_storage[23:16] <= litedramcore_csrbank3_dfii_pi1_wrdata2_r;
	end
	if (litedramcore_csrbank3_dfii_pi1_wrdata1_re) begin
		sdram_phaseinjector1_wrdata_storage[15:8] <= litedramcore_csrbank3_dfii_pi1_wrdata1_r;
	end
	if (litedramcore_csrbank3_dfii_pi1_wrdata0_re) begin
		sdram_phaseinjector1_wrdata_storage[7:0] <= litedramcore_csrbank3_dfii_pi1_wrdata0_r;
	end
	sdram_phaseinjector1_wrdata_re <= litedramcore_csrbank3_dfii_pi1_wrdata0_re;
	sdram_phaseinjector1_rddata_re <= litedramcore_csrbank3_dfii_pi1_rddata0_re;
	litedramcore_interface4_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank4_sel) begin
		case (litedramcore_interface4_bank_bus_adr[4:0])
			1'd0: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_load3_w;
			end
			1'd1: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_load2_w;
			end
			2'd2: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_load1_w;
			end
			2'd3: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_load0_w;
			end
			3'd4: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_reload3_w;
			end
			3'd5: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_reload2_w;
			end
			3'd6: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_reload1_w;
			end
			3'd7: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_reload0_w;
			end
			4'd8: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_en0_w;
			end
			4'd9: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_update_value0_w;
			end
			4'd10: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_value3_w;
			end
			4'd11: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_value2_w;
			end
			4'd12: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_value1_w;
			end
			4'd13: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_value0_w;
			end
			4'd14: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_ev_status_w;
			end
			4'd15: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_ev_pending_w;
			end
			5'd16: begin
				litedramcore_interface4_bank_bus_dat_r <= litedramcore_csrbank4_ev_enable0_w;
			end
		endcase
	end
	if (litedramcore_csrbank4_load3_re) begin
		timer_load_storage[31:24] <= litedramcore_csrbank4_load3_r;
	end
	if (litedramcore_csrbank4_load2_re) begin
		timer_load_storage[23:16] <= litedramcore_csrbank4_load2_r;
	end
	if (litedramcore_csrbank4_load1_re) begin
		timer_load_storage[15:8] <= litedramcore_csrbank4_load1_r;
	end
	if (litedramcore_csrbank4_load0_re) begin
		timer_load_storage[7:0] <= litedramcore_csrbank4_load0_r;
	end
	timer_load_re <= litedramcore_csrbank4_load0_re;
	if (litedramcore_csrbank4_reload3_re) begin
		timer_reload_storage[31:24] <= litedramcore_csrbank4_reload3_r;
	end
	if (litedramcore_csrbank4_reload2_re) begin
		timer_reload_storage[23:16] <= litedramcore_csrbank4_reload2_r;
	end
	if (litedramcore_csrbank4_reload1_re) begin
		timer_reload_storage[15:8] <= litedramcore_csrbank4_reload1_r;
	end
	if (litedramcore_csrbank4_reload0_re) begin
		timer_reload_storage[7:0] <= litedramcore_csrbank4_reload0_r;
	end
	timer_reload_re <= litedramcore_csrbank4_reload0_re;
	if (litedramcore_csrbank4_en0_re) begin
		timer_en_storage <= litedramcore_csrbank4_en0_r;
	end
	timer_en_re <= litedramcore_csrbank4_en0_re;
	if (litedramcore_csrbank4_update_value0_re) begin
		timer_update_value_storage <= litedramcore_csrbank4_update_value0_r;
	end
	timer_update_value_re <= litedramcore_csrbank4_update_value0_re;
	timer_value_re <= litedramcore_csrbank4_value0_re;
	timer_status_re <= litedramcore_csrbank4_ev_status_re;
	if (litedramcore_csrbank4_ev_pending_re) begin
		timer_pending_r <= litedramcore_csrbank4_ev_pending_r;
	end
	timer_pending_re <= litedramcore_csrbank4_ev_pending_re;
	if (litedramcore_csrbank4_ev_enable0_re) begin
		timer_enable_storage <= litedramcore_csrbank4_ev_enable0_r;
	end
	timer_enable_re <= litedramcore_csrbank4_ev_enable0_re;
	litedramcore_interface5_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank5_sel) begin
		case (litedramcore_interface5_bank_bus_adr[2:0])
			1'd0: begin
				litedramcore_interface5_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_txfull_w;
			end
			2'd2: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_rxempty_w;
			end
			2'd3: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_ev_status_w;
			end
			3'd4: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_ev_pending_w;
			end
			3'd5: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_ev_enable0_w;
			end
			3'd6: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_txempty_w;
			end
			3'd7: begin
				litedramcore_interface5_bank_bus_dat_r <= litedramcore_csrbank5_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= litedramcore_csrbank5_txfull_re;
	uart_rxempty_re <= litedramcore_csrbank5_rxempty_re;
	uart_status_re <= litedramcore_csrbank5_ev_status_re;
	if (litedramcore_csrbank5_ev_pending_re) begin
		uart_pending_r[1:0] <= litedramcore_csrbank5_ev_pending_r;
	end
	uart_pending_re <= litedramcore_csrbank5_ev_pending_re;
	if (litedramcore_csrbank5_ev_enable0_re) begin
		uart_enable_storage[1:0] <= litedramcore_csrbank5_ev_enable0_r;
	end
	uart_enable_re <= litedramcore_csrbank5_ev_enable0_re;
	uart_txempty_re <= litedramcore_csrbank5_txempty_re;
	uart_rxfull_re <= litedramcore_csrbank5_rxfull_re;
	litedramcore_interface6_bank_bus_dat_r <= 1'd0;
	if (litedramcore_csrbank6_sel) begin
		case (litedramcore_interface6_bank_bus_adr[1:0])
			1'd0: begin
				litedramcore_interface6_bank_bus_dat_r <= litedramcore_csrbank6_tuning_word3_w;
			end
			1'd1: begin
				litedramcore_interface6_bank_bus_dat_r <= litedramcore_csrbank6_tuning_word2_w;
			end
			2'd2: begin
				litedramcore_interface6_bank_bus_dat_r <= litedramcore_csrbank6_tuning_word1_w;
			end
			2'd3: begin
				litedramcore_interface6_bank_bus_dat_r <= litedramcore_csrbank6_tuning_word0_w;
			end
		endcase
	end
	if (litedramcore_csrbank6_tuning_word3_re) begin
		uart_phy_storage[31:24] <= litedramcore_csrbank6_tuning_word3_r;
	end
	if (litedramcore_csrbank6_tuning_word2_re) begin
		uart_phy_storage[23:16] <= litedramcore_csrbank6_tuning_word2_r;
	end
	if (litedramcore_csrbank6_tuning_word1_re) begin
		uart_phy_storage[15:8] <= litedramcore_csrbank6_tuning_word1_r;
	end
	if (litedramcore_csrbank6_tuning_word0_re) begin
		uart_phy_storage[7:0] <= litedramcore_csrbank6_tuning_word0_r;
	end
	uart_phy_re <= litedramcore_csrbank6_tuning_word0_re;
	if (sys_rst) begin
		soccontroller_reset_storage <= 1'd0;
		soccontroller_reset_re <= 1'd0;
		soccontroller_scratch_storage <= 32'd305419896;
		soccontroller_scratch_re <= 1'd0;
		soccontroller_bus_errors_re <= 1'd0;
		soccontroller_bus_errors <= 32'd0;
		litedramcore_ram_bus_ack <= 1'd0;
		ram_bus_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		uart_phy_storage <= 32'd4947802;
		uart_phy_re <= 1'd0;
		uart_phy_sink_ready <= 1'd0;
		uart_phy_tx_clken <= 1'd0;
		uart_phy_tx_busy <= 1'd0;
		uart_phy_source_valid <= 1'd0;
		uart_phy_source_payload_data <= 8'd0;
		uart_phy_rx_clken <= 1'd0;
		uart_phy_rx_r <= 1'd0;
		uart_phy_rx_busy <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_old_trigger <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		a7ddrphy_rst_storage <= 1'd0;
		a7ddrphy_rst_re <= 1'd0;
		a7ddrphy_half_sys8x_taps_storage <= 5'd16;
		a7ddrphy_half_sys8x_taps_re <= 1'd0;
		a7ddrphy_wlevel_en_storage <= 1'd0;
		a7ddrphy_wlevel_en_re <= 1'd0;
		a7ddrphy_dly_sel_storage <= 2'd0;
		a7ddrphy_dly_sel_re <= 1'd0;
		a7ddrphy_rdphase_storage <= 1'd1;
		a7ddrphy_rdphase_re <= 1'd0;
		a7ddrphy_wrphase_storage <= 1'd0;
		a7ddrphy_wrphase_re <= 1'd0;
		a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline <= 1'd0;
		a7ddrphy_dqspattern_o1 <= 8'd0;
		a7ddrphy_bitslip0_value0 <= 3'd7;
		a7ddrphy_bitslip1_value0 <= 3'd7;
		a7ddrphy_bitslip0_value1 <= 3'd7;
		a7ddrphy_bitslip1_value1 <= 3'd7;
		a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline <= 1'd0;
		a7ddrphy_bitslip0_value2 <= 3'd7;
		a7ddrphy_bitslip0_value3 <= 3'd7;
		a7ddrphy_bitslip1_value2 <= 3'd7;
		a7ddrphy_bitslip1_value3 <= 3'd7;
		a7ddrphy_bitslip2_value0 <= 3'd7;
		a7ddrphy_bitslip2_value1 <= 3'd7;
		a7ddrphy_bitslip3_value0 <= 3'd7;
		a7ddrphy_bitslip3_value1 <= 3'd7;
		a7ddrphy_bitslip4_value0 <= 3'd7;
		a7ddrphy_bitslip4_value1 <= 3'd7;
		a7ddrphy_bitslip5_value0 <= 3'd7;
		a7ddrphy_bitslip5_value1 <= 3'd7;
		a7ddrphy_bitslip6_value0 <= 3'd7;
		a7ddrphy_bitslip6_value1 <= 3'd7;
		a7ddrphy_bitslip7_value0 <= 3'd7;
		a7ddrphy_bitslip7_value1 <= 3'd7;
		a7ddrphy_bitslip8_value0 <= 3'd7;
		a7ddrphy_bitslip8_value1 <= 3'd7;
		a7ddrphy_bitslip9_value0 <= 3'd7;
		a7ddrphy_bitslip9_value1 <= 3'd7;
		a7ddrphy_bitslip10_value0 <= 3'd7;
		a7ddrphy_bitslip10_value1 <= 3'd7;
		a7ddrphy_bitslip11_value0 <= 3'd7;
		a7ddrphy_bitslip11_value1 <= 3'd7;
		a7ddrphy_bitslip12_value0 <= 3'd7;
		a7ddrphy_bitslip12_value1 <= 3'd7;
		a7ddrphy_bitslip13_value0 <= 3'd7;
		a7ddrphy_bitslip13_value1 <= 3'd7;
		a7ddrphy_bitslip14_value0 <= 3'd7;
		a7ddrphy_bitslip14_value1 <= 3'd7;
		a7ddrphy_bitslip15_value0 <= 3'd7;
		a7ddrphy_bitslip15_value1 <= 3'd7;
		a7ddrphy_rddata_en_tappeddelayline0 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline1 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline2 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline3 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline4 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline5 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline6 <= 1'd0;
		a7ddrphy_rddata_en_tappeddelayline7 <= 1'd0;
		a7ddrphy_wrdata_en_tappeddelayline0 <= 1'd0;
		a7ddrphy_wrdata_en_tappeddelayline1 <= 1'd0;
		sdram_storage <= 4'd1;
		sdram_re <= 1'd0;
		sdram_phaseinjector0_command_storage <= 6'd0;
		sdram_phaseinjector0_command_re <= 1'd0;
		sdram_phaseinjector0_address_re <= 1'd0;
		sdram_phaseinjector0_baddress_re <= 1'd0;
		sdram_phaseinjector0_wrdata_re <= 1'd0;
		sdram_phaseinjector0_rddata_status <= 32'd0;
		sdram_phaseinjector0_rddata_re <= 1'd0;
		sdram_phaseinjector1_command_storage <= 6'd0;
		sdram_phaseinjector1_command_re <= 1'd0;
		sdram_phaseinjector1_address_re <= 1'd0;
		sdram_phaseinjector1_baddress_re <= 1'd0;
		sdram_phaseinjector1_wrdata_re <= 1'd0;
		sdram_phaseinjector1_rddata_status <= 32'd0;
		sdram_phaseinjector1_rddata_re <= 1'd0;
		sdram_dfi_p0_address <= 13'd0;
		sdram_dfi_p0_bank <= 3'd0;
		sdram_dfi_p0_cas_n <= 1'd1;
		sdram_dfi_p0_cs_n <= 1'd1;
		sdram_dfi_p0_ras_n <= 1'd1;
		sdram_dfi_p0_we_n <= 1'd1;
		sdram_dfi_p0_wrdata_en <= 1'd0;
		sdram_dfi_p0_rddata_en <= 1'd0;
		sdram_dfi_p1_address <= 13'd0;
		sdram_dfi_p1_bank <= 3'd0;
		sdram_dfi_p1_cas_n <= 1'd1;
		sdram_dfi_p1_cs_n <= 1'd1;
		sdram_dfi_p1_ras_n <= 1'd1;
		sdram_dfi_p1_we_n <= 1'd1;
		sdram_dfi_p1_wrdata_en <= 1'd0;
		sdram_dfi_p1_rddata_en <= 1'd0;
		sdram_cmd_payload_a <= 13'd0;
		sdram_cmd_payload_ba <= 3'd0;
		sdram_cmd_payload_cas <= 1'd0;
		sdram_cmd_payload_ras <= 1'd0;
		sdram_cmd_payload_we <= 1'd0;
		sdram_timer_count1 <= 10'd781;
		sdram_postponer_req_o <= 1'd0;
		sdram_postponer_count <= 1'd0;
		sdram_sequencer_done1 <= 1'd0;
		sdram_sequencer_counter <= 5'd0;
		sdram_sequencer_count <= 1'd0;
		sdram_bankmachine0_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine0_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine0_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine0_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine0_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine0_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine0_row <= 13'd0;
		sdram_bankmachine0_row_opened <= 1'd0;
		sdram_bankmachine0_twtpcon_ready <= 1'd0;
		sdram_bankmachine0_twtpcon_count <= 2'd0;
		sdram_bankmachine1_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine1_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine1_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine1_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine1_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine1_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine1_row <= 13'd0;
		sdram_bankmachine1_row_opened <= 1'd0;
		sdram_bankmachine1_twtpcon_ready <= 1'd0;
		sdram_bankmachine1_twtpcon_count <= 2'd0;
		sdram_bankmachine2_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine2_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine2_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine2_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine2_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine2_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine2_row <= 13'd0;
		sdram_bankmachine2_row_opened <= 1'd0;
		sdram_bankmachine2_twtpcon_ready <= 1'd0;
		sdram_bankmachine2_twtpcon_count <= 2'd0;
		sdram_bankmachine3_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine3_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine3_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine3_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine3_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine3_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine3_row <= 13'd0;
		sdram_bankmachine3_row_opened <= 1'd0;
		sdram_bankmachine3_twtpcon_ready <= 1'd0;
		sdram_bankmachine3_twtpcon_count <= 2'd0;
		sdram_bankmachine4_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine4_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine4_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine4_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine4_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine4_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine4_row <= 13'd0;
		sdram_bankmachine4_row_opened <= 1'd0;
		sdram_bankmachine4_twtpcon_ready <= 1'd0;
		sdram_bankmachine4_twtpcon_count <= 2'd0;
		sdram_bankmachine5_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine5_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine5_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine5_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine5_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine5_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine5_row <= 13'd0;
		sdram_bankmachine5_row_opened <= 1'd0;
		sdram_bankmachine5_twtpcon_ready <= 1'd0;
		sdram_bankmachine5_twtpcon_count <= 2'd0;
		sdram_bankmachine6_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine6_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine6_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine6_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine6_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine6_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine6_row <= 13'd0;
		sdram_bankmachine6_row_opened <= 1'd0;
		sdram_bankmachine6_twtpcon_ready <= 1'd0;
		sdram_bankmachine6_twtpcon_count <= 2'd0;
		sdram_bankmachine7_cmd_buffer_lookahead_level <= 5'd0;
		sdram_bankmachine7_cmd_buffer_lookahead_produce <= 4'd0;
		sdram_bankmachine7_cmd_buffer_lookahead_consume <= 4'd0;
		sdram_bankmachine7_cmd_buffer_source_valid <= 1'd0;
		sdram_bankmachine7_cmd_buffer_source_payload_we <= 1'd0;
		sdram_bankmachine7_cmd_buffer_source_payload_addr <= 21'd0;
		sdram_bankmachine7_row <= 13'd0;
		sdram_bankmachine7_row_opened <= 1'd0;
		sdram_bankmachine7_twtpcon_ready <= 1'd0;
		sdram_bankmachine7_twtpcon_count <= 2'd0;
		sdram_choose_cmd_grant <= 3'd0;
		sdram_choose_req_grant <= 3'd0;
		sdram_tccdcon_ready <= 1'd0;
		sdram_tccdcon_count <= 1'd0;
		sdram_twtrcon_ready <= 1'd0;
		sdram_twtrcon_count <= 2'd0;
		sdram_time0 <= 5'd0;
		sdram_time1 <= 4'd0;
		cmd_consumed <= 1'd0;
		wdata_consumed <= 1'd0;
		init_done_storage <= 1'd0;
		init_done_re <= 1'd0;
		init_error_storage <= 1'd0;
		init_error_re <= 1'd0;
		write_aw_buffer_source_valid <= 1'd0;
		write_aw_buffer_source_payload_addr <= 27'd0;
		write_aw_buffer_source_payload_burst <= 2'd0;
		write_aw_buffer_source_payload_len <= 8'd0;
		write_aw_buffer_source_payload_size <= 4'd0;
		write_aw_buffer_source_payload_lock <= 2'd0;
		write_aw_buffer_source_payload_prot <= 3'd0;
		write_aw_buffer_source_payload_cache <= 4'd0;
		write_aw_buffer_source_payload_qos <= 4'd0;
		write_aw_buffer_source_payload_id <= 6'd0;
		write_beat_count <= 8'd0;
		write_beat_offset <= 12'd0;
		write_w_buffer_readable <= 1'd0;
		write_w_buffer_level0 <= 5'd0;
		write_w_buffer_produce <= 4'd0;
		write_w_buffer_consume <= 4'd0;
		write_id_buffer_level <= 5'd0;
		write_id_buffer_produce <= 4'd0;
		write_id_buffer_consume <= 4'd0;
		write_resp_buffer_level <= 5'd0;
		write_resp_buffer_produce <= 4'd0;
		write_resp_buffer_consume <= 4'd0;
		read_ar_buffer_source_valid <= 1'd0;
		read_ar_buffer_source_payload_addr <= 27'd0;
		read_ar_buffer_source_payload_burst <= 2'd0;
		read_ar_buffer_source_payload_len <= 8'd0;
		read_ar_buffer_source_payload_size <= 4'd0;
		read_ar_buffer_source_payload_lock <= 2'd0;
		read_ar_buffer_source_payload_prot <= 3'd0;
		read_ar_buffer_source_payload_cache <= 4'd0;
		read_ar_buffer_source_payload_qos <= 4'd0;
		read_ar_buffer_source_payload_id <= 6'd0;
		read_beat_count <= 8'd0;
		read_beat_offset <= 12'd0;
		read_r_buffer_readable <= 1'd0;
		read_r_buffer_level0 <= 5'd0;
		read_r_buffer_produce <= 4'd0;
		read_r_buffer_consume <= 4'd0;
		read_r_buffer_level2 <= 5'd0;
		read_id_buffer_level <= 5'd0;
		read_id_buffer_produce <= 4'd0;
		read_id_buffer_consume <= 4'd0;
		grant <= 1'd0;
		subfragments_refresher_state <= 2'd0;
		subfragments_bankmachine0_state <= 3'd0;
		subfragments_bankmachine1_state <= 3'd0;
		subfragments_bankmachine2_state <= 3'd0;
		subfragments_bankmachine3_state <= 3'd0;
		subfragments_bankmachine4_state <= 3'd0;
		subfragments_bankmachine5_state <= 3'd0;
		subfragments_bankmachine6_state <= 3'd0;
		subfragments_bankmachine7_state <= 3'd0;
		subfragments_multiplexer_state <= 4'd0;
		subfragments_roundrobin0_grant <= 1'd0;
		subfragments_roundrobin1_grant <= 1'd0;
		subfragments_roundrobin2_grant <= 1'd0;
		subfragments_roundrobin3_grant <= 1'd0;
		subfragments_roundrobin4_grant <= 1'd0;
		subfragments_roundrobin5_grant <= 1'd0;
		subfragments_roundrobin6_grant <= 1'd0;
		subfragments_roundrobin7_grant <= 1'd0;
		subfragments_new_master_wdata_ready0 <= 1'd0;
		subfragments_new_master_wdata_ready1 <= 1'd0;
		subfragments_new_master_rdata_valid0 <= 1'd0;
		subfragments_new_master_rdata_valid1 <= 1'd0;
		subfragments_new_master_rdata_valid2 <= 1'd0;
		subfragments_new_master_rdata_valid3 <= 1'd0;
		subfragments_new_master_rdata_valid4 <= 1'd0;
		subfragments_new_master_rdata_valid5 <= 1'd0;
		subfragments_new_master_rdata_valid6 <= 1'd0;
		subfragments_new_master_rdata_valid7 <= 1'd0;
		subfragments_new_master_rdata_valid8 <= 1'd0;
		subfragments_new_master_rdata_valid9 <= 1'd0;
		subfragments_new_master_rdata_valid10 <= 1'd0;
		subfragments_new_master_rdata_valid11 <= 1'd0;
		subfragments_new_master_rdata_valid12 <= 1'd0;
		subfragments_new_master_rdata_valid13 <= 1'd0;
		subfragments_new_master_rdata_valid14 <= 1'd0;
		subfragments_new_master_rdata_valid15 <= 1'd0;
		subfragments_new_master_rdata_valid16 <= 1'd0;
		subfragments_new_master_rdata_valid17 <= 1'd0;
		subfragments_state <= 2'd0;
		litedramcore_litedramcore_we <= 1'd0;
		litedramcore_grant <= 1'd0;
		litedramcore_slave_sel_r <= 4'd0;
		litedramcore_count <= 20'd1000000;
		litedramcore_state <= 2'd0;
	end
	regs0 <= serial_rx;
	regs1 <= regs0;
end

reg [31:0] mem[0:8191];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[litedramcore_adr];
end

assign litedramcore_dat_r = memdat;

initial begin
	$readmemh("litedram_core.init", mem);
end

reg [31:0] mem_1[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (ram_we[0])
		mem_1[ram_adr][7:0] <= ram_dat_w[7:0];
	if (ram_we[1])
		mem_1[ram_adr][15:8] <= ram_dat_w[15:8];
	if (ram_we[2])
		mem_1[ram_adr][23:16] <= ram_dat_w[23:16];
	if (ram_we[3])
		mem_1[ram_adr][31:24] <= ram_dat_w[31:24];
	memadr <= ram_adr;
end

assign ram_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [9:0] storage[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_2 <= storage[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat_1;
assign uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_1[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_4 <= storage_1[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_3;
assign uart_rx_fifo_rdport_dat_r = memdat_4;

BUFG BUFG(
	.I(clkout0),
	.O(clkout_buf0)
);

BUFG BUFG_1(
	.I(clkout1),
	.O(clkout_buf1)
);

BUFG BUFG_2(
	.I(clkout2),
	.O(clkout_buf2)
);

BUFG BUFG_3(
	.I(clkout3),
	.O(clkout_buf3)
);

IDELAYCTRL IDELAYCTRL(
	.REFCLK(iodelay_clk),
	.RST(ic_reset)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(1'd0),
	.D2(1'd1),
	.D3(1'd0),
	.D4(1'd1),
	.D5(1'd0),
	.D6(1'd1),
	.D7(1'd0),
	.D8(1'd1),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(a7ddrphy_sd_clk_se_nodelay)
);

OBUFDS OBUFDS(
	.I(a7ddrphy_sd_clk_se_nodelay),
	.O(ddram_clk_p),
	.OB(ddram_clk_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_1 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[0]),
	.D2(a7ddrphy_dfi_p0_address[0]),
	.D3(a7ddrphy_dfi_p1_address[0]),
	.D4(a7ddrphy_dfi_p1_address[0]),
	.D5(a7ddrphy_dfi_p2_address[0]),
	.D6(a7ddrphy_dfi_p2_address[0]),
	.D7(a7ddrphy_dfi_p3_address[0]),
	.D8(a7ddrphy_dfi_p3_address[0]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_2 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[1]),
	.D2(a7ddrphy_dfi_p0_address[1]),
	.D3(a7ddrphy_dfi_p1_address[1]),
	.D4(a7ddrphy_dfi_p1_address[1]),
	.D5(a7ddrphy_dfi_p2_address[1]),
	.D6(a7ddrphy_dfi_p2_address[1]),
	.D7(a7ddrphy_dfi_p3_address[1]),
	.D8(a7ddrphy_dfi_p3_address[1]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_3 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[2]),
	.D2(a7ddrphy_dfi_p0_address[2]),
	.D3(a7ddrphy_dfi_p1_address[2]),
	.D4(a7ddrphy_dfi_p1_address[2]),
	.D5(a7ddrphy_dfi_p2_address[2]),
	.D6(a7ddrphy_dfi_p2_address[2]),
	.D7(a7ddrphy_dfi_p3_address[2]),
	.D8(a7ddrphy_dfi_p3_address[2]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[2])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_4 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[3]),
	.D2(a7ddrphy_dfi_p0_address[3]),
	.D3(a7ddrphy_dfi_p1_address[3]),
	.D4(a7ddrphy_dfi_p1_address[3]),
	.D5(a7ddrphy_dfi_p2_address[3]),
	.D6(a7ddrphy_dfi_p2_address[3]),
	.D7(a7ddrphy_dfi_p3_address[3]),
	.D8(a7ddrphy_dfi_p3_address[3]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[3])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_5 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[4]),
	.D2(a7ddrphy_dfi_p0_address[4]),
	.D3(a7ddrphy_dfi_p1_address[4]),
	.D4(a7ddrphy_dfi_p1_address[4]),
	.D5(a7ddrphy_dfi_p2_address[4]),
	.D6(a7ddrphy_dfi_p2_address[4]),
	.D7(a7ddrphy_dfi_p3_address[4]),
	.D8(a7ddrphy_dfi_p3_address[4]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[4])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_6 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[5]),
	.D2(a7ddrphy_dfi_p0_address[5]),
	.D3(a7ddrphy_dfi_p1_address[5]),
	.D4(a7ddrphy_dfi_p1_address[5]),
	.D5(a7ddrphy_dfi_p2_address[5]),
	.D6(a7ddrphy_dfi_p2_address[5]),
	.D7(a7ddrphy_dfi_p3_address[5]),
	.D8(a7ddrphy_dfi_p3_address[5]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[5])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_7 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[6]),
	.D2(a7ddrphy_dfi_p0_address[6]),
	.D3(a7ddrphy_dfi_p1_address[6]),
	.D4(a7ddrphy_dfi_p1_address[6]),
	.D5(a7ddrphy_dfi_p2_address[6]),
	.D6(a7ddrphy_dfi_p2_address[6]),
	.D7(a7ddrphy_dfi_p3_address[6]),
	.D8(a7ddrphy_dfi_p3_address[6]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[6])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_8 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[7]),
	.D2(a7ddrphy_dfi_p0_address[7]),
	.D3(a7ddrphy_dfi_p1_address[7]),
	.D4(a7ddrphy_dfi_p1_address[7]),
	.D5(a7ddrphy_dfi_p2_address[7]),
	.D6(a7ddrphy_dfi_p2_address[7]),
	.D7(a7ddrphy_dfi_p3_address[7]),
	.D8(a7ddrphy_dfi_p3_address[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[7])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_9 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[8]),
	.D2(a7ddrphy_dfi_p0_address[8]),
	.D3(a7ddrphy_dfi_p1_address[8]),
	.D4(a7ddrphy_dfi_p1_address[8]),
	.D5(a7ddrphy_dfi_p2_address[8]),
	.D6(a7ddrphy_dfi_p2_address[8]),
	.D7(a7ddrphy_dfi_p3_address[8]),
	.D8(a7ddrphy_dfi_p3_address[8]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[8])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_10 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[9]),
	.D2(a7ddrphy_dfi_p0_address[9]),
	.D3(a7ddrphy_dfi_p1_address[9]),
	.D4(a7ddrphy_dfi_p1_address[9]),
	.D5(a7ddrphy_dfi_p2_address[9]),
	.D6(a7ddrphy_dfi_p2_address[9]),
	.D7(a7ddrphy_dfi_p3_address[9]),
	.D8(a7ddrphy_dfi_p3_address[9]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[9])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_11 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[10]),
	.D2(a7ddrphy_dfi_p0_address[10]),
	.D3(a7ddrphy_dfi_p1_address[10]),
	.D4(a7ddrphy_dfi_p1_address[10]),
	.D5(a7ddrphy_dfi_p2_address[10]),
	.D6(a7ddrphy_dfi_p2_address[10]),
	.D7(a7ddrphy_dfi_p3_address[10]),
	.D8(a7ddrphy_dfi_p3_address[10]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[10])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_12 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[11]),
	.D2(a7ddrphy_dfi_p0_address[11]),
	.D3(a7ddrphy_dfi_p1_address[11]),
	.D4(a7ddrphy_dfi_p1_address[11]),
	.D5(a7ddrphy_dfi_p2_address[11]),
	.D6(a7ddrphy_dfi_p2_address[11]),
	.D7(a7ddrphy_dfi_p3_address[11]),
	.D8(a7ddrphy_dfi_p3_address[11]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[11])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_13 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[12]),
	.D2(a7ddrphy_dfi_p0_address[12]),
	.D3(a7ddrphy_dfi_p1_address[12]),
	.D4(a7ddrphy_dfi_p1_address[12]),
	.D5(a7ddrphy_dfi_p2_address[12]),
	.D6(a7ddrphy_dfi_p2_address[12]),
	.D7(a7ddrphy_dfi_p3_address[12]),
	.D8(a7ddrphy_dfi_p3_address[12]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[12])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_14 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_bank[0]),
	.D2(a7ddrphy_dfi_p0_bank[0]),
	.D3(a7ddrphy_dfi_p1_bank[0]),
	.D4(a7ddrphy_dfi_p1_bank[0]),
	.D5(a7ddrphy_dfi_p2_bank[0]),
	.D6(a7ddrphy_dfi_p2_bank[0]),
	.D7(a7ddrphy_dfi_p3_bank[0]),
	.D8(a7ddrphy_dfi_p3_bank[0]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_ba[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_15 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_bank[1]),
	.D2(a7ddrphy_dfi_p0_bank[1]),
	.D3(a7ddrphy_dfi_p1_bank[1]),
	.D4(a7ddrphy_dfi_p1_bank[1]),
	.D5(a7ddrphy_dfi_p2_bank[1]),
	.D6(a7ddrphy_dfi_p2_bank[1]),
	.D7(a7ddrphy_dfi_p3_bank[1]),
	.D8(a7ddrphy_dfi_p3_bank[1]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_ba[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_16 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_bank[2]),
	.D2(a7ddrphy_dfi_p0_bank[2]),
	.D3(a7ddrphy_dfi_p1_bank[2]),
	.D4(a7ddrphy_dfi_p1_bank[2]),
	.D5(a7ddrphy_dfi_p2_bank[2]),
	.D6(a7ddrphy_dfi_p2_bank[2]),
	.D7(a7ddrphy_dfi_p3_bank[2]),
	.D8(a7ddrphy_dfi_p3_bank[2]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_ba[2])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_17 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_ras_n),
	.D2(a7ddrphy_dfi_p0_ras_n),
	.D3(a7ddrphy_dfi_p1_ras_n),
	.D4(a7ddrphy_dfi_p1_ras_n),
	.D5(a7ddrphy_dfi_p2_ras_n),
	.D6(a7ddrphy_dfi_p2_ras_n),
	.D7(a7ddrphy_dfi_p3_ras_n),
	.D8(a7ddrphy_dfi_p3_ras_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_ras_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_18 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_cas_n),
	.D2(a7ddrphy_dfi_p0_cas_n),
	.D3(a7ddrphy_dfi_p1_cas_n),
	.D4(a7ddrphy_dfi_p1_cas_n),
	.D5(a7ddrphy_dfi_p2_cas_n),
	.D6(a7ddrphy_dfi_p2_cas_n),
	.D7(a7ddrphy_dfi_p3_cas_n),
	.D8(a7ddrphy_dfi_p3_cas_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_cas_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_19 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_we_n),
	.D2(a7ddrphy_dfi_p0_we_n),
	.D3(a7ddrphy_dfi_p1_we_n),
	.D4(a7ddrphy_dfi_p1_we_n),
	.D5(a7ddrphy_dfi_p2_we_n),
	.D6(a7ddrphy_dfi_p2_we_n),
	.D7(a7ddrphy_dfi_p3_we_n),
	.D8(a7ddrphy_dfi_p3_we_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_we_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_20 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_cke),
	.D2(a7ddrphy_dfi_p0_cke),
	.D3(a7ddrphy_dfi_p1_cke),
	.D4(a7ddrphy_dfi_p1_cke),
	.D5(a7ddrphy_dfi_p2_cke),
	.D6(a7ddrphy_dfi_p2_cke),
	.D7(a7ddrphy_dfi_p3_cke),
	.D8(a7ddrphy_dfi_p3_cke),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_cke)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_21 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_odt),
	.D2(a7ddrphy_dfi_p0_odt),
	.D3(a7ddrphy_dfi_p1_odt),
	.D4(a7ddrphy_dfi_p1_odt),
	.D5(a7ddrphy_dfi_p2_odt),
	.D6(a7ddrphy_dfi_p2_odt),
	.D7(a7ddrphy_dfi_p3_odt),
	.D8(a7ddrphy_dfi_p3_odt),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_odt)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_22 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_reset_n),
	.D2(a7ddrphy_dfi_p0_reset_n),
	.D3(a7ddrphy_dfi_p1_reset_n),
	.D4(a7ddrphy_dfi_p1_reset_n),
	.D5(a7ddrphy_dfi_p2_reset_n),
	.D6(a7ddrphy_dfi_p2_reset_n),
	.D7(a7ddrphy_dfi_p3_reset_n),
	.D8(a7ddrphy_dfi_p3_reset_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_reset_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_23 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_cs_n),
	.D2(a7ddrphy_dfi_p0_cs_n),
	.D3(a7ddrphy_dfi_p1_cs_n),
	.D4(a7ddrphy_dfi_p1_cs_n),
	.D5(a7ddrphy_dfi_p2_cs_n),
	.D6(a7ddrphy_dfi_p2_cs_n),
	.D7(a7ddrphy_dfi_p3_cs_n),
	.D8(a7ddrphy_dfi_p3_cs_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_cs_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_24 (
	.CLK(sys2x_dqs_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip00[0]),
	.D2(a7ddrphy_bitslip00[1]),
	.D3(a7ddrphy_bitslip00[2]),
	.D4(a7ddrphy_bitslip00[3]),
	.D5(a7ddrphy_bitslip00[4]),
	.D6(a7ddrphy_bitslip00[5]),
	.D7(a7ddrphy_bitslip00[6]),
	.D8(a7ddrphy_bitslip00[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OFB(a7ddrphy0),
	.OQ(a7ddrphy_dqs_o_no_delay0),
	.TQ(a7ddrphy_dqs_t0)
);

IOBUFDS IOBUFDS(
	.I(a7ddrphy_dqs_o_no_delay0),
	.T(a7ddrphy_dqs_t0),
	.IO(ddram_dqs_p[0]),
	.IOB(ddram_dqs_n[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_25 (
	.CLK(sys2x_dqs_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip10[0]),
	.D2(a7ddrphy_bitslip10[1]),
	.D3(a7ddrphy_bitslip10[2]),
	.D4(a7ddrphy_bitslip10[3]),
	.D5(a7ddrphy_bitslip10[4]),
	.D6(a7ddrphy_bitslip10[5]),
	.D7(a7ddrphy_bitslip10[6]),
	.D8(a7ddrphy_bitslip10[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OFB(a7ddrphy1),
	.OQ(a7ddrphy_dqs_o_no_delay1),
	.TQ(a7ddrphy_dqs_t1)
);

IOBUFDS IOBUFDS_1(
	.I(a7ddrphy_dqs_o_no_delay1),
	.T(a7ddrphy_dqs_t1),
	.IO(ddram_dqs_p[1]),
	.IOB(ddram_dqs_n[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_26 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip01[0]),
	.D2(a7ddrphy_bitslip01[1]),
	.D3(a7ddrphy_bitslip01[2]),
	.D4(a7ddrphy_bitslip01[3]),
	.D5(a7ddrphy_bitslip01[4]),
	.D6(a7ddrphy_bitslip01[5]),
	.D7(a7ddrphy_bitslip01[6]),
	.D8(a7ddrphy_bitslip01[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_dm[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_27 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip11[0]),
	.D2(a7ddrphy_bitslip11[1]),
	.D3(a7ddrphy_bitslip11[2]),
	.D4(a7ddrphy_bitslip11[3]),
	.D5(a7ddrphy_bitslip11[4]),
	.D6(a7ddrphy_bitslip11[5]),
	.D7(a7ddrphy_bitslip11[6]),
	.D8(a7ddrphy_bitslip11[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_dm[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_28 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip02[0]),
	.D2(a7ddrphy_bitslip02[1]),
	.D3(a7ddrphy_bitslip02[2]),
	.D4(a7ddrphy_bitslip02[3]),
	.D5(a7ddrphy_bitslip02[4]),
	.D6(a7ddrphy_bitslip02[5]),
	.D7(a7ddrphy_bitslip02[6]),
	.D8(a7ddrphy_bitslip02[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay0),
	.TQ(a7ddrphy_dq_t0)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed0),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip03[7]),
	.Q2(a7ddrphy_bitslip03[6]),
	.Q3(a7ddrphy_bitslip03[5]),
	.Q4(a7ddrphy_bitslip03[4]),
	.Q5(a7ddrphy_bitslip03[3]),
	.Q6(a7ddrphy_bitslip03[2]),
	.Q7(a7ddrphy_bitslip03[1]),
	.Q8(a7ddrphy_bitslip03[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay0),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed0)
);

IOBUF IOBUF(
	.I(a7ddrphy_dq_o_nodelay0),
	.T(a7ddrphy_dq_t0),
	.IO(ddram_dq[0]),
	.O(a7ddrphy_dq_i_nodelay0)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_29 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip12[0]),
	.D2(a7ddrphy_bitslip12[1]),
	.D3(a7ddrphy_bitslip12[2]),
	.D4(a7ddrphy_bitslip12[3]),
	.D5(a7ddrphy_bitslip12[4]),
	.D6(a7ddrphy_bitslip12[5]),
	.D7(a7ddrphy_bitslip12[6]),
	.D8(a7ddrphy_bitslip12[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay1),
	.TQ(a7ddrphy_dq_t1)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_1 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip13[7]),
	.Q2(a7ddrphy_bitslip13[6]),
	.Q3(a7ddrphy_bitslip13[5]),
	.Q4(a7ddrphy_bitslip13[4]),
	.Q5(a7ddrphy_bitslip13[3]),
	.Q6(a7ddrphy_bitslip13[2]),
	.Q7(a7ddrphy_bitslip13[1]),
	.Q8(a7ddrphy_bitslip13[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_1 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay1),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed1)
);

IOBUF IOBUF_1(
	.I(a7ddrphy_dq_o_nodelay1),
	.T(a7ddrphy_dq_t1),
	.IO(ddram_dq[1]),
	.O(a7ddrphy_dq_i_nodelay1)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_30 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip20[0]),
	.D2(a7ddrphy_bitslip20[1]),
	.D3(a7ddrphy_bitslip20[2]),
	.D4(a7ddrphy_bitslip20[3]),
	.D5(a7ddrphy_bitslip20[4]),
	.D6(a7ddrphy_bitslip20[5]),
	.D7(a7ddrphy_bitslip20[6]),
	.D8(a7ddrphy_bitslip20[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay2),
	.TQ(a7ddrphy_dq_t2)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_2 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed2),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip21[7]),
	.Q2(a7ddrphy_bitslip21[6]),
	.Q3(a7ddrphy_bitslip21[5]),
	.Q4(a7ddrphy_bitslip21[4]),
	.Q5(a7ddrphy_bitslip21[3]),
	.Q6(a7ddrphy_bitslip21[2]),
	.Q7(a7ddrphy_bitslip21[1]),
	.Q8(a7ddrphy_bitslip21[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_2 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay2),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed2)
);

IOBUF IOBUF_2(
	.I(a7ddrphy_dq_o_nodelay2),
	.T(a7ddrphy_dq_t2),
	.IO(ddram_dq[2]),
	.O(a7ddrphy_dq_i_nodelay2)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_31 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip30[0]),
	.D2(a7ddrphy_bitslip30[1]),
	.D3(a7ddrphy_bitslip30[2]),
	.D4(a7ddrphy_bitslip30[3]),
	.D5(a7ddrphy_bitslip30[4]),
	.D6(a7ddrphy_bitslip30[5]),
	.D7(a7ddrphy_bitslip30[6]),
	.D8(a7ddrphy_bitslip30[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay3),
	.TQ(a7ddrphy_dq_t3)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_3 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed3),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip31[7]),
	.Q2(a7ddrphy_bitslip31[6]),
	.Q3(a7ddrphy_bitslip31[5]),
	.Q4(a7ddrphy_bitslip31[4]),
	.Q5(a7ddrphy_bitslip31[3]),
	.Q6(a7ddrphy_bitslip31[2]),
	.Q7(a7ddrphy_bitslip31[1]),
	.Q8(a7ddrphy_bitslip31[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_3 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay3),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed3)
);

IOBUF IOBUF_3(
	.I(a7ddrphy_dq_o_nodelay3),
	.T(a7ddrphy_dq_t3),
	.IO(ddram_dq[3]),
	.O(a7ddrphy_dq_i_nodelay3)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_32 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip40[0]),
	.D2(a7ddrphy_bitslip40[1]),
	.D3(a7ddrphy_bitslip40[2]),
	.D4(a7ddrphy_bitslip40[3]),
	.D5(a7ddrphy_bitslip40[4]),
	.D6(a7ddrphy_bitslip40[5]),
	.D7(a7ddrphy_bitslip40[6]),
	.D8(a7ddrphy_bitslip40[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay4),
	.TQ(a7ddrphy_dq_t4)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_4 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed4),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip41[7]),
	.Q2(a7ddrphy_bitslip41[6]),
	.Q3(a7ddrphy_bitslip41[5]),
	.Q4(a7ddrphy_bitslip41[4]),
	.Q5(a7ddrphy_bitslip41[3]),
	.Q6(a7ddrphy_bitslip41[2]),
	.Q7(a7ddrphy_bitslip41[1]),
	.Q8(a7ddrphy_bitslip41[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_4 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay4),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed4)
);

IOBUF IOBUF_4(
	.I(a7ddrphy_dq_o_nodelay4),
	.T(a7ddrphy_dq_t4),
	.IO(ddram_dq[4]),
	.O(a7ddrphy_dq_i_nodelay4)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_33 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip50[0]),
	.D2(a7ddrphy_bitslip50[1]),
	.D3(a7ddrphy_bitslip50[2]),
	.D4(a7ddrphy_bitslip50[3]),
	.D5(a7ddrphy_bitslip50[4]),
	.D6(a7ddrphy_bitslip50[5]),
	.D7(a7ddrphy_bitslip50[6]),
	.D8(a7ddrphy_bitslip50[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay5),
	.TQ(a7ddrphy_dq_t5)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_5 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed5),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip51[7]),
	.Q2(a7ddrphy_bitslip51[6]),
	.Q3(a7ddrphy_bitslip51[5]),
	.Q4(a7ddrphy_bitslip51[4]),
	.Q5(a7ddrphy_bitslip51[3]),
	.Q6(a7ddrphy_bitslip51[2]),
	.Q7(a7ddrphy_bitslip51[1]),
	.Q8(a7ddrphy_bitslip51[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_5 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay5),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed5)
);

IOBUF IOBUF_5(
	.I(a7ddrphy_dq_o_nodelay5),
	.T(a7ddrphy_dq_t5),
	.IO(ddram_dq[5]),
	.O(a7ddrphy_dq_i_nodelay5)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_34 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip60[0]),
	.D2(a7ddrphy_bitslip60[1]),
	.D3(a7ddrphy_bitslip60[2]),
	.D4(a7ddrphy_bitslip60[3]),
	.D5(a7ddrphy_bitslip60[4]),
	.D6(a7ddrphy_bitslip60[5]),
	.D7(a7ddrphy_bitslip60[6]),
	.D8(a7ddrphy_bitslip60[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay6),
	.TQ(a7ddrphy_dq_t6)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_6 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed6),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip61[7]),
	.Q2(a7ddrphy_bitslip61[6]),
	.Q3(a7ddrphy_bitslip61[5]),
	.Q4(a7ddrphy_bitslip61[4]),
	.Q5(a7ddrphy_bitslip61[3]),
	.Q6(a7ddrphy_bitslip61[2]),
	.Q7(a7ddrphy_bitslip61[1]),
	.Q8(a7ddrphy_bitslip61[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_6 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay6),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed6)
);

IOBUF IOBUF_6(
	.I(a7ddrphy_dq_o_nodelay6),
	.T(a7ddrphy_dq_t6),
	.IO(ddram_dq[6]),
	.O(a7ddrphy_dq_i_nodelay6)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_35 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip70[0]),
	.D2(a7ddrphy_bitslip70[1]),
	.D3(a7ddrphy_bitslip70[2]),
	.D4(a7ddrphy_bitslip70[3]),
	.D5(a7ddrphy_bitslip70[4]),
	.D6(a7ddrphy_bitslip70[5]),
	.D7(a7ddrphy_bitslip70[6]),
	.D8(a7ddrphy_bitslip70[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay7),
	.TQ(a7ddrphy_dq_t7)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_7 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed7),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip71[7]),
	.Q2(a7ddrphy_bitslip71[6]),
	.Q3(a7ddrphy_bitslip71[5]),
	.Q4(a7ddrphy_bitslip71[4]),
	.Q5(a7ddrphy_bitslip71[3]),
	.Q6(a7ddrphy_bitslip71[2]),
	.Q7(a7ddrphy_bitslip71[1]),
	.Q8(a7ddrphy_bitslip71[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_7 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay7),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed7)
);

IOBUF IOBUF_7(
	.I(a7ddrphy_dq_o_nodelay7),
	.T(a7ddrphy_dq_t7),
	.IO(ddram_dq[7]),
	.O(a7ddrphy_dq_i_nodelay7)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_36 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip80[0]),
	.D2(a7ddrphy_bitslip80[1]),
	.D3(a7ddrphy_bitslip80[2]),
	.D4(a7ddrphy_bitslip80[3]),
	.D5(a7ddrphy_bitslip80[4]),
	.D6(a7ddrphy_bitslip80[5]),
	.D7(a7ddrphy_bitslip80[6]),
	.D8(a7ddrphy_bitslip80[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay8),
	.TQ(a7ddrphy_dq_t8)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_8 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed8),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip81[7]),
	.Q2(a7ddrphy_bitslip81[6]),
	.Q3(a7ddrphy_bitslip81[5]),
	.Q4(a7ddrphy_bitslip81[4]),
	.Q5(a7ddrphy_bitslip81[3]),
	.Q6(a7ddrphy_bitslip81[2]),
	.Q7(a7ddrphy_bitslip81[1]),
	.Q8(a7ddrphy_bitslip81[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_8 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay8),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed8)
);

IOBUF IOBUF_8(
	.I(a7ddrphy_dq_o_nodelay8),
	.T(a7ddrphy_dq_t8),
	.IO(ddram_dq[8]),
	.O(a7ddrphy_dq_i_nodelay8)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_37 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip90[0]),
	.D2(a7ddrphy_bitslip90[1]),
	.D3(a7ddrphy_bitslip90[2]),
	.D4(a7ddrphy_bitslip90[3]),
	.D5(a7ddrphy_bitslip90[4]),
	.D6(a7ddrphy_bitslip90[5]),
	.D7(a7ddrphy_bitslip90[6]),
	.D8(a7ddrphy_bitslip90[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay9),
	.TQ(a7ddrphy_dq_t9)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_9 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed9),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip91[7]),
	.Q2(a7ddrphy_bitslip91[6]),
	.Q3(a7ddrphy_bitslip91[5]),
	.Q4(a7ddrphy_bitslip91[4]),
	.Q5(a7ddrphy_bitslip91[3]),
	.Q6(a7ddrphy_bitslip91[2]),
	.Q7(a7ddrphy_bitslip91[1]),
	.Q8(a7ddrphy_bitslip91[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_9 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay9),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed9)
);

IOBUF IOBUF_9(
	.I(a7ddrphy_dq_o_nodelay9),
	.T(a7ddrphy_dq_t9),
	.IO(ddram_dq[9]),
	.O(a7ddrphy_dq_i_nodelay9)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_38 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip100[0]),
	.D2(a7ddrphy_bitslip100[1]),
	.D3(a7ddrphy_bitslip100[2]),
	.D4(a7ddrphy_bitslip100[3]),
	.D5(a7ddrphy_bitslip100[4]),
	.D6(a7ddrphy_bitslip100[5]),
	.D7(a7ddrphy_bitslip100[6]),
	.D8(a7ddrphy_bitslip100[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay10),
	.TQ(a7ddrphy_dq_t10)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_10 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed10),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip101[7]),
	.Q2(a7ddrphy_bitslip101[6]),
	.Q3(a7ddrphy_bitslip101[5]),
	.Q4(a7ddrphy_bitslip101[4]),
	.Q5(a7ddrphy_bitslip101[3]),
	.Q6(a7ddrphy_bitslip101[2]),
	.Q7(a7ddrphy_bitslip101[1]),
	.Q8(a7ddrphy_bitslip101[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_10 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay10),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed10)
);

IOBUF IOBUF_10(
	.I(a7ddrphy_dq_o_nodelay10),
	.T(a7ddrphy_dq_t10),
	.IO(ddram_dq[10]),
	.O(a7ddrphy_dq_i_nodelay10)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_39 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip110[0]),
	.D2(a7ddrphy_bitslip110[1]),
	.D3(a7ddrphy_bitslip110[2]),
	.D4(a7ddrphy_bitslip110[3]),
	.D5(a7ddrphy_bitslip110[4]),
	.D6(a7ddrphy_bitslip110[5]),
	.D7(a7ddrphy_bitslip110[6]),
	.D8(a7ddrphy_bitslip110[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay11),
	.TQ(a7ddrphy_dq_t11)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_11 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed11),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip111[7]),
	.Q2(a7ddrphy_bitslip111[6]),
	.Q3(a7ddrphy_bitslip111[5]),
	.Q4(a7ddrphy_bitslip111[4]),
	.Q5(a7ddrphy_bitslip111[3]),
	.Q6(a7ddrphy_bitslip111[2]),
	.Q7(a7ddrphy_bitslip111[1]),
	.Q8(a7ddrphy_bitslip111[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_11 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay11),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed11)
);

IOBUF IOBUF_11(
	.I(a7ddrphy_dq_o_nodelay11),
	.T(a7ddrphy_dq_t11),
	.IO(ddram_dq[11]),
	.O(a7ddrphy_dq_i_nodelay11)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_40 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip120[0]),
	.D2(a7ddrphy_bitslip120[1]),
	.D3(a7ddrphy_bitslip120[2]),
	.D4(a7ddrphy_bitslip120[3]),
	.D5(a7ddrphy_bitslip120[4]),
	.D6(a7ddrphy_bitslip120[5]),
	.D7(a7ddrphy_bitslip120[6]),
	.D8(a7ddrphy_bitslip120[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay12),
	.TQ(a7ddrphy_dq_t12)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_12 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed12),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip121[7]),
	.Q2(a7ddrphy_bitslip121[6]),
	.Q3(a7ddrphy_bitslip121[5]),
	.Q4(a7ddrphy_bitslip121[4]),
	.Q5(a7ddrphy_bitslip121[3]),
	.Q6(a7ddrphy_bitslip121[2]),
	.Q7(a7ddrphy_bitslip121[1]),
	.Q8(a7ddrphy_bitslip121[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_12 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay12),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed12)
);

IOBUF IOBUF_12(
	.I(a7ddrphy_dq_o_nodelay12),
	.T(a7ddrphy_dq_t12),
	.IO(ddram_dq[12]),
	.O(a7ddrphy_dq_i_nodelay12)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_41 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip130[0]),
	.D2(a7ddrphy_bitslip130[1]),
	.D3(a7ddrphy_bitslip130[2]),
	.D4(a7ddrphy_bitslip130[3]),
	.D5(a7ddrphy_bitslip130[4]),
	.D6(a7ddrphy_bitslip130[5]),
	.D7(a7ddrphy_bitslip130[6]),
	.D8(a7ddrphy_bitslip130[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay13),
	.TQ(a7ddrphy_dq_t13)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_13 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed13),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip131[7]),
	.Q2(a7ddrphy_bitslip131[6]),
	.Q3(a7ddrphy_bitslip131[5]),
	.Q4(a7ddrphy_bitslip131[4]),
	.Q5(a7ddrphy_bitslip131[3]),
	.Q6(a7ddrphy_bitslip131[2]),
	.Q7(a7ddrphy_bitslip131[1]),
	.Q8(a7ddrphy_bitslip131[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_13 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay13),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed13)
);

IOBUF IOBUF_13(
	.I(a7ddrphy_dq_o_nodelay13),
	.T(a7ddrphy_dq_t13),
	.IO(ddram_dq[13]),
	.O(a7ddrphy_dq_i_nodelay13)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_42 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip140[0]),
	.D2(a7ddrphy_bitslip140[1]),
	.D3(a7ddrphy_bitslip140[2]),
	.D4(a7ddrphy_bitslip140[3]),
	.D5(a7ddrphy_bitslip140[4]),
	.D6(a7ddrphy_bitslip140[5]),
	.D7(a7ddrphy_bitslip140[6]),
	.D8(a7ddrphy_bitslip140[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay14),
	.TQ(a7ddrphy_dq_t14)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_14 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed14),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip141[7]),
	.Q2(a7ddrphy_bitslip141[6]),
	.Q3(a7ddrphy_bitslip141[5]),
	.Q4(a7ddrphy_bitslip141[4]),
	.Q5(a7ddrphy_bitslip141[3]),
	.Q6(a7ddrphy_bitslip141[2]),
	.Q7(a7ddrphy_bitslip141[1]),
	.Q8(a7ddrphy_bitslip141[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_14 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay14),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed14)
);

IOBUF IOBUF_14(
	.I(a7ddrphy_dq_o_nodelay14),
	.T(a7ddrphy_dq_t14),
	.IO(ddram_dq[14]),
	.O(a7ddrphy_dq_i_nodelay14)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(3'd4),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_43 (
	.CLK(sys2x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip150[0]),
	.D2(a7ddrphy_bitslip150[1]),
	.D3(a7ddrphy_bitslip150[2]),
	.D4(a7ddrphy_bitslip150[3]),
	.D5(a7ddrphy_bitslip150[4]),
	.D6(a7ddrphy_bitslip150[5]),
	.D7(a7ddrphy_bitslip150[6]),
	.D8(a7ddrphy_bitslip150[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay15),
	.TQ(a7ddrphy_dq_t15)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(3'd4),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_15 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys2x_clk),
	.CLKB((~sys2x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed15),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip151[7]),
	.Q2(a7ddrphy_bitslip151[6]),
	.Q3(a7ddrphy_bitslip151[5]),
	.Q4(a7ddrphy_bitslip151[4]),
	.Q5(a7ddrphy_bitslip151[3]),
	.Q6(a7ddrphy_bitslip151[2]),
	.Q7(a7ddrphy_bitslip151[1]),
	.Q8(a7ddrphy_bitslip151[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_15 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay15),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed15)
);

IOBUF IOBUF_15(
	.I(a7ddrphy_dq_o_nodelay15),
	.T(a7ddrphy_dq_t15),
	.IO(ddram_dq[15]),
	.O(a7ddrphy_dq_i_nodelay15)
);

reg [23:0] storage_2[0:15];
reg [23:0] memdat_5;
always @(posedge sys_clk) begin
	if (sdram_bankmachine0_cmd_buffer_lookahead_wrport_we)
		storage_2[sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_w;
	memdat_5 <= storage_2[sdram_bankmachine0_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine0_cmd_buffer_lookahead_wrport_dat_r = memdat_5;
assign sdram_bankmachine0_cmd_buffer_lookahead_rdport_dat_r = storage_2[sdram_bankmachine0_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_3[0:15];
reg [23:0] memdat_6;
always @(posedge sys_clk) begin
	if (sdram_bankmachine1_cmd_buffer_lookahead_wrport_we)
		storage_3[sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_w;
	memdat_6 <= storage_3[sdram_bankmachine1_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine1_cmd_buffer_lookahead_wrport_dat_r = memdat_6;
assign sdram_bankmachine1_cmd_buffer_lookahead_rdport_dat_r = storage_3[sdram_bankmachine1_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_4[0:15];
reg [23:0] memdat_7;
always @(posedge sys_clk) begin
	if (sdram_bankmachine2_cmd_buffer_lookahead_wrport_we)
		storage_4[sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_w;
	memdat_7 <= storage_4[sdram_bankmachine2_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine2_cmd_buffer_lookahead_wrport_dat_r = memdat_7;
assign sdram_bankmachine2_cmd_buffer_lookahead_rdport_dat_r = storage_4[sdram_bankmachine2_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_5[0:15];
reg [23:0] memdat_8;
always @(posedge sys_clk) begin
	if (sdram_bankmachine3_cmd_buffer_lookahead_wrport_we)
		storage_5[sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_w;
	memdat_8 <= storage_5[sdram_bankmachine3_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine3_cmd_buffer_lookahead_wrport_dat_r = memdat_8;
assign sdram_bankmachine3_cmd_buffer_lookahead_rdport_dat_r = storage_5[sdram_bankmachine3_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_6[0:15];
reg [23:0] memdat_9;
always @(posedge sys_clk) begin
	if (sdram_bankmachine4_cmd_buffer_lookahead_wrport_we)
		storage_6[sdram_bankmachine4_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine4_cmd_buffer_lookahead_wrport_dat_w;
	memdat_9 <= storage_6[sdram_bankmachine4_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine4_cmd_buffer_lookahead_wrport_dat_r = memdat_9;
assign sdram_bankmachine4_cmd_buffer_lookahead_rdport_dat_r = storage_6[sdram_bankmachine4_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_7[0:15];
reg [23:0] memdat_10;
always @(posedge sys_clk) begin
	if (sdram_bankmachine5_cmd_buffer_lookahead_wrport_we)
		storage_7[sdram_bankmachine5_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine5_cmd_buffer_lookahead_wrport_dat_w;
	memdat_10 <= storage_7[sdram_bankmachine5_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine5_cmd_buffer_lookahead_wrport_dat_r = memdat_10;
assign sdram_bankmachine5_cmd_buffer_lookahead_rdport_dat_r = storage_7[sdram_bankmachine5_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_8[0:15];
reg [23:0] memdat_11;
always @(posedge sys_clk) begin
	if (sdram_bankmachine6_cmd_buffer_lookahead_wrport_we)
		storage_8[sdram_bankmachine6_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine6_cmd_buffer_lookahead_wrport_dat_w;
	memdat_11 <= storage_8[sdram_bankmachine6_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine6_cmd_buffer_lookahead_wrport_dat_r = memdat_11;
assign sdram_bankmachine6_cmd_buffer_lookahead_rdport_dat_r = storage_8[sdram_bankmachine6_cmd_buffer_lookahead_rdport_adr];

reg [23:0] storage_9[0:15];
reg [23:0] memdat_12;
always @(posedge sys_clk) begin
	if (sdram_bankmachine7_cmd_buffer_lookahead_wrport_we)
		storage_9[sdram_bankmachine7_cmd_buffer_lookahead_wrport_adr] <= sdram_bankmachine7_cmd_buffer_lookahead_wrport_dat_w;
	memdat_12 <= storage_9[sdram_bankmachine7_cmd_buffer_lookahead_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign sdram_bankmachine7_cmd_buffer_lookahead_wrport_dat_r = memdat_12;
assign sdram_bankmachine7_cmd_buffer_lookahead_rdport_dat_r = storage_9[sdram_bankmachine7_cmd_buffer_lookahead_rdport_adr];

reg [30:0] tag_mem[0:1];
reg [0:0] memadr_1;
always @(posedge sys_clk) begin
	if (tag_port_we)
		tag_mem[tag_port_adr] <= tag_port_dat_w;
	memadr_1 <= tag_port_adr;
end

assign tag_port_dat_r = tag_mem[memadr_1];

reg [79:0] storage_10[0:15];
reg [79:0] memdat_13;
reg [79:0] memdat_14;
always @(posedge sys_clk) begin
	if (write_w_buffer_wrport_we)
		storage_10[write_w_buffer_wrport_adr] <= write_w_buffer_wrport_dat_w;
	memdat_13 <= storage_10[write_w_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
	if (write_w_buffer_rdport_re)
		memdat_14 <= storage_10[write_w_buffer_rdport_adr];
end

assign write_w_buffer_wrport_dat_r = memdat_13;
assign write_w_buffer_rdport_dat_r = memdat_14;

reg [7:0] storage_11[0:15];
reg [7:0] memdat_15;
always @(posedge sys_clk) begin
	if (write_id_buffer_wrport_we)
		storage_11[write_id_buffer_wrport_adr] <= write_id_buffer_wrport_dat_w;
	memdat_15 <= storage_11[write_id_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign write_id_buffer_wrport_dat_r = memdat_15;
assign write_id_buffer_rdport_dat_r = storage_11[write_id_buffer_rdport_adr];

reg [9:0] storage_12[0:15];
reg [9:0] memdat_16;
always @(posedge sys_clk) begin
	if (write_resp_buffer_wrport_we)
		storage_12[write_resp_buffer_wrport_adr] <= write_resp_buffer_wrport_dat_w;
	memdat_16 <= storage_12[write_resp_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign write_resp_buffer_wrport_dat_r = memdat_16;
assign write_resp_buffer_rdport_dat_r = storage_12[write_resp_buffer_rdport_adr];

reg [73:0] storage_13[0:15];
reg [73:0] memdat_17;
reg [73:0] memdat_18;
always @(posedge sys_clk) begin
	if (read_r_buffer_wrport_we)
		storage_13[read_r_buffer_wrport_adr] <= read_r_buffer_wrport_dat_w;
	memdat_17 <= storage_13[read_r_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
	if (read_r_buffer_rdport_re)
		memdat_18 <= storage_13[read_r_buffer_rdport_adr];
end

assign read_r_buffer_wrport_dat_r = memdat_17;
assign read_r_buffer_rdport_dat_r = memdat_18;

reg [7:0] storage_14[0:15];
reg [7:0] memdat_19;
always @(posedge sys_clk) begin
	if (read_id_buffer_wrport_we)
		storage_14[read_id_buffer_wrport_adr] <= read_id_buffer_wrport_dat_w;
	memdat_19 <= storage_14[read_id_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign read_id_buffer_wrport_dat_r = memdat_19;
assign read_id_buffer_rdport_dat_r = storage_14[read_id_buffer_rdport_adr];

serv_rf_top #(
	.RESET_PC(1'd0)
) serv_rf_top (
	.clk(sys_clk),
	.i_dbus_ack(serv_dbus_ack),
	.i_dbus_rdt(serv_dbus_dat_r),
	.i_ibus_ack(serv_ibus_ack),
	.i_ibus_rdt(serv_ibus_dat_r),
	.i_rst((sys_rst | serv_reset)),
	.i_timer_irq(1'd0),
	.o_dbus_adr({serv_dbus_adr, serv1}),
	.o_dbus_cyc(serv_dbus_cyc),
	.o_dbus_dat(serv_dbus_dat_w),
	.o_dbus_sel(serv_dbus_sel),
	.o_dbus_we(serv_dbus_we),
	.o_ibus_adr({serv_ibus_adr, serv0}),
	.o_ibus_cyc(serv_ibus_cyc)
);

FD FD(
	.C(clkin),
	.D(reset),
	.Q(subfragments_reset0)
);

FD FD_1(
	.C(clkin),
	.D(subfragments_reset0),
	.Q(subfragments_reset1)
);

FD FD_2(
	.C(clkin),
	.D(subfragments_reset1),
	.Q(subfragments_reset2)
);

FD FD_3(
	.C(clkin),
	.D(subfragments_reset2),
	.Q(subfragments_reset3)
);

FD FD_4(
	.C(clkin),
	.D(subfragments_reset3),
	.Q(subfragments_reset4)
);

FD FD_5(
	.C(clkin),
	.D(subfragments_reset4),
	.Q(subfragments_reset5)
);

FD FD_6(
	.C(clkin),
	.D(subfragments_reset5),
	.Q(subfragments_reset6)
);

FD FD_7(
	.C(clkin),
	.D(subfragments_reset6),
	.Q(subfragments_reset7)
);

PLLE2_ADV #(
	.CLKFBOUT_MULT(5'd16),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE(4'd8),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(5'd16),
	.CLKOUT1_PHASE(1'd0),
	.CLKOUT2_DIVIDE(4'd8),
	.CLKOUT2_PHASE(1'd0),
	.CLKOUT3_DIVIDE(4'd8),
	.CLKOUT3_PHASE(7'd90),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV (
	.CLKFBIN(subfragments_pll_fb),
	.CLKIN1(clkin),
	.RST(subfragments_reset7),
	.CLKFBOUT(subfragments_pll_fb),
	.CLKOUT0(clkout0),
	.CLKOUT1(clkout1),
	.CLKOUT2(clkout2),
	.CLKOUT3(clkout3),
	.LOCKED(locked)
);

reg [7:0] data_mem_grain0[0:1];
reg [0:0] memadr_2;
always @(posedge sys_clk) begin
	if (data_port_we[0])
		data_mem_grain0[data_port_adr] <= data_port_dat_w[7:0];
	memadr_2 <= data_port_adr;
end

assign data_port_dat_r[7:0] = data_mem_grain0[memadr_2];

reg [7:0] data_mem_grain1[0:1];
reg [0:0] memadr_3;
always @(posedge sys_clk) begin
	if (data_port_we[1])
		data_mem_grain1[data_port_adr] <= data_port_dat_w[15:8];
	memadr_3 <= data_port_adr;
end

assign data_port_dat_r[15:8] = data_mem_grain1[memadr_3];

reg [7:0] data_mem_grain2[0:1];
reg [0:0] memadr_4;
always @(posedge sys_clk) begin
	if (data_port_we[2])
		data_mem_grain2[data_port_adr] <= data_port_dat_w[23:16];
	memadr_4 <= data_port_adr;
end

assign data_port_dat_r[23:16] = data_mem_grain2[memadr_4];

reg [7:0] data_mem_grain3[0:1];
reg [0:0] memadr_5;
always @(posedge sys_clk) begin
	if (data_port_we[3])
		data_mem_grain3[data_port_adr] <= data_port_dat_w[31:24];
	memadr_5 <= data_port_adr;
end

assign data_port_dat_r[31:24] = data_mem_grain3[memadr_5];

reg [7:0] data_mem_grain4[0:1];
reg [0:0] memadr_6;
always @(posedge sys_clk) begin
	if (data_port_we[4])
		data_mem_grain4[data_port_adr] <= data_port_dat_w[39:32];
	memadr_6 <= data_port_adr;
end

assign data_port_dat_r[39:32] = data_mem_grain4[memadr_6];

reg [7:0] data_mem_grain5[0:1];
reg [0:0] memadr_7;
always @(posedge sys_clk) begin
	if (data_port_we[5])
		data_mem_grain5[data_port_adr] <= data_port_dat_w[47:40];
	memadr_7 <= data_port_adr;
end

assign data_port_dat_r[47:40] = data_mem_grain5[memadr_7];

reg [7:0] data_mem_grain6[0:1];
reg [0:0] memadr_8;
always @(posedge sys_clk) begin
	if (data_port_we[6])
		data_mem_grain6[data_port_adr] <= data_port_dat_w[55:48];
	memadr_8 <= data_port_adr;
end

assign data_port_dat_r[55:48] = data_mem_grain6[memadr_8];

reg [7:0] data_mem_grain7[0:1];
reg [0:0] memadr_9;
always @(posedge sys_clk) begin
	if (data_port_we[7])
		data_mem_grain7[data_port_adr] <= data_port_dat_w[63:56];
	memadr_9 <= data_port_adr;
end

assign data_port_dat_r[63:56] = data_mem_grain7[memadr_9];

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(iodelay_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(iodelay_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(iodelay_rst)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_2 (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_3 (
	.C(sys_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_4 (
	.C(sys2x_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl2),
	.Q(xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_5 (
	.C(sys2x_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl2),
	.Q(xilinxasyncresetsynchronizerimpl2_expr)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_6 (
	.C(sys2x_dqs_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl3),
	.Q(xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_7 (
	.C(sys2x_dqs_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl3),
	.Q(xilinxasyncresetsynchronizerimpl3_expr)
);

endmodule
